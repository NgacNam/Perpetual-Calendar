
perpetualcalendar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000027b4  00002848  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  00800074  00800074  0000285c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000285c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000288c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000028c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c4a  00000000  00000000  000029b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000083e  00000000  00000000  000045fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ffa  00000000  00000000  00004e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000498  00000000  00000000  00005e34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000583  00000000  00000000  000062cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014de  00000000  00000000  0000684f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00007d2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 00 	jmp	0x72	; 0x72 <__ctors_end>
       4:	0c 94 8a 0e 	jmp	0x1d14	; 0x1d14 <__vector_1>
       8:	0c 94 ec 0e 	jmp	0x1dd8	; 0x1dd8 <__vector_2>
       c:	0c 94 26 0f 	jmp	0x1e4c	; 0x1e4c <__vector_3>
      10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      1c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      24:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      2c:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <__vector_11>
      30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      34:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      40:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      54:	05 a8       	ldd	r0, Z+53	; 0x35
      56:	4c cd       	rjmp	.-1384   	; 0xfffffaf0 <__eeprom_end+0xff7efaf0>
      58:	b2 d4       	rcall	.+2404   	; 0x9be <__stack+0x15f>
      5a:	4e b9       	out	0x0e, r20	; 14
      5c:	38 36       	cpi	r19, 0x68	; 104
      5e:	a9 02       	muls	r26, r25
      60:	0c 50       	subi	r16, 0x0C	; 12
      62:	b9 91       	ld	r27, Y+
      64:	86 88       	ldd	r8, Z+22	; 0x16
      66:	08 3c       	cpi	r16, 0xC8	; 200
      68:	a6 aa       	std	Z+54, r10	; 0x36
      6a:	aa 2a       	or	r10, r26
      6c:	be 00       	.word	0x00be	; ????
      6e:	00 00       	nop
      70:	80 3f       	cpi	r24, 0xF0	; 240

00000072 <__ctors_end>:
      72:	11 24       	eor	r1, r1
      74:	1f be       	out	0x3f, r1	; 63
      76:	cf e5       	ldi	r28, 0x5F	; 95
      78:	d8 e0       	ldi	r29, 0x08	; 8
      7a:	de bf       	out	0x3e, r29	; 62
      7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
      7e:	10 e0       	ldi	r17, 0x00	; 0
      80:	a0 e6       	ldi	r26, 0x60	; 96
      82:	b0 e0       	ldi	r27, 0x00	; 0
      84:	e4 eb       	ldi	r30, 0xB4	; 180
      86:	f7 e2       	ldi	r31, 0x27	; 39
      88:	02 c0       	rjmp	.+4      	; 0x8e <__do_copy_data+0x10>
      8a:	05 90       	lpm	r0, Z+
      8c:	0d 92       	st	X+, r0
      8e:	a4 37       	cpi	r26, 0x74	; 116
      90:	b1 07       	cpc	r27, r17
      92:	d9 f7       	brne	.-10     	; 0x8a <__do_copy_data+0xc>

00000094 <__do_clear_bss>:
      94:	20 e0       	ldi	r18, 0x00	; 0
      96:	a4 e7       	ldi	r26, 0x74	; 116
      98:	b0 e0       	ldi	r27, 0x00	; 0
      9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
      9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
      9e:	a6 39       	cpi	r26, 0x96	; 150
      a0:	b2 07       	cpc	r27, r18
      a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>
      a4:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <main>
      a8:	0c 94 d8 13 	jmp	0x27b0	; 0x27b0 <_exit>

000000ac <__bad_interrupt>:
      ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <TWI_Init>:
#define TWI_Clear_TWINT	(1 << TWINT)|(1 << TWEN)	//xoa TWIN de bat dau doc, doc xong thi NOT ACK
#define TWI_Read_ACK	(1 << TWINT)|(1 << TWEN)|(1 << TWEA)	//xoa TWIN de bat dau doc, sau khi doc set ACK

//khoi tao TWI
void TWI_Init(void){
	TWSR = 0x00;	//Prescaler=1 chia t?n cho 1
      b0:	11 b8       	out	0x01, r1	; 1
	TWBR = _100K;
      b2:	88 e4       	ldi	r24, 0x48	; 72
      b4:	80 b9       	out	0x00, r24	; 0
	TWCR = (1 << TWINT) | (1 << TWEN);
      b6:	84 e8       	ldi	r24, 0x84	; 132
      b8:	86 bf       	out	0x36, r24	; 54
      ba:	08 95       	ret

000000bc <TWI_DS1307_wadr>:
}

//chon dia chi thanh ghi can thao tac, dummy write
//Addr: dia thi thanh ghi can ghi
uint8_t TWI_DS1307_wadr(uint8_t Addr){
	TWCR = TWI_START;						//goi START condition
      bc:	94 ea       	ldi	r25, 0xA4	; 164
      be:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80) == 0x00);			//cho TWINT bit=1
      c0:	06 b6       	in	r0, 0x36	; 54
      c2:	07 fe       	sbrs	r0, 7
      c4:	fd cf       	rjmp	.-6      	; 0xc0 <TWI_DS1307_wadr+0x4>
	if((TWSR & 0xF8) != 0x08) return TWSR;	//neu goi Start co loi thi thoat
      c6:	91 b1       	in	r25, 0x01	; 1
      c8:	98 7f       	andi	r25, 0xF8	; 248
      ca:	98 30       	cpi	r25, 0x08	; 8
      cc:	11 f0       	breq	.+4      	; 0xd2 <TWI_DS1307_wadr+0x16>
      ce:	81 b1       	in	r24, 0x01	; 1
      d0:	08 95       	ret

	TWDR = (DS1307_SLA << 1) + TWI_W;		//dia chi DS va bit W
      d2:	90 ed       	ldi	r25, 0xD0	; 208
      d4:	93 b9       	out	0x03, r25	; 3
	TWCR = TWI_Clear_TWINT;					//xoa TWINT, bat dau goi SLA
      d6:	94 e8       	ldi	r25, 0x84	; 132
      d8:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80) == 0x00);			//cho TWINT bit=1
      da:	06 b6       	in	r0, 0x36	; 54
      dc:	07 fe       	sbrs	r0, 7
      de:	fd cf       	rjmp	.-6      	; 0xda <TWI_DS1307_wadr+0x1e>
	if((TWSR & 0xF8) != 0x18) return TWSR;	//neu co loi truyen SLA, thoat
      e0:	91 b1       	in	r25, 0x01	; 1
      e2:	98 7f       	andi	r25, 0xF8	; 248
      e4:	98 31       	cpi	r25, 0x18	; 24
      e6:	11 f0       	breq	.+4      	; 0xec <TWI_DS1307_wadr+0x30>
      e8:	81 b1       	in	r24, 0x01	; 1
      ea:	08 95       	ret

	TWDR = Addr;							//goi dia chi thanh ghi can ghi vao
      ec:	83 b9       	out	0x03, r24	; 3
	TWCR = TWI_Clear_TWINT;					//xoa TWINT de bat dau goi
      ee:	84 e8       	ldi	r24, 0x84	; 132
      f0:	86 bf       	out	0x36, r24	; 54
	while((TWCR & 0x80) == 0x00);			//check and wait for TWINT bit=1
      f2:	06 b6       	in	r0, 0x36	; 54
      f4:	07 fe       	sbrs	r0, 7
      f6:	fd cf       	rjmp	.-6      	; 0xf2 <TWI_DS1307_wadr+0x36>
	if((TWSR & 0xF8) != 0x28) return TWSR;	//neu du lieu goi ko thanh cong thi thoat
      f8:	81 b1       	in	r24, 0x01	; 1
      fa:	88 7f       	andi	r24, 0xF8	; 248
      fc:	88 32       	cpi	r24, 0x28	; 40
      fe:	11 f0       	breq	.+4      	; 0x104 <TWI_DS1307_wadr+0x48>
     100:	81 b1       	in	r24, 0x01	; 1
     102:	08 95       	ret
	
	TWCR = TWI_STOP;						//STOP condition
     104:	84 e9       	ldi	r24, 0x94	; 148
     106:	86 bf       	out	0x36, r24	; 54
	return 0;
     108:	80 e0       	ldi	r24, 0x00	; 0
}
     10a:	08 95       	ret

0000010c <TWI_DS1307_wblock>:
//Addr: dia thi thanh ghi can ghi
//Data[]: mang du lieu
//len: so luong byte can ghi
uint8_t TWI_DS1307_wblock(uint8_t Addr, uint8_t Data[], uint8_t len){
	
	TWCR = TWI_START;
     10c:	94 ea       	ldi	r25, 0xA4	; 164
     10e:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80) == 0x00);
     110:	06 b6       	in	r0, 0x36	; 54
     112:	07 fe       	sbrs	r0, 7
     114:	fd cf       	rjmp	.-6      	; 0x110 <TWI_DS1307_wblock+0x4>
	if((TWSR & 0xF8) != 0x08) return TWSR;
     116:	91 b1       	in	r25, 0x01	; 1
     118:	98 7f       	andi	r25, 0xF8	; 248
     11a:	98 30       	cpi	r25, 0x08	; 8
     11c:	11 f0       	breq	.+4      	; 0x122 <TWI_DS1307_wblock+0x16>
     11e:	81 b1       	in	r24, 0x01	; 1
     120:	08 95       	ret
	
	TWDR = (DS1307_SLA << 1) + TWI_W;
     122:	90 ed       	ldi	r25, 0xD0	; 208
     124:	93 b9       	out	0x03, r25	; 3
	TWCR = TWI_Clear_TWINT;
     126:	94 e8       	ldi	r25, 0x84	; 132
     128:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80) == 0x00);
     12a:	06 b6       	in	r0, 0x36	; 54
     12c:	07 fe       	sbrs	r0, 7
     12e:	fd cf       	rjmp	.-6      	; 0x12a <TWI_DS1307_wblock+0x1e>
	if((TWSR & 0xF8) != 0x18) return TWSR;
     130:	91 b1       	in	r25, 0x01	; 1
     132:	98 7f       	andi	r25, 0xF8	; 248
     134:	98 31       	cpi	r25, 0x18	; 24
     136:	11 f0       	breq	.+4      	; 0x13c <TWI_DS1307_wblock+0x30>
     138:	81 b1       	in	r24, 0x01	; 1
     13a:	08 95       	ret
	
	TWDR = Addr;
     13c:	83 b9       	out	0x03, r24	; 3
	TWCR = TWI_Clear_TWINT;
     13e:	84 e8       	ldi	r24, 0x84	; 132
     140:	86 bf       	out	0x36, r24	; 54
	while((TWCR & 0x80) == 0x00);
     142:	06 b6       	in	r0, 0x36	; 54
     144:	07 fe       	sbrs	r0, 7
     146:	fd cf       	rjmp	.-6      	; 0x142 <TWI_DS1307_wblock+0x36>
	if((TWSR & 0xF8) != 0x28) return TWSR;
     148:	81 b1       	in	r24, 0x01	; 1
     14a:	88 7f       	andi	r24, 0xF8	; 248
     14c:	88 32       	cpi	r24, 0x28	; 40
     14e:	a1 f0       	breq	.+40     	; 0x178 <TWI_DS1307_wblock+0x6c>
     150:	81 b1       	in	r24, 0x01	; 1
     152:	08 95       	ret

	for (uint8_t i = 0; i < len; i++){
		TWDR = Data[i];							//chuan bi xuat du lieu
     154:	fb 01       	movw	r30, r22
     156:	e8 0f       	add	r30, r24
     158:	f1 1d       	adc	r31, r1
     15a:	90 81       	ld	r25, Z
     15c:	93 b9       	out	0x03, r25	; 3
		TWCR = TWI_Clear_TWINT;					//xoa TWINT, bat dau send
     15e:	94 e8       	ldi	r25, 0x84	; 132
     160:	96 bf       	out	0x36, r25	; 54
		while((TWCR & 0x80) == 0x00);			//cho TWINT bit=1
     162:	06 b6       	in	r0, 0x36	; 54
     164:	07 fe       	sbrs	r0, 7
     166:	fd cf       	rjmp	.-6      	; 0x162 <TWI_DS1307_wblock+0x56>
		if((TWSR & 0xF8) != 0x28) return TWSR;	//neu status ko phai la 0x28 thi return
     168:	91 b1       	in	r25, 0x01	; 1
     16a:	98 7f       	andi	r25, 0xF8	; 248
     16c:	98 32       	cpi	r25, 0x28	; 40
     16e:	11 f0       	breq	.+4      	; 0x174 <TWI_DS1307_wblock+0x68>
     170:	81 b1       	in	r24, 0x01	; 1
     172:	08 95       	ret
	TWDR = Addr;
	TWCR = TWI_Clear_TWINT;
	while((TWCR & 0x80) == 0x00);
	if((TWSR & 0xF8) != 0x28) return TWSR;

	for (uint8_t i = 0; i < len; i++){
     174:	8f 5f       	subi	r24, 0xFF	; 255
     176:	01 c0       	rjmp	.+2      	; 0x17a <TWI_DS1307_wblock+0x6e>
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	84 17       	cp	r24, r20
     17c:	58 f3       	brcs	.-42     	; 0x154 <TWI_DS1307_wblock+0x48>
		TWCR = TWI_Clear_TWINT;					//xoa TWINT, bat dau send
		while((TWCR & 0x80) == 0x00);			//cho TWINT bit=1
		if((TWSR & 0xF8) != 0x28) return TWSR;	//neu status ko phai la 0x28 thi return
	}
	
	TWCR = TWI_STOP;							//STOP condition
     17e:	84 e9       	ldi	r24, 0x94	; 148
     180:	86 bf       	out	0x36, r24	; 54
	return 0;
     182:	80 e0       	ldi	r24, 0x00	; 0
}
     184:	08 95       	ret

00000186 <TWI_DS1307_rblock>:

//doc 1 mang tu DS1307
uint8_t TWI_DS1307_rblock(uint8_t Data[], uint8_t len){
     186:	dc 01       	movw	r26, r24
	uint8_t i;
	
	
	TWCR = TWI_START;
     188:	84 ea       	ldi	r24, 0xA4	; 164
     18a:	86 bf       	out	0x36, r24	; 54
	while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x08));
     18c:	06 b6       	in	r0, 0x36	; 54
     18e:	07 fe       	sbrs	r0, 7
     190:	fd cf       	rjmp	.-6      	; 0x18c <TWI_DS1307_rblock+0x6>
     192:	81 b1       	in	r24, 0x01	; 1
     194:	88 7f       	andi	r24, 0xF8	; 248
     196:	88 30       	cpi	r24, 0x08	; 8
     198:	c9 f7       	brne	.-14     	; 0x18c <TWI_DS1307_rblock+0x6>

	TWDR = (DS1307_SLA << 1) + TWI_R;
     19a:	81 ed       	ldi	r24, 0xD1	; 209
     19c:	83 b9       	out	0x03, r24	; 3
	TWCR = TWI_Clear_TWINT;
     19e:	84 e8       	ldi	r24, 0x84	; 132
     1a0:	86 bf       	out	0x36, r24	; 54
	while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x40));
     1a2:	06 b6       	in	r0, 0x36	; 54
     1a4:	07 fe       	sbrs	r0, 7
     1a6:	fd cf       	rjmp	.-6      	; 0x1a2 <TWI_DS1307_rblock+0x1c>
     1a8:	91 b1       	in	r25, 0x01	; 1
     1aa:	98 7f       	andi	r25, 0xF8	; 248
     1ac:	90 34       	cpi	r25, 0x40	; 64
     1ae:	c9 f7       	brne	.-14     	; 0x1a2 <TWI_DS1307_rblock+0x1c>
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	0f c0       	rjmp	.+30     	; 0x1d2 <TWI_DS1307_rblock+0x4c>
	
	for (i = 0; i < len-1; i++){
		TWCR = TWI_Read_ACK;
     1b4:	84 ec       	ldi	r24, 0xC4	; 196
     1b6:	86 bf       	out	0x36, r24	; 54
		while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x50));
     1b8:	06 b6       	in	r0, 0x36	; 54
     1ba:	07 fe       	sbrs	r0, 7
     1bc:	fd cf       	rjmp	.-6      	; 0x1b8 <TWI_DS1307_rblock+0x32>
     1be:	91 b1       	in	r25, 0x01	; 1
     1c0:	98 7f       	andi	r25, 0xF8	; 248
     1c2:	90 35       	cpi	r25, 0x50	; 80
     1c4:	c9 f7       	brne	.-14     	; 0x1b8 <TWI_DS1307_rblock+0x32>
		Data[i] = TWDR;
     1c6:	fd 01       	movw	r30, r26
     1c8:	e2 0f       	add	r30, r18
     1ca:	f1 1d       	adc	r31, r1
     1cc:	83 b1       	in	r24, 0x03	; 3
     1ce:	80 83       	st	Z, r24

	TWDR = (DS1307_SLA << 1) + TWI_R;
	TWCR = TWI_Clear_TWINT;
	while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x40));
	
	for (i = 0; i < len-1; i++){
     1d0:	2f 5f       	subi	r18, 0xFF	; 255
     1d2:	e2 2f       	mov	r30, r18
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	46 2f       	mov	r20, r22
     1d8:	50 e0       	ldi	r21, 0x00	; 0
     1da:	41 50       	subi	r20, 0x01	; 1
     1dc:	51 09       	sbc	r21, r1
     1de:	e4 17       	cp	r30, r20
     1e0:	f5 07       	cpc	r31, r21
     1e2:	44 f3       	brlt	.-48     	; 0x1b4 <TWI_DS1307_rblock+0x2e>
		TWCR = TWI_Read_ACK;
		while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x50));
		Data[i] = TWDR;
	}
	
	TWCR = TWI_Clear_TWINT;
     1e4:	84 e8       	ldi	r24, 0x84	; 132
     1e6:	86 bf       	out	0x36, r24	; 54
	while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x58));
     1e8:	06 b6       	in	r0, 0x36	; 54
     1ea:	07 fe       	sbrs	r0, 7
     1ec:	fd cf       	rjmp	.-6      	; 0x1e8 <TWI_DS1307_rblock+0x62>
     1ee:	91 b1       	in	r25, 0x01	; 1
     1f0:	98 7f       	andi	r25, 0xF8	; 248
     1f2:	98 35       	cpi	r25, 0x58	; 88
     1f4:	c9 f7       	brne	.-14     	; 0x1e8 <TWI_DS1307_rblock+0x62>
	Data[len-1] = TWDR;
     1f6:	86 2f       	mov	r24, r22
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	01 97       	sbiw	r24, 0x01	; 1
     1fc:	a8 0f       	add	r26, r24
     1fe:	b9 1f       	adc	r27, r25
     200:	83 b1       	in	r24, 0x03	; 3
     202:	8c 93       	st	X, r24
	
	TWCR = TWI_STOP;
     204:	84 e9       	ldi	r24, 0x94	; 148
     206:	86 bf       	out	0x36, r24	; 54
	return 0;
}
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	08 95       	ret

0000020c <BCDToDec>:
volatile char SW_time_date = 0;

// chuyen doi nhi phan sang thap phan
uint8_t BCDToDec(uint8_t BCD){
	uint8_t L, H;
	L=BCD & 0x0F;
     20c:	38 2f       	mov	r19, r24
     20e:	3f 70       	andi	r19, 0x0F	; 15
	H=(BCD>>4)*10;
     210:	98 2f       	mov	r25, r24
     212:	92 95       	swap	r25
     214:	9f 70       	andi	r25, 0x0F	; 15
     216:	99 0f       	add	r25, r25
     218:	29 2f       	mov	r18, r25
     21a:	22 0f       	add	r18, r18
     21c:	22 0f       	add	r18, r18
     21e:	89 2f       	mov	r24, r25
     220:	82 0f       	add	r24, r18
	return (H+L);
}
     222:	83 0f       	add	r24, r19
     224:	08 95       	ret

00000226 <DecToBCD>:
// chuyen doi thap phan sang nhi phan
uint8_t DecToBCD(uint8_t Dec){
	uint8_t L, H;
	L=Dec % 10;
     226:	2d ec       	ldi	r18, 0xCD	; 205
     228:	82 9f       	mul	r24, r18
     22a:	21 2d       	mov	r18, r1
     22c:	11 24       	eor	r1, r1
     22e:	92 2f       	mov	r25, r18
     230:	96 95       	lsr	r25
     232:	96 95       	lsr	r25
     234:	96 95       	lsr	r25
     236:	99 0f       	add	r25, r25
     238:	39 2f       	mov	r19, r25
     23a:	33 0f       	add	r19, r19
     23c:	33 0f       	add	r19, r19
     23e:	93 0f       	add	r25, r19
     240:	89 1b       	sub	r24, r25
	H=(Dec/10)<<4;
     242:	26 95       	lsr	r18
     244:	26 95       	lsr	r18
     246:	26 95       	lsr	r18
	return (H+L);
}
     248:	30 e1       	ldi	r19, 0x10	; 16
     24a:	23 9f       	mul	r18, r19
     24c:	80 0d       	add	r24, r0
     24e:	11 24       	eor	r1, r1
     250:	08 95       	ret

00000252 <Decode>:

void Decode(void){
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
    //BCD data converter function from DS1307 to DEC
	Second 	= BCDToDec(tData[0] & 0x7F);
     256:	cd e8       	ldi	r28, 0x8D	; 141
     258:	d0 e0       	ldi	r29, 0x00	; 0
     25a:	88 81       	ld	r24, Y
     25c:	8f 77       	andi	r24, 0x7F	; 127
     25e:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <Second+0x1>
     268:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Second>

	Minute 	= BCDToDec(tData[1]);
     26c:	89 81       	ldd	r24, Y+1	; 0x01
     26e:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <Minute+0x1>
     278:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <Minute>
	
	if (Mode != 0)
     27c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <Mode>
     280:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <Mode+0x1>
     284:	89 2b       	or	r24, r25
     286:	59 f0       	breq	.+22     	; 0x29e <Decode+0x4c>
	{ 	
		Hour = BCDToDec(tData[2] & 0x1F); //Mode for 12h
     288:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <tData+0x2>
     28c:	8f 71       	andi	r24, 0x1F	; 31
     28e:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <Hour+0x1>
     298:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Hour>
     29c:	0a c0       	rjmp	.+20     	; 0x2b2 <Decode+0x60>
	}
	else 
	{
	  	Hour = BCDToDec(tData[2] & 0x3F); //Mode for 24h	
     29e:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <tData+0x2>
     2a2:	8f 73       	andi	r24, 0x3F	; 63
     2a4:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <Hour+0x1>
     2ae:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Hour>
	}
	Day		= BCDToDec(tData[3]);
     2b2:	cd e8       	ldi	r28, 0x8D	; 141
     2b4:	d0 e0       	ldi	r29, 0x00	; 0
     2b6:	8b 81       	ldd	r24, Y+3	; 0x03
     2b8:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <Day+0x1>
     2c2:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <Day>
	Date   	= BCDToDec(tData[4]);
     2c6:	8c 81       	ldd	r24, Y+4	; 0x04
     2c8:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <Date+0x1>
     2d2:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <Date>
	Month	= BCDToDec(tData[5]);
     2d6:	8d 81       	ldd	r24, Y+5	; 0x05
     2d8:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <Month+0x1>
     2e2:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <Month>
	Year	= BCDToDec(tData[6]);
     2e6:	8e 81       	ldd	r24, Y+6	; 0x06
     2e8:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <Year+0x1>
     2f2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Year>
}
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	08 95       	ret

000002fc <FixTime>:
		MAX7219_writeData(MAX7219_DIGIT4,(A_Hour/10));
	}

}
//Write to DS1307 time that want to change
void FixTime(){ 
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
	tData[0] = DecToBCD(Second); 
     300:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Second>
     304:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <Second+0x1>
     308:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     30c:	cd e8       	ldi	r28, 0x8D	; 141
     30e:	d0 e0       	ldi	r29, 0x00	; 0
     310:	88 83       	st	Y, r24
	tData[1] = DecToBCD(Minute); 
     312:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
     316:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
     31a:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     31e:	89 83       	std	Y+1, r24	; 0x01
	if (Mode != 0) tData[2] = DecToBCD(Hour)|(Mode << 6)|(AP << 5); //mode 12h
     320:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <Mode>
     324:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <Mode+0x1>
     328:	89 2b       	or	r24, r25
     32a:	21 f1       	breq	.+72     	; 0x374 <FixTime+0x78>
     32c:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
     330:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
     334:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     338:	40 91 80 00 	lds	r20, 0x0080	; 0x800080 <Mode>
     33c:	50 91 81 00 	lds	r21, 0x0081	; 0x800081 <Mode+0x1>
     340:	00 24       	eor	r0, r0
     342:	56 95       	lsr	r21
     344:	47 95       	ror	r20
     346:	07 94       	ror	r0
     348:	56 95       	lsr	r21
     34a:	47 95       	ror	r20
     34c:	07 94       	ror	r0
     34e:	54 2f       	mov	r21, r20
     350:	40 2d       	mov	r20, r0
     352:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <AP>
     356:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <AP+0x1>
     35a:	22 0f       	add	r18, r18
     35c:	33 1f       	adc	r19, r19
     35e:	22 95       	swap	r18
     360:	32 95       	swap	r19
     362:	30 7f       	andi	r19, 0xF0	; 240
     364:	32 27       	eor	r19, r18
     366:	20 7f       	andi	r18, 0xF0	; 240
     368:	32 27       	eor	r19, r18
     36a:	84 2b       	or	r24, r20
     36c:	28 2b       	or	r18, r24
     36e:	20 93 8f 00 	sts	0x008F, r18	; 0x80008f <tData+0x2>
     372:	08 c0       	rjmp	.+16     	; 0x384 <FixTime+0x88>
	else tData[2] = DecToBCD(Hour);
     374:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
     378:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
     37c:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     380:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <tData+0x2>
	tData[3] = DecToBCD(Day);
     384:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <Day>
     388:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <Day+0x1>
     38c:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     390:	cd e8       	ldi	r28, 0x8D	; 141
     392:	d0 e0       	ldi	r29, 0x00	; 0
     394:	8b 83       	std	Y+3, r24	; 0x03
	tData[4] = DecToBCD(Date);
     396:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
     39a:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
     39e:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     3a2:	8c 83       	std	Y+4, r24	; 0x04
	tData[5] = DecToBCD(Month); 
     3a4:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
     3a8:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
     3ac:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     3b0:	8d 83       	std	Y+5, r24	; 0x05
	tData[6] = DecToBCD(Year); 
     3b2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Year>
     3b6:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <Year+0x1>
     3ba:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     3be:	8e 83       	std	Y+6, r24	; 0x06
	TWI_DS1307_wblock(0x00, tData, 7); 
     3c0:	47 e0       	ldi	r20, 0x07	; 7
     3c2:	be 01       	movw	r22, r28
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	0e 94 86 00 	call	0x10c	; 0x10c <TWI_DS1307_wblock>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ca:	8f ec       	ldi	r24, 0xCF	; 207
     3cc:	97 e0       	ldi	r25, 0x07	; 7
     3ce:	01 97       	sbiw	r24, 0x01	; 1
     3d0:	f1 f7       	brne	.-4      	; 0x3ce <FixTime+0xd2>
     3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <FixTime+0xd8>
     3d4:	00 00       	nop
	_delay_ms(1);
	TWI_DS1307_wadr(0x00); 
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	0e 94 5e 00 	call	0xbc	; 0xbc <TWI_DS1307_wadr>
     3dc:	8f ec       	ldi	r24, 0xCF	; 207
     3de:	97 e0       	ldi	r25, 0x07	; 7
     3e0:	01 97       	sbiw	r24, 0x01	; 1
     3e2:	f1 f7       	brne	.-4      	; 0x3e0 <FixTime+0xe4>
     3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <FixTime+0xea>
     3e6:	00 00       	nop
	_delay_ms(1);			
 }
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	08 95       	ret

000003ee <Init_btn>:

void Init_btn(void){

    //------------------Initialize button------------
	BTN_DDRD  &= ~((1<<SW)|(1<<ADJ));		// set input cho button setting
     3ee:	81 b3       	in	r24, 0x11	; 17
     3f0:	83 7f       	andi	r24, 0xF3	; 243
     3f2:	81 bb       	out	0x11, r24	; 17
	BTN_DDRD = (1<<BUZ_LED);																// set output cho buzzer + led
     3f4:	80 e8       	ldi	r24, 0x80	; 128
     3f6:	81 bb       	out	0x11, r24	; 17
	BTN_PORTD = (1<<SW)|(1<<ADJ);	// set dien tro keo len cho button setting
     3f8:	8c e0       	ldi	r24, 0x0C	; 12
     3fa:	82 bb       	out	0x12, r24	; 18
	BTN_DDRB &= ~(1<<INCR);
     3fc:	87 b3       	in	r24, 0x17	; 23
     3fe:	8b 7f       	andi	r24, 0xFB	; 251
     400:	87 bb       	out	0x17, r24	; 23
	BTN_PORTB = (1<<INCR);
     402:	84 e0       	ldi	r24, 0x04	; 4
     404:	88 bb       	out	0x18, r24	; 24
     406:	08 95       	ret

00000408 <jdFromDate>:


//-----------------------DOI DUONG LICH - AM LICH---------------------

double jdFromDate(uint8_t dd, uint8_t mm, uint16_t yy)
{
     408:	4f 92       	push	r4
     40a:	5f 92       	push	r5
     40c:	6f 92       	push	r6
     40e:	7f 92       	push	r7
     410:	8f 92       	push	r8
     412:	9f 92       	push	r9
     414:	af 92       	push	r10
     416:	bf 92       	push	r11
     418:	cf 92       	push	r12
     41a:	df 92       	push	r13
     41c:	ef 92       	push	r14
     41e:	ff 92       	push	r15
     420:	0f 93       	push	r16
     422:	1f 93       	push	r17
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	f8 2e       	mov	r15, r24
     42a:	8a 01       	movw	r16, r20
	long double a, y, m, jd;
	a = floorf((14 - mm) / 12);
     42c:	c6 2f       	mov	r28, r22
     42e:	d0 e0       	ldi	r29, 0x00	; 0
     430:	8e e0       	ldi	r24, 0x0E	; 14
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	8c 1b       	sub	r24, r28
     436:	9d 0b       	sbc	r25, r29
     438:	6c e0       	ldi	r22, 0x0C	; 12
     43a:	70 e0       	ldi	r23, 0x00	; 0
     43c:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
     440:	07 2e       	mov	r0, r23
     442:	00 0c       	add	r0, r0
     444:	88 0b       	sbc	r24, r24
     446:	99 0b       	sbc	r25, r25
     448:	0e 94 b4 11 	call	0x2368	; 0x2368 <__floatsisf>
     44c:	0e 94 ef 11 	call	0x23de	; 0x23de <floor>
     450:	4b 01       	movw	r8, r22
     452:	5c 01       	movw	r10, r24
	y = yy+4800-a;
     454:	b8 01       	movw	r22, r16
     456:	60 54       	subi	r22, 0x40	; 64
     458:	7d 4e       	sbci	r23, 0xED	; 237
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 b2 11 	call	0x2364	; 0x2364 <__floatunsisf>
     462:	a5 01       	movw	r20, r10
     464:	94 01       	movw	r18, r8
     466:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
     46a:	2b 01       	movw	r4, r22
     46c:	3c 01       	movw	r6, r24
	m = mm+12*a-3;
     46e:	20 e0       	ldi	r18, 0x00	; 0
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	40 e4       	ldi	r20, 0x40	; 64
     474:	51 e4       	ldi	r21, 0x41	; 65
     476:	c5 01       	movw	r24, r10
     478:	b4 01       	movw	r22, r8
     47a:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     47e:	4b 01       	movw	r8, r22
     480:	5c 01       	movw	r10, r24
     482:	be 01       	movw	r22, r28
     484:	dd 0f       	add	r29, r29
     486:	88 0b       	sbc	r24, r24
     488:	99 0b       	sbc	r25, r25
     48a:	0e 94 b4 11 	call	0x2368	; 0x2368 <__floatsisf>
     48e:	a5 01       	movw	r20, r10
     490:	94 01       	movw	r18, r8
     492:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	40 e4       	ldi	r20, 0x40	; 64
     49c:	50 e4       	ldi	r21, 0x40	; 64
     49e:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
     4a2:	4b 01       	movw	r8, r22
     4a4:	5c 01       	movw	r10, r24
	jd = dd + floorf((153*m+2)/5) + 365*y + floorf(y/4) - floorf(y/100) + floorf(y/400) - 32045;
     4a6:	6f 2d       	mov	r22, r15
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	0e 94 b4 11 	call	0x2368	; 0x2368 <__floatsisf>
     4b2:	6b 01       	movw	r12, r22
     4b4:	7c 01       	movw	r14, r24
     4b6:	20 e0       	ldi	r18, 0x00	; 0
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	49 e1       	ldi	r20, 0x19	; 25
     4bc:	53 e4       	ldi	r21, 0x43	; 67
     4be:	c5 01       	movw	r24, r10
     4c0:	b4 01       	movw	r22, r8
     4c2:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     4c6:	20 e0       	ldi	r18, 0x00	; 0
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	40 e0       	ldi	r20, 0x00	; 0
     4cc:	50 e4       	ldi	r21, 0x40	; 64
     4ce:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     4d2:	20 e0       	ldi	r18, 0x00	; 0
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	40 ea       	ldi	r20, 0xA0	; 160
     4d8:	50 e4       	ldi	r21, 0x40	; 64
     4da:	0e 94 0a 11 	call	0x2214	; 0x2214 <__divsf3>
     4de:	0e 94 ef 11 	call	0x23de	; 0x23de <floor>
     4e2:	9b 01       	movw	r18, r22
     4e4:	ac 01       	movw	r20, r24
     4e6:	c7 01       	movw	r24, r14
     4e8:	b6 01       	movw	r22, r12
     4ea:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     4ee:	6b 01       	movw	r12, r22
     4f0:	7c 01       	movw	r14, r24
     4f2:	20 e0       	ldi	r18, 0x00	; 0
     4f4:	30 e8       	ldi	r19, 0x80	; 128
     4f6:	46 eb       	ldi	r20, 0xB6	; 182
     4f8:	53 e4       	ldi	r21, 0x43	; 67
     4fa:	c3 01       	movw	r24, r6
     4fc:	b2 01       	movw	r22, r4
     4fe:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     502:	9b 01       	movw	r18, r22
     504:	ac 01       	movw	r20, r24
     506:	c7 01       	movw	r24, r14
     508:	b6 01       	movw	r22, r12
     50a:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     50e:	6b 01       	movw	r12, r22
     510:	7c 01       	movw	r14, r24
     512:	20 e0       	ldi	r18, 0x00	; 0
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	40 e8       	ldi	r20, 0x80	; 128
     518:	5e e3       	ldi	r21, 0x3E	; 62
     51a:	c3 01       	movw	r24, r6
     51c:	b2 01       	movw	r22, r4
     51e:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     522:	0e 94 ef 11 	call	0x23de	; 0x23de <floor>
     526:	9b 01       	movw	r18, r22
     528:	ac 01       	movw	r20, r24
     52a:	c7 01       	movw	r24, r14
     52c:	b6 01       	movw	r22, r12
     52e:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     532:	6b 01       	movw	r12, r22
     534:	7c 01       	movw	r14, r24
     536:	20 e0       	ldi	r18, 0x00	; 0
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	48 ec       	ldi	r20, 0xC8	; 200
     53c:	52 e4       	ldi	r21, 0x42	; 66
     53e:	c3 01       	movw	r24, r6
     540:	b2 01       	movw	r22, r4
     542:	0e 94 0a 11 	call	0x2214	; 0x2214 <__divsf3>
     546:	0e 94 ef 11 	call	0x23de	; 0x23de <floor>
     54a:	9b 01       	movw	r18, r22
     54c:	ac 01       	movw	r20, r24
     54e:	c7 01       	movw	r24, r14
     550:	b6 01       	movw	r22, r12
     552:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
     556:	4b 01       	movw	r8, r22
     558:	5c 01       	movw	r10, r24
     55a:	20 e0       	ldi	r18, 0x00	; 0
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	48 ec       	ldi	r20, 0xC8	; 200
     560:	53 e4       	ldi	r21, 0x43	; 67
     562:	c3 01       	movw	r24, r6
     564:	b2 01       	movw	r22, r4
     566:	0e 94 0a 11 	call	0x2214	; 0x2214 <__divsf3>
     56a:	0e 94 ef 11 	call	0x23de	; 0x23de <floor>
     56e:	9b 01       	movw	r18, r22
     570:	ac 01       	movw	r20, r24
     572:	c5 01       	movw	r24, r10
     574:	b4 01       	movw	r22, r8
     576:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     57a:	20 e0       	ldi	r18, 0x00	; 0
     57c:	3a e5       	ldi	r19, 0x5A	; 90
     57e:	4a ef       	ldi	r20, 0xFA	; 250
     580:	56 e4       	ldi	r21, 0x46	; 70
     582:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
     586:	4b 01       	movw	r8, r22
     588:	5c 01       	movw	r10, r24
	if (jd < 2299161) {
     58a:	24 e6       	ldi	r18, 0x64	; 100
     58c:	34 e5       	ldi	r19, 0x54	; 84
     58e:	4c e0       	ldi	r20, 0x0C	; 12
     590:	5a e4       	ldi	r21, 0x4A	; 74
     592:	0e 94 05 11 	call	0x220a	; 0x220a <__cmpsf2>
     596:	88 23       	and	r24, r24
     598:	54 f4       	brge	.+20     	; 0x5ae <jdFromDate+0x1a6>
		jd = dd + floorf((153*m+2)/5) + 365*y + floorf(y/4) - 32083;
     59a:	20 e0       	ldi	r18, 0x00	; 0
     59c:	36 ea       	ldi	r19, 0xA6	; 166
     59e:	4a ef       	ldi	r20, 0xFA	; 250
     5a0:	56 e4       	ldi	r21, 0x46	; 70
     5a2:	c7 01       	movw	r24, r14
     5a4:	b6 01       	movw	r22, r12
     5a6:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
     5aa:	4b 01       	movw	r8, r22
     5ac:	5c 01       	movw	r10, r24
	}
	return jd;
}
     5ae:	c5 01       	movw	r24, r10
     5b0:	b4 01       	movw	r22, r8
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	1f 91       	pop	r17
     5b8:	0f 91       	pop	r16
     5ba:	ff 90       	pop	r15
     5bc:	ef 90       	pop	r14
     5be:	df 90       	pop	r13
     5c0:	cf 90       	pop	r12
     5c2:	bf 90       	pop	r11
     5c4:	af 90       	pop	r10
     5c6:	9f 90       	pop	r9
     5c8:	8f 90       	pop	r8
     5ca:	7f 90       	pop	r7
     5cc:	6f 90       	pop	r6
     5ce:	5f 90       	pop	r5
     5d0:	4f 90       	pop	r4
     5d2:	08 95       	ret

000005d4 <getNewMoonDay>:

double getNewMoonDay(long double k, int timeZone)
{
     5d4:	4f 92       	push	r4
     5d6:	5f 92       	push	r5
     5d8:	6f 92       	push	r6
     5da:	7f 92       	push	r7
     5dc:	8f 92       	push	r8
     5de:	9f 92       	push	r9
     5e0:	af 92       	push	r10
     5e2:	bf 92       	push	r11
     5e4:	cf 92       	push	r12
     5e6:	df 92       	push	r13
     5e8:	ef 92       	push	r14
     5ea:	ff 92       	push	r15
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	cd b7       	in	r28, 0x3d	; 61
     5f2:	de b7       	in	r29, 0x3e	; 62
     5f4:	66 97       	sbiw	r28, 0x16	; 22
     5f6:	0f b6       	in	r0, 0x3f	; 63
     5f8:	f8 94       	cli
     5fa:	de bf       	out	0x3e, r29	; 62
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	cd bf       	out	0x3d, r28	; 61
     600:	6b 01       	movw	r12, r22
     602:	7c 01       	movw	r14, r24
     604:	5e 8b       	std	Y+22, r21	; 0x16
     606:	4d 8b       	std	Y+21, r20	; 0x15
	long double T, T2, T3, dr, Jd1, M, Mpr, F, C1, deltat, JdNew;
	T = k/1236.85; // Time in Julian centuries from 1900 January 0.5
     608:	23 e3       	ldi	r18, 0x33	; 51
     60a:	3b e9       	ldi	r19, 0x9B	; 155
     60c:	4a e9       	ldi	r20, 0x9A	; 154
     60e:	54 e4       	ldi	r21, 0x44	; 68
     610:	0e 94 0a 11 	call	0x2214	; 0x2214 <__divsf3>
     614:	69 83       	std	Y+1, r22	; 0x01
     616:	7a 83       	std	Y+2, r23	; 0x02
     618:	8b 83       	std	Y+3, r24	; 0x03
     61a:	9c 83       	std	Y+4, r25	; 0x04
	T2 = T * T;
     61c:	9b 01       	movw	r18, r22
     61e:	ac 01       	movw	r20, r24
     620:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     624:	6d 83       	std	Y+5, r22	; 0x05
     626:	7e 83       	std	Y+6, r23	; 0x06
     628:	8f 83       	std	Y+7, r24	; 0x07
     62a:	98 87       	std	Y+8, r25	; 0x08
	T3 = T2 * T;
     62c:	9b 01       	movw	r18, r22
     62e:	ac 01       	movw	r20, r24
     630:	69 81       	ldd	r22, Y+1	; 0x01
     632:	7a 81       	ldd	r23, Y+2	; 0x02
     634:	8b 81       	ldd	r24, Y+3	; 0x03
     636:	9c 81       	ldd	r25, Y+4	; 0x04
     638:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     63c:	6d 87       	std	Y+13, r22	; 0x0d
     63e:	7e 87       	std	Y+14, r23	; 0x0e
     640:	8f 87       	std	Y+15, r24	; 0x0f
     642:	98 8b       	std	Y+16, r25	; 0x10
	dr = M_PI/180;
	Jd1 = 2415020.75933 + 29.53058868*k + 0.0001178*T2 - 0.000000155*T3;
     644:	25 ea       	ldi	r18, 0xA5	; 165
     646:	3e e3       	ldi	r19, 0x3E	; 62
     648:	4c ee       	ldi	r20, 0xEC	; 236
     64a:	51 e4       	ldi	r21, 0x41	; 65
     64c:	c7 01       	movw	r24, r14
     64e:	b6 01       	movw	r22, r12
     650:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     654:	23 eb       	ldi	r18, 0xB3	; 179
     656:	36 e6       	ldi	r19, 0x66	; 102
     658:	43 e1       	ldi	r20, 0x13	; 19
     65a:	5a e4       	ldi	r21, 0x4A	; 74
     65c:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     660:	4b 01       	movw	r8, r22
     662:	5c 01       	movw	r10, r24
     664:	25 e6       	ldi	r18, 0x65	; 101
     666:	3b e0       	ldi	r19, 0x0B	; 11
     668:	47 ef       	ldi	r20, 0xF7	; 247
     66a:	58 e3       	ldi	r21, 0x38	; 56
     66c:	6d 81       	ldd	r22, Y+5	; 0x05
     66e:	7e 81       	ldd	r23, Y+6	; 0x06
     670:	8f 81       	ldd	r24, Y+7	; 0x07
     672:	98 85       	ldd	r25, Y+8	; 0x08
     674:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     678:	9b 01       	movw	r18, r22
     67a:	ac 01       	movw	r20, r24
     67c:	c5 01       	movw	r24, r10
     67e:	b4 01       	movw	r22, r8
     680:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     684:	4b 01       	movw	r8, r22
     686:	5c 01       	movw	r10, r24
     688:	23 e1       	ldi	r18, 0x13	; 19
     68a:	3e e6       	ldi	r19, 0x6E	; 110
     68c:	46 e2       	ldi	r20, 0x26	; 38
     68e:	54 e3       	ldi	r21, 0x34	; 52
     690:	6d 85       	ldd	r22, Y+13	; 0x0d
     692:	7e 85       	ldd	r23, Y+14	; 0x0e
     694:	8f 85       	ldd	r24, Y+15	; 0x0f
     696:	98 89       	ldd	r25, Y+16	; 0x10
     698:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     69c:	9b 01       	movw	r18, r22
     69e:	ac 01       	movw	r20, r24
     6a0:	c5 01       	movw	r24, r10
     6a2:	b4 01       	movw	r22, r8
     6a4:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
     6a8:	4b 01       	movw	r8, r22
     6aa:	5c 01       	movw	r10, r24
	Jd1 = Jd1 + 0.00033*sinf((166.56 + 132.87*T - 0.009173*T2)*dr); // Mean new moon
     6ac:	28 eb       	ldi	r18, 0xB8	; 184
     6ae:	3e ed       	ldi	r19, 0xDE	; 222
     6b0:	44 e0       	ldi	r20, 0x04	; 4
     6b2:	53 e4       	ldi	r21, 0x43	; 67
     6b4:	69 81       	ldd	r22, Y+1	; 0x01
     6b6:	7a 81       	ldd	r23, Y+2	; 0x02
     6b8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ba:	9c 81       	ldd	r25, Y+4	; 0x04
     6bc:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     6c0:	2c e5       	ldi	r18, 0x5C	; 92
     6c2:	3f e8       	ldi	r19, 0x8F	; 143
     6c4:	46 e2       	ldi	r20, 0x26	; 38
     6c6:	53 e4       	ldi	r21, 0x43	; 67
     6c8:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     6cc:	2b 01       	movw	r4, r22
     6ce:	3c 01       	movw	r6, r24
     6d0:	2a e5       	ldi	r18, 0x5A	; 90
     6d2:	3a e4       	ldi	r19, 0x4A	; 74
     6d4:	46 e1       	ldi	r20, 0x16	; 22
     6d6:	5c e3       	ldi	r21, 0x3C	; 60
     6d8:	6d 81       	ldd	r22, Y+5	; 0x05
     6da:	7e 81       	ldd	r23, Y+6	; 0x06
     6dc:	8f 81       	ldd	r24, Y+7	; 0x07
     6de:	98 85       	ldd	r25, Y+8	; 0x08
     6e0:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     6e4:	9b 01       	movw	r18, r22
     6e6:	ac 01       	movw	r20, r24
     6e8:	c3 01       	movw	r24, r6
     6ea:	b2 01       	movw	r22, r4
     6ec:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
     6f0:	25 e3       	ldi	r18, 0x35	; 53
     6f2:	3a ef       	ldi	r19, 0xFA	; 250
     6f4:	4e e8       	ldi	r20, 0x8E	; 142
     6f6:	5c e3       	ldi	r21, 0x3C	; 60
     6f8:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     6fc:	0e 94 2e 13 	call	0x265c	; 0x265c <sin>
     700:	2a ed       	ldi	r18, 0xDA	; 218
     702:	33 e0       	ldi	r19, 0x03	; 3
     704:	4d ea       	ldi	r20, 0xAD	; 173
     706:	59 e3       	ldi	r21, 0x39	; 57
     708:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     70c:	9b 01       	movw	r18, r22
     70e:	ac 01       	movw	r20, r24
     710:	c5 01       	movw	r24, r10
     712:	b4 01       	movw	r22, r8
     714:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     718:	69 8b       	std	Y+17, r22	; 0x11
     71a:	7a 8b       	std	Y+18, r23	; 0x12
     71c:	8b 8b       	std	Y+19, r24	; 0x13
     71e:	9c 8b       	std	Y+20, r25	; 0x14
	M = 359.2242 + 29.10535608*k - 0.0000333*T2 - 0.00000347*T3; // Sun's mean anomaly
     720:	25 ec       	ldi	r18, 0xC5	; 197
     722:	37 ed       	ldi	r19, 0xD7	; 215
     724:	48 ee       	ldi	r20, 0xE8	; 232
     726:	51 e4       	ldi	r21, 0x41	; 65
     728:	c7 01       	movw	r24, r14
     72a:	b6 01       	movw	r22, r12
     72c:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     730:	23 eb       	ldi	r18, 0xB3	; 179
     732:	3c e9       	ldi	r19, 0x9C	; 156
     734:	43 eb       	ldi	r20, 0xB3	; 179
     736:	53 e4       	ldi	r21, 0x43	; 67
     738:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     73c:	4b 01       	movw	r8, r22
     73e:	5c 01       	movw	r10, r24
     740:	2a e9       	ldi	r18, 0x9A	; 154
     742:	3b ea       	ldi	r19, 0xAB	; 171
     744:	4b e0       	ldi	r20, 0x0B	; 11
     746:	58 e3       	ldi	r21, 0x38	; 56
     748:	6d 81       	ldd	r22, Y+5	; 0x05
     74a:	7e 81       	ldd	r23, Y+6	; 0x06
     74c:	8f 81       	ldd	r24, Y+7	; 0x07
     74e:	98 85       	ldd	r25, Y+8	; 0x08
     750:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     754:	9b 01       	movw	r18, r22
     756:	ac 01       	movw	r20, r24
     758:	c5 01       	movw	r24, r10
     75a:	b4 01       	movw	r22, r8
     75c:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
     760:	4b 01       	movw	r8, r22
     762:	5c 01       	movw	r10, r24
     764:	25 e2       	ldi	r18, 0x25	; 37
     766:	3e ed       	ldi	r19, 0xDE	; 222
     768:	48 e6       	ldi	r20, 0x68	; 104
     76a:	56 e3       	ldi	r21, 0x36	; 54
     76c:	6d 85       	ldd	r22, Y+13	; 0x0d
     76e:	7e 85       	ldd	r23, Y+14	; 0x0e
     770:	8f 85       	ldd	r24, Y+15	; 0x0f
     772:	98 89       	ldd	r25, Y+16	; 0x10
     774:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     778:	9b 01       	movw	r18, r22
     77a:	ac 01       	movw	r20, r24
     77c:	c5 01       	movw	r24, r10
     77e:	b4 01       	movw	r22, r8
     780:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
     784:	69 87       	std	Y+9, r22	; 0x09
     786:	7a 87       	std	Y+10, r23	; 0x0a
     788:	8b 87       	std	Y+11, r24	; 0x0b
     78a:	9c 87       	std	Y+12, r25	; 0x0c
	Mpr = 306.0253 + 385.81691806*k + 0.0107306*T2 + 0.00001236*T3; // Moon's mean anomaly
     78c:	21 e9       	ldi	r18, 0x91	; 145
     78e:	38 ee       	ldi	r19, 0xE8	; 232
     790:	40 ec       	ldi	r20, 0xC0	; 192
     792:	53 e4       	ldi	r21, 0x43	; 67
     794:	c7 01       	movw	r24, r14
     796:	b6 01       	movw	r22, r12
     798:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     79c:	2d e3       	ldi	r18, 0x3D	; 61
     79e:	33 e0       	ldi	r19, 0x03	; 3
     7a0:	49 e9       	ldi	r20, 0x99	; 153
     7a2:	53 e4       	ldi	r21, 0x43	; 67
     7a4:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     7a8:	4b 01       	movw	r8, r22
     7aa:	5c 01       	movw	r10, r24
     7ac:	26 e6       	ldi	r18, 0x66	; 102
     7ae:	3f ec       	ldi	r19, 0xCF	; 207
     7b0:	4f e2       	ldi	r20, 0x2F	; 47
     7b2:	5c e3       	ldi	r21, 0x3C	; 60
     7b4:	6d 81       	ldd	r22, Y+5	; 0x05
     7b6:	7e 81       	ldd	r23, Y+6	; 0x06
     7b8:	8f 81       	ldd	r24, Y+7	; 0x07
     7ba:	98 85       	ldd	r25, Y+8	; 0x08
     7bc:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     7c0:	9b 01       	movw	r18, r22
     7c2:	ac 01       	movw	r20, r24
     7c4:	c5 01       	movw	r24, r10
     7c6:	b4 01       	movw	r22, r8
     7c8:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     7cc:	4b 01       	movw	r8, r22
     7ce:	5c 01       	movw	r10, r24
     7d0:	2c ec       	ldi	r18, 0xCC	; 204
     7d2:	3d e5       	ldi	r19, 0x5D	; 93
     7d4:	4f e4       	ldi	r20, 0x4F	; 79
     7d6:	57 e3       	ldi	r21, 0x37	; 55
     7d8:	6d 85       	ldd	r22, Y+13	; 0x0d
     7da:	7e 85       	ldd	r23, Y+14	; 0x0e
     7dc:	8f 85       	ldd	r24, Y+15	; 0x0f
     7de:	98 89       	ldd	r25, Y+16	; 0x10
     7e0:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     7e4:	9b 01       	movw	r18, r22
     7e6:	ac 01       	movw	r20, r24
     7e8:	c5 01       	movw	r24, r10
     7ea:	b4 01       	movw	r22, r8
     7ec:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     7f0:	2b 01       	movw	r4, r22
     7f2:	3c 01       	movw	r6, r24
	F = 21.2964 + 390.67050646*k - 0.0016528*T2 - 0.00000239*T3; // Moon's argument of latitude
     7f4:	23 ed       	ldi	r18, 0xD3	; 211
     7f6:	35 e5       	ldi	r19, 0x55	; 85
     7f8:	43 ec       	ldi	r20, 0xC3	; 195
     7fa:	53 e4       	ldi	r21, 0x43	; 67
     7fc:	c7 01       	movw	r24, r14
     7fe:	b6 01       	movw	r22, r12
     800:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     804:	27 e0       	ldi	r18, 0x07	; 7
     806:	3f e5       	ldi	r19, 0x5F	; 95
     808:	4a ea       	ldi	r20, 0xAA	; 170
     80a:	51 e4       	ldi	r21, 0x41	; 65
     80c:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     810:	6b 01       	movw	r12, r22
     812:	7c 01       	movw	r14, r24
     814:	24 ec       	ldi	r18, 0xC4	; 196
     816:	32 ea       	ldi	r19, 0xA2	; 162
     818:	48 ed       	ldi	r20, 0xD8	; 216
     81a:	5a e3       	ldi	r21, 0x3A	; 58
     81c:	6d 81       	ldd	r22, Y+5	; 0x05
     81e:	7e 81       	ldd	r23, Y+6	; 0x06
     820:	8f 81       	ldd	r24, Y+7	; 0x07
     822:	98 85       	ldd	r25, Y+8	; 0x08
     824:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     828:	9b 01       	movw	r18, r22
     82a:	ac 01       	movw	r20, r24
     82c:	c7 01       	movw	r24, r14
     82e:	b6 01       	movw	r22, r12
     830:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
     834:	6b 01       	movw	r12, r22
     836:	7c 01       	movw	r14, r24
     838:	23 ee       	ldi	r18, 0xE3	; 227
     83a:	33 e6       	ldi	r19, 0x63	; 99
     83c:	40 e2       	ldi	r20, 0x20	; 32
     83e:	56 e3       	ldi	r21, 0x36	; 54
     840:	6d 85       	ldd	r22, Y+13	; 0x0d
     842:	7e 85       	ldd	r23, Y+14	; 0x0e
     844:	8f 85       	ldd	r24, Y+15	; 0x0f
     846:	98 89       	ldd	r25, Y+16	; 0x10
     848:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     84c:	9b 01       	movw	r18, r22
     84e:	ac 01       	movw	r20, r24
     850:	c7 01       	movw	r24, r14
     852:	b6 01       	movw	r22, r12
     854:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
     858:	6b 01       	movw	r12, r22
     85a:	7c 01       	movw	r14, r24
	C1=(0.1734 - 0.000393*T)*sinf(M*dr) + 0.0021*sinf(2*dr*M);
     85c:	21 e9       	ldi	r18, 0x91	; 145
     85e:	3b e0       	ldi	r19, 0x0B	; 11
     860:	4e ec       	ldi	r20, 0xCE	; 206
     862:	59 e3       	ldi	r21, 0x39	; 57
     864:	69 81       	ldd	r22, Y+1	; 0x01
     866:	7a 81       	ldd	r23, Y+2	; 0x02
     868:	8b 81       	ldd	r24, Y+3	; 0x03
     86a:	9c 81       	ldd	r25, Y+4	; 0x04
     86c:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     870:	9b 01       	movw	r18, r22
     872:	ac 01       	movw	r20, r24
     874:	65 ec       	ldi	r22, 0xC5	; 197
     876:	7f e8       	ldi	r23, 0x8F	; 143
     878:	81 e3       	ldi	r24, 0x31	; 49
     87a:	9e e3       	ldi	r25, 0x3E	; 62
     87c:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
     880:	4b 01       	movw	r8, r22
     882:	5c 01       	movw	r10, r24
     884:	25 e3       	ldi	r18, 0x35	; 53
     886:	3a ef       	ldi	r19, 0xFA	; 250
     888:	4e e8       	ldi	r20, 0x8E	; 142
     88a:	5c e3       	ldi	r21, 0x3C	; 60
     88c:	69 85       	ldd	r22, Y+9	; 0x09
     88e:	7a 85       	ldd	r23, Y+10	; 0x0a
     890:	8b 85       	ldd	r24, Y+11	; 0x0b
     892:	9c 85       	ldd	r25, Y+12	; 0x0c
     894:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     898:	0e 94 2e 13 	call	0x265c	; 0x265c <sin>
     89c:	9b 01       	movw	r18, r22
     89e:	ac 01       	movw	r20, r24
     8a0:	c5 01       	movw	r24, r10
     8a2:	b4 01       	movw	r22, r8
     8a4:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     8a8:	4b 01       	movw	r8, r22
     8aa:	5c 01       	movw	r10, r24
     8ac:	25 e3       	ldi	r18, 0x35	; 53
     8ae:	3a ef       	ldi	r19, 0xFA	; 250
     8b0:	4e e0       	ldi	r20, 0x0E	; 14
     8b2:	5d e3       	ldi	r21, 0x3D	; 61
     8b4:	69 85       	ldd	r22, Y+9	; 0x09
     8b6:	7a 85       	ldd	r23, Y+10	; 0x0a
     8b8:	8b 85       	ldd	r24, Y+11	; 0x0b
     8ba:	9c 85       	ldd	r25, Y+12	; 0x0c
     8bc:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     8c0:	0e 94 2e 13 	call	0x265c	; 0x265c <sin>
     8c4:	27 e2       	ldi	r18, 0x27	; 39
     8c6:	30 ea       	ldi	r19, 0xA0	; 160
     8c8:	49 e0       	ldi	r20, 0x09	; 9
     8ca:	5b e3       	ldi	r21, 0x3B	; 59
     8cc:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     8d0:	9b 01       	movw	r18, r22
     8d2:	ac 01       	movw	r20, r24
     8d4:	c5 01       	movw	r24, r10
     8d6:	b4 01       	movw	r22, r8
     8d8:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     8dc:	4b 01       	movw	r8, r22
     8de:	5c 01       	movw	r10, r24
	C1 = C1 - 0.4068*sinf(Mpr*dr) + 0.0161*sinf(dr*2*Mpr);
     8e0:	25 e3       	ldi	r18, 0x35	; 53
     8e2:	3a ef       	ldi	r19, 0xFA	; 250
     8e4:	4e e8       	ldi	r20, 0x8E	; 142
     8e6:	5c e3       	ldi	r21, 0x3C	; 60
     8e8:	c3 01       	movw	r24, r6
     8ea:	b2 01       	movw	r22, r4
     8ec:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     8f0:	0e 94 2e 13 	call	0x265c	; 0x265c <sin>
     8f4:	27 e1       	ldi	r18, 0x17	; 23
     8f6:	38 e4       	ldi	r19, 0x48	; 72
     8f8:	40 ed       	ldi	r20, 0xD0	; 208
     8fa:	5e e3       	ldi	r21, 0x3E	; 62
     8fc:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     900:	9b 01       	movw	r18, r22
     902:	ac 01       	movw	r20, r24
     904:	c5 01       	movw	r24, r10
     906:	b4 01       	movw	r22, r8
     908:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
     90c:	4b 01       	movw	r8, r22
     90e:	5c 01       	movw	r10, r24
     910:	25 e3       	ldi	r18, 0x35	; 53
     912:	3a ef       	ldi	r19, 0xFA	; 250
     914:	4e e0       	ldi	r20, 0x0E	; 14
     916:	5d e3       	ldi	r21, 0x3D	; 61
     918:	c3 01       	movw	r24, r6
     91a:	b2 01       	movw	r22, r4
     91c:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     920:	0e 94 2e 13 	call	0x265c	; 0x265c <sin>
     924:	26 e2       	ldi	r18, 0x26	; 38
     926:	34 ee       	ldi	r19, 0xE4	; 228
     928:	43 e8       	ldi	r20, 0x83	; 131
     92a:	5c e3       	ldi	r21, 0x3C	; 60
     92c:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     930:	9b 01       	movw	r18, r22
     932:	ac 01       	movw	r20, r24
     934:	c5 01       	movw	r24, r10
     936:	b4 01       	movw	r22, r8
     938:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     93c:	4b 01       	movw	r8, r22
     93e:	5c 01       	movw	r10, r24
	C1 = C1 - 0.0004*sinf(dr*3*Mpr);
     940:	20 e5       	ldi	r18, 0x50	; 80
     942:	37 e7       	ldi	r19, 0x77	; 119
     944:	46 e5       	ldi	r20, 0x56	; 86
     946:	5d e3       	ldi	r21, 0x3D	; 61
     948:	c3 01       	movw	r24, r6
     94a:	b2 01       	movw	r22, r4
     94c:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     950:	0e 94 2e 13 	call	0x265c	; 0x265c <sin>
     954:	27 e1       	ldi	r18, 0x17	; 23
     956:	37 eb       	ldi	r19, 0xB7	; 183
     958:	41 ed       	ldi	r20, 0xD1	; 209
     95a:	59 e3       	ldi	r21, 0x39	; 57
     95c:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     960:	9b 01       	movw	r18, r22
     962:	ac 01       	movw	r20, r24
     964:	c5 01       	movw	r24, r10
     966:	b4 01       	movw	r22, r8
     968:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
     96c:	4b 01       	movw	r8, r22
     96e:	5c 01       	movw	r10, r24
	C1 = C1 + 0.0104*sinf(dr*2*F) - 0.0051*sinf(dr*(M+Mpr));
     970:	25 e3       	ldi	r18, 0x35	; 53
     972:	3a ef       	ldi	r19, 0xFA	; 250
     974:	4e e0       	ldi	r20, 0x0E	; 14
     976:	5d e3       	ldi	r21, 0x3D	; 61
     978:	c7 01       	movw	r24, r14
     97a:	b6 01       	movw	r22, r12
     97c:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     980:	0e 94 2e 13 	call	0x265c	; 0x265c <sin>
     984:	23 ec       	ldi	r18, 0xC3	; 195
     986:	34 e6       	ldi	r19, 0x64	; 100
     988:	4a e2       	ldi	r20, 0x2A	; 42
     98a:	5c e3       	ldi	r21, 0x3C	; 60
     98c:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     990:	9b 01       	movw	r18, r22
     992:	ac 01       	movw	r20, r24
     994:	c5 01       	movw	r24, r10
     996:	b4 01       	movw	r22, r8
     998:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     99c:	4b 01       	movw	r8, r22
     99e:	5c 01       	movw	r10, r24
     9a0:	a3 01       	movw	r20, r6
     9a2:	92 01       	movw	r18, r4
     9a4:	69 85       	ldd	r22, Y+9	; 0x09
     9a6:	7a 85       	ldd	r23, Y+10	; 0x0a
     9a8:	8b 85       	ldd	r24, Y+11	; 0x0b
     9aa:	9c 85       	ldd	r25, Y+12	; 0x0c
     9ac:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     9b0:	25 e3       	ldi	r18, 0x35	; 53
     9b2:	3a ef       	ldi	r19, 0xFA	; 250
     9b4:	4e e8       	ldi	r20, 0x8E	; 142
     9b6:	5c e3       	ldi	r21, 0x3C	; 60
     9b8:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     9bc:	0e 94 2e 13 	call	0x265c	; 0x265c <sin>
     9c0:	27 ee       	ldi	r18, 0xE7	; 231
     9c2:	3d e1       	ldi	r19, 0x1D	; 29
     9c4:	47 ea       	ldi	r20, 0xA7	; 167
     9c6:	5b e3       	ldi	r21, 0x3B	; 59
     9c8:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     9cc:	9b 01       	movw	r18, r22
     9ce:	ac 01       	movw	r20, r24
     9d0:	c5 01       	movw	r24, r10
     9d2:	b4 01       	movw	r22, r8
     9d4:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
     9d8:	4b 01       	movw	r8, r22
     9da:	5c 01       	movw	r10, r24
	C1 = C1 - 0.0074*sinf(dr*(M-Mpr)) + 0.0004*sinf(dr*(2*F+M));
     9dc:	a3 01       	movw	r20, r6
     9de:	92 01       	movw	r18, r4
     9e0:	69 85       	ldd	r22, Y+9	; 0x09
     9e2:	7a 85       	ldd	r23, Y+10	; 0x0a
     9e4:	8b 85       	ldd	r24, Y+11	; 0x0b
     9e6:	9c 85       	ldd	r25, Y+12	; 0x0c
     9e8:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
     9ec:	25 e3       	ldi	r18, 0x35	; 53
     9ee:	3a ef       	ldi	r19, 0xFA	; 250
     9f0:	4e e8       	ldi	r20, 0x8E	; 142
     9f2:	5c e3       	ldi	r21, 0x3C	; 60
     9f4:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     9f8:	0e 94 2e 13 	call	0x265c	; 0x265c <sin>
     9fc:	23 eb       	ldi	r18, 0xB3	; 179
     9fe:	3b e7       	ldi	r19, 0x7B	; 123
     a00:	42 ef       	ldi	r20, 0xF2	; 242
     a02:	5b e3       	ldi	r21, 0x3B	; 59
     a04:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     a08:	9b 01       	movw	r18, r22
     a0a:	ac 01       	movw	r20, r24
     a0c:	c5 01       	movw	r24, r10
     a0e:	b4 01       	movw	r22, r8
     a10:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
     a14:	4b 01       	movw	r8, r22
     a16:	5c 01       	movw	r10, r24
     a18:	a7 01       	movw	r20, r14
     a1a:	96 01       	movw	r18, r12
     a1c:	c7 01       	movw	r24, r14
     a1e:	b6 01       	movw	r22, r12
     a20:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     a24:	6b 01       	movw	r12, r22
     a26:	7c 01       	movw	r14, r24
     a28:	9b 01       	movw	r18, r22
     a2a:	ac 01       	movw	r20, r24
     a2c:	69 85       	ldd	r22, Y+9	; 0x09
     a2e:	7a 85       	ldd	r23, Y+10	; 0x0a
     a30:	8b 85       	ldd	r24, Y+11	; 0x0b
     a32:	9c 85       	ldd	r25, Y+12	; 0x0c
     a34:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     a38:	25 e3       	ldi	r18, 0x35	; 53
     a3a:	3a ef       	ldi	r19, 0xFA	; 250
     a3c:	4e e8       	ldi	r20, 0x8E	; 142
     a3e:	5c e3       	ldi	r21, 0x3C	; 60
     a40:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     a44:	0e 94 2e 13 	call	0x265c	; 0x265c <sin>
     a48:	27 e1       	ldi	r18, 0x17	; 23
     a4a:	37 eb       	ldi	r19, 0xB7	; 183
     a4c:	41 ed       	ldi	r20, 0xD1	; 209
     a4e:	59 e3       	ldi	r21, 0x39	; 57
     a50:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     a54:	9b 01       	movw	r18, r22
     a56:	ac 01       	movw	r20, r24
     a58:	c5 01       	movw	r24, r10
     a5a:	b4 01       	movw	r22, r8
     a5c:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     a60:	4b 01       	movw	r8, r22
     a62:	5c 01       	movw	r10, r24
	C1 = C1 - 0.0004*sinf(dr*(2*F-M)) - 0.0006*sinf(dr*(2*F+Mpr));
     a64:	29 85       	ldd	r18, Y+9	; 0x09
     a66:	3a 85       	ldd	r19, Y+10	; 0x0a
     a68:	4b 85       	ldd	r20, Y+11	; 0x0b
     a6a:	5c 85       	ldd	r21, Y+12	; 0x0c
     a6c:	c7 01       	movw	r24, r14
     a6e:	b6 01       	movw	r22, r12
     a70:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
     a74:	25 e3       	ldi	r18, 0x35	; 53
     a76:	3a ef       	ldi	r19, 0xFA	; 250
     a78:	4e e8       	ldi	r20, 0x8E	; 142
     a7a:	5c e3       	ldi	r21, 0x3C	; 60
     a7c:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     a80:	0e 94 2e 13 	call	0x265c	; 0x265c <sin>
     a84:	27 e1       	ldi	r18, 0x17	; 23
     a86:	37 eb       	ldi	r19, 0xB7	; 183
     a88:	41 ed       	ldi	r20, 0xD1	; 209
     a8a:	59 e3       	ldi	r21, 0x39	; 57
     a8c:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     a90:	9b 01       	movw	r18, r22
     a92:	ac 01       	movw	r20, r24
     a94:	c5 01       	movw	r24, r10
     a96:	b4 01       	movw	r22, r8
     a98:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
     a9c:	4b 01       	movw	r8, r22
     a9e:	5c 01       	movw	r10, r24
     aa0:	a7 01       	movw	r20, r14
     aa2:	96 01       	movw	r18, r12
     aa4:	c3 01       	movw	r24, r6
     aa6:	b2 01       	movw	r22, r4
     aa8:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     aac:	25 e3       	ldi	r18, 0x35	; 53
     aae:	3a ef       	ldi	r19, 0xFA	; 250
     ab0:	4e e8       	ldi	r20, 0x8E	; 142
     ab2:	5c e3       	ldi	r21, 0x3C	; 60
     ab4:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     ab8:	0e 94 2e 13 	call	0x265c	; 0x265c <sin>
     abc:	22 e5       	ldi	r18, 0x52	; 82
     abe:	39 e4       	ldi	r19, 0x49	; 73
     ac0:	4d e1       	ldi	r20, 0x1D	; 29
     ac2:	5a e3       	ldi	r21, 0x3A	; 58
     ac4:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     ac8:	9b 01       	movw	r18, r22
     aca:	ac 01       	movw	r20, r24
     acc:	c5 01       	movw	r24, r10
     ace:	b4 01       	movw	r22, r8
     ad0:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
     ad4:	4b 01       	movw	r8, r22
     ad6:	5c 01       	movw	r10, r24
	C1 = C1 + 0.0010*sinf(dr*(2*F-Mpr)) + 0.0005*sinf(dr*(2*Mpr+M));
     ad8:	a3 01       	movw	r20, r6
     ada:	92 01       	movw	r18, r4
     adc:	c7 01       	movw	r24, r14
     ade:	b6 01       	movw	r22, r12
     ae0:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
     ae4:	25 e3       	ldi	r18, 0x35	; 53
     ae6:	3a ef       	ldi	r19, 0xFA	; 250
     ae8:	4e e8       	ldi	r20, 0x8E	; 142
     aea:	5c e3       	ldi	r21, 0x3C	; 60
     aec:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     af0:	0e 94 2e 13 	call	0x265c	; 0x265c <sin>
     af4:	2f e6       	ldi	r18, 0x6F	; 111
     af6:	32 e1       	ldi	r19, 0x12	; 18
     af8:	43 e8       	ldi	r20, 0x83	; 131
     afa:	5a e3       	ldi	r21, 0x3A	; 58
     afc:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     b00:	9b 01       	movw	r18, r22
     b02:	ac 01       	movw	r20, r24
     b04:	c5 01       	movw	r24, r10
     b06:	b4 01       	movw	r22, r8
     b08:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     b0c:	6b 01       	movw	r12, r22
     b0e:	7c 01       	movw	r14, r24
     b10:	a3 01       	movw	r20, r6
     b12:	92 01       	movw	r18, r4
     b14:	c3 01       	movw	r24, r6
     b16:	b2 01       	movw	r22, r4
     b18:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     b1c:	9b 01       	movw	r18, r22
     b1e:	ac 01       	movw	r20, r24
     b20:	69 85       	ldd	r22, Y+9	; 0x09
     b22:	7a 85       	ldd	r23, Y+10	; 0x0a
     b24:	8b 85       	ldd	r24, Y+11	; 0x0b
     b26:	9c 85       	ldd	r25, Y+12	; 0x0c
     b28:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     b2c:	25 e3       	ldi	r18, 0x35	; 53
     b2e:	3a ef       	ldi	r19, 0xFA	; 250
     b30:	4e e8       	ldi	r20, 0x8E	; 142
     b32:	5c e3       	ldi	r21, 0x3C	; 60
     b34:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     b38:	0e 94 2e 13 	call	0x265c	; 0x265c <sin>
     b3c:	2f e6       	ldi	r18, 0x6F	; 111
     b3e:	32 e1       	ldi	r19, 0x12	; 18
     b40:	43 e0       	ldi	r20, 0x03	; 3
     b42:	5a e3       	ldi	r21, 0x3A	; 58
     b44:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     b48:	9b 01       	movw	r18, r22
     b4a:	ac 01       	movw	r20, r24
     b4c:	c7 01       	movw	r24, r14
     b4e:	b6 01       	movw	r22, r12
     b50:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     b54:	6b 01       	movw	r12, r22
     b56:	7c 01       	movw	r14, r24
	if (T < -11) {
     b58:	20 e0       	ldi	r18, 0x00	; 0
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	40 e3       	ldi	r20, 0x30	; 48
     b5e:	51 ec       	ldi	r21, 0xC1	; 193
     b60:	69 81       	ldd	r22, Y+1	; 0x01
     b62:	7a 81       	ldd	r23, Y+2	; 0x02
     b64:	8b 81       	ldd	r24, Y+3	; 0x03
     b66:	9c 81       	ldd	r25, Y+4	; 0x04
     b68:	0e 94 05 11 	call	0x220a	; 0x220a <__cmpsf2>
     b6c:	88 23       	and	r24, r24
     b6e:	0c f0       	brlt	.+2      	; 0xb72 <__stack+0x313>
     b70:	51 c0       	rjmp	.+162    	; 0xc14 <__stack+0x3b5>
		deltat= 0.001 + 0.000839*T + 0.0002261*T2 - 0.00000845*T3 - 0.000000081*T*T3;
     b72:	26 e5       	ldi	r18, 0x56	; 86
     b74:	30 ef       	ldi	r19, 0xF0	; 240
     b76:	4b e5       	ldi	r20, 0x5B	; 91
     b78:	5a e3       	ldi	r21, 0x3A	; 58
     b7a:	69 81       	ldd	r22, Y+1	; 0x01
     b7c:	7a 81       	ldd	r23, Y+2	; 0x02
     b7e:	8b 81       	ldd	r24, Y+3	; 0x03
     b80:	9c 81       	ldd	r25, Y+4	; 0x04
     b82:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     b86:	2f e6       	ldi	r18, 0x6F	; 111
     b88:	32 e1       	ldi	r19, 0x12	; 18
     b8a:	43 e8       	ldi	r20, 0x83	; 131
     b8c:	5a e3       	ldi	r21, 0x3A	; 58
     b8e:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     b92:	4b 01       	movw	r8, r22
     b94:	5c 01       	movw	r10, r24
     b96:	22 e4       	ldi	r18, 0x42	; 66
     b98:	35 e1       	ldi	r19, 0x15	; 21
     b9a:	4d e6       	ldi	r20, 0x6D	; 109
     b9c:	59 e3       	ldi	r21, 0x39	; 57
     b9e:	6d 81       	ldd	r22, Y+5	; 0x05
     ba0:	7e 81       	ldd	r23, Y+6	; 0x06
     ba2:	8f 81       	ldd	r24, Y+7	; 0x07
     ba4:	98 85       	ldd	r25, Y+8	; 0x08
     ba6:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     baa:	9b 01       	movw	r18, r22
     bac:	ac 01       	movw	r20, r24
     bae:	c5 01       	movw	r24, r10
     bb0:	b4 01       	movw	r22, r8
     bb2:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     bb6:	4b 01       	movw	r8, r22
     bb8:	5c 01       	movw	r10, r24
     bba:	29 e7       	ldi	r18, 0x79	; 121
     bbc:	34 ec       	ldi	r19, 0xC4	; 196
     bbe:	4d e0       	ldi	r20, 0x0D	; 13
     bc0:	57 e3       	ldi	r21, 0x37	; 55
     bc2:	6d 85       	ldd	r22, Y+13	; 0x0d
     bc4:	7e 85       	ldd	r23, Y+14	; 0x0e
     bc6:	8f 85       	ldd	r24, Y+15	; 0x0f
     bc8:	98 89       	ldd	r25, Y+16	; 0x10
     bca:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     bce:	9b 01       	movw	r18, r22
     bd0:	ac 01       	movw	r20, r24
     bd2:	c5 01       	movw	r24, r10
     bd4:	b4 01       	movw	r22, r8
     bd6:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
     bda:	4b 01       	movw	r8, r22
     bdc:	5c 01       	movw	r10, r24
     bde:	29 e3       	ldi	r18, 0x39	; 57
     be0:	32 ef       	ldi	r19, 0xF2	; 242
     be2:	4d ea       	ldi	r20, 0xAD	; 173
     be4:	53 e3       	ldi	r21, 0x33	; 51
     be6:	69 81       	ldd	r22, Y+1	; 0x01
     be8:	7a 81       	ldd	r23, Y+2	; 0x02
     bea:	8b 81       	ldd	r24, Y+3	; 0x03
     bec:	9c 81       	ldd	r25, Y+4	; 0x04
     bee:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     bf2:	9b 01       	movw	r18, r22
     bf4:	ac 01       	movw	r20, r24
     bf6:	6d 85       	ldd	r22, Y+13	; 0x0d
     bf8:	7e 85       	ldd	r23, Y+14	; 0x0e
     bfa:	8f 85       	ldd	r24, Y+15	; 0x0f
     bfc:	98 89       	ldd	r25, Y+16	; 0x10
     bfe:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     c02:	9b 01       	movw	r18, r22
     c04:	ac 01       	movw	r20, r24
     c06:	c5 01       	movw	r24, r10
     c08:	b4 01       	movw	r22, r8
     c0a:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
     c0e:	4b 01       	movw	r8, r22
     c10:	5c 01       	movw	r10, r24
     c12:	24 c0       	rjmp	.+72     	; 0xc5c <__stack+0x3fd>
		} else {
		deltat= -0.000278 + 0.000265*T + 0.000262*T2;
     c14:	23 eb       	ldi	r18, 0xB3	; 179
     c16:	3f ee       	ldi	r19, 0xEF	; 239
     c18:	4a e8       	ldi	r20, 0x8A	; 138
     c1a:	59 e3       	ldi	r21, 0x39	; 57
     c1c:	69 81       	ldd	r22, Y+1	; 0x01
     c1e:	7a 81       	ldd	r23, Y+2	; 0x02
     c20:	8b 81       	ldd	r24, Y+3	; 0x03
     c22:	9c 81       	ldd	r25, Y+4	; 0x04
     c24:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     c28:	27 e8       	ldi	r18, 0x87	; 135
     c2a:	30 ec       	ldi	r19, 0xC0	; 192
     c2c:	41 e9       	ldi	r20, 0x91	; 145
     c2e:	59 e3       	ldi	r21, 0x39	; 57
     c30:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
     c34:	4b 01       	movw	r8, r22
     c36:	5c 01       	movw	r10, r24
     c38:	2b e0       	ldi	r18, 0x0B	; 11
     c3a:	3d e5       	ldi	r19, 0x5D	; 93
     c3c:	49 e8       	ldi	r20, 0x89	; 137
     c3e:	59 e3       	ldi	r21, 0x39	; 57
     c40:	6d 81       	ldd	r22, Y+5	; 0x05
     c42:	7e 81       	ldd	r23, Y+6	; 0x06
     c44:	8f 81       	ldd	r24, Y+7	; 0x07
     c46:	98 85       	ldd	r25, Y+8	; 0x08
     c48:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     c4c:	9b 01       	movw	r18, r22
     c4e:	ac 01       	movw	r20, r24
     c50:	c5 01       	movw	r24, r10
     c52:	b4 01       	movw	r22, r8
     c54:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     c58:	4b 01       	movw	r8, r22
     c5a:	5c 01       	movw	r10, r24
	};
	JdNew = Jd1 + C1 - deltat;
     c5c:	a7 01       	movw	r20, r14
     c5e:	96 01       	movw	r18, r12
     c60:	69 89       	ldd	r22, Y+17	; 0x11
     c62:	7a 89       	ldd	r23, Y+18	; 0x12
     c64:	8b 89       	ldd	r24, Y+19	; 0x13
     c66:	9c 89       	ldd	r25, Y+20	; 0x14
     c68:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     c6c:	a5 01       	movw	r20, r10
     c6e:	94 01       	movw	r18, r8
     c70:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
	return floorf(JdNew + 0.5 + timeZone/24);
     c74:	20 e0       	ldi	r18, 0x00	; 0
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	40 e0       	ldi	r20, 0x00	; 0
     c7a:	5f e3       	ldi	r21, 0x3F	; 63
     c7c:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     c80:	6b 01       	movw	r12, r22
     c82:	7c 01       	movw	r14, r24
     c84:	8d 89       	ldd	r24, Y+21	; 0x15
     c86:	9e 89       	ldd	r25, Y+22	; 0x16
     c88:	68 e1       	ldi	r22, 0x18	; 24
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
     c90:	07 2e       	mov	r0, r23
     c92:	00 0c       	add	r0, r0
     c94:	88 0b       	sbc	r24, r24
     c96:	99 0b       	sbc	r25, r25
     c98:	0e 94 b4 11 	call	0x2368	; 0x2368 <__floatsisf>
     c9c:	9b 01       	movw	r18, r22
     c9e:	ac 01       	movw	r20, r24
     ca0:	c7 01       	movw	r24, r14
     ca2:	b6 01       	movw	r22, r12
     ca4:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     ca8:	0e 94 ef 11 	call	0x23de	; 0x23de <floor>
}
     cac:	66 96       	adiw	r28, 0x16	; 22
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	de bf       	out	0x3e, r29	; 62
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	cd bf       	out	0x3d, r28	; 61
     cb8:	df 91       	pop	r29
     cba:	cf 91       	pop	r28
     cbc:	ff 90       	pop	r15
     cbe:	ef 90       	pop	r14
     cc0:	df 90       	pop	r13
     cc2:	cf 90       	pop	r12
     cc4:	bf 90       	pop	r11
     cc6:	af 90       	pop	r10
     cc8:	9f 90       	pop	r9
     cca:	8f 90       	pop	r8
     ccc:	7f 90       	pop	r7
     cce:	6f 90       	pop	r6
     cd0:	5f 90       	pop	r5
     cd2:	4f 90       	pop	r4
     cd4:	08 95       	ret

00000cd6 <getSunLongitude>:

double getSunLongitude(long double jdn, int timeZone)
{
     cd6:	4f 92       	push	r4
     cd8:	5f 92       	push	r5
     cda:	6f 92       	push	r6
     cdc:	7f 92       	push	r7
     cde:	8f 92       	push	r8
     ce0:	9f 92       	push	r9
     ce2:	af 92       	push	r10
     ce4:	bf 92       	push	r11
     ce6:	cf 92       	push	r12
     ce8:	df 92       	push	r13
     cea:	ef 92       	push	r14
     cec:	ff 92       	push	r15
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	28 97       	sbiw	r28, 0x08	; 8
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	cd bf       	out	0x3d, r28	; 61
     d02:	5a 01       	movw	r10, r20
	long double T, T2, dr, M, L0, DL, L;
	T = (jdn - 2451545.5 - timeZone/24) / 36525; // Time in Julian centuries from 2000-01-01 12:00:00 GMT
     d04:	26 e6       	ldi	r18, 0x66	; 102
     d06:	31 ea       	ldi	r19, 0xA1	; 161
     d08:	45 e1       	ldi	r20, 0x15	; 21
     d0a:	5a e4       	ldi	r21, 0x4A	; 74
     d0c:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
     d10:	6b 01       	movw	r12, r22
     d12:	7c 01       	movw	r14, r24
     d14:	c5 01       	movw	r24, r10
     d16:	68 e1       	ldi	r22, 0x18	; 24
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
     d1e:	07 2e       	mov	r0, r23
     d20:	00 0c       	add	r0, r0
     d22:	88 0b       	sbc	r24, r24
     d24:	99 0b       	sbc	r25, r25
     d26:	0e 94 b4 11 	call	0x2368	; 0x2368 <__floatsisf>
     d2a:	9b 01       	movw	r18, r22
     d2c:	ac 01       	movw	r20, r24
     d2e:	c7 01       	movw	r24, r14
     d30:	b6 01       	movw	r22, r12
     d32:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
     d36:	20 e0       	ldi	r18, 0x00	; 0
     d38:	3d ea       	ldi	r19, 0xAD	; 173
     d3a:	4e e0       	ldi	r20, 0x0E	; 14
     d3c:	57 e4       	ldi	r21, 0x47	; 71
     d3e:	0e 94 0a 11 	call	0x2214	; 0x2214 <__divsf3>
     d42:	6b 01       	movw	r12, r22
     d44:	7c 01       	movw	r14, r24
	T2 = T*T;
     d46:	9b 01       	movw	r18, r22
     d48:	ac 01       	movw	r20, r24
     d4a:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     d4e:	4b 01       	movw	r8, r22
     d50:	5c 01       	movw	r10, r24
	dr = M_PI/180; // degree to radian
	M = 357.52910 + 35999.05030*T - 0.0001559*T2 - 0.00000048*T*T2; // mean anomaly, degree
     d52:	2d e0       	ldi	r18, 0x0D	; 13
     d54:	3f e9       	ldi	r19, 0x9F	; 159
     d56:	4c e0       	ldi	r20, 0x0C	; 12
     d58:	57 e4       	ldi	r21, 0x47	; 71
     d5a:	c7 01       	movw	r24, r14
     d5c:	b6 01       	movw	r22, r12
     d5e:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     d62:	2a eb       	ldi	r18, 0xBA	; 186
     d64:	33 ec       	ldi	r19, 0xC3	; 195
     d66:	42 eb       	ldi	r20, 0xB2	; 178
     d68:	53 e4       	ldi	r21, 0x43	; 67
     d6a:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     d6e:	2b 01       	movw	r4, r22
     d70:	3c 01       	movw	r6, r24
     d72:	26 e1       	ldi	r18, 0x16	; 22
     d74:	39 e7       	ldi	r19, 0x79	; 121
     d76:	43 e2       	ldi	r20, 0x23	; 35
     d78:	59 e3       	ldi	r21, 0x39	; 57
     d7a:	c5 01       	movw	r24, r10
     d7c:	b4 01       	movw	r22, r8
     d7e:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     d82:	9b 01       	movw	r18, r22
     d84:	ac 01       	movw	r20, r24
     d86:	c3 01       	movw	r24, r6
     d88:	b2 01       	movw	r22, r4
     d8a:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
     d8e:	2b 01       	movw	r4, r22
     d90:	3c 01       	movw	r6, r24
     d92:	29 e5       	ldi	r18, 0x59	; 89
     d94:	39 ed       	ldi	r19, 0xD9	; 217
     d96:	40 e0       	ldi	r20, 0x00	; 0
     d98:	55 e3       	ldi	r21, 0x35	; 53
     d9a:	c7 01       	movw	r24, r14
     d9c:	b6 01       	movw	r22, r12
     d9e:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     da2:	9b 01       	movw	r18, r22
     da4:	ac 01       	movw	r20, r24
     da6:	c5 01       	movw	r24, r10
     da8:	b4 01       	movw	r22, r8
     daa:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     dae:	9b 01       	movw	r18, r22
     db0:	ac 01       	movw	r20, r24
     db2:	c3 01       	movw	r24, r6
     db4:	b2 01       	movw	r22, r4
     db6:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
     dba:	2b 01       	movw	r4, r22
     dbc:	3c 01       	movw	r6, r24
	L0 = 280.46645 + 36000.76983*T + 0.0003032*T2; // mean longitude, degree
     dbe:	25 ec       	ldi	r18, 0xC5	; 197
     dc0:	30 ea       	ldi	r19, 0xA0	; 160
     dc2:	4c e0       	ldi	r20, 0x0C	; 12
     dc4:	57 e4       	ldi	r21, 0x47	; 71
     dc6:	c7 01       	movw	r24, r14
     dc8:	b6 01       	movw	r22, r12
     dca:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     dce:	25 eb       	ldi	r18, 0xB5	; 181
     dd0:	3b e3       	ldi	r19, 0x3B	; 59
     dd2:	4c e8       	ldi	r20, 0x8C	; 140
     dd4:	53 e4       	ldi	r21, 0x43	; 67
     dd6:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     dda:	69 83       	std	Y+1, r22	; 0x01
     ddc:	7a 83       	std	Y+2, r23	; 0x02
     dde:	8b 83       	std	Y+3, r24	; 0x03
     de0:	9c 83       	std	Y+4, r25	; 0x04
     de2:	21 ed       	ldi	r18, 0xD1	; 209
     de4:	36 ef       	ldi	r19, 0xF6	; 246
     de6:	4e e9       	ldi	r20, 0x9E	; 158
     de8:	59 e3       	ldi	r21, 0x39	; 57
     dea:	c5 01       	movw	r24, r10
     dec:	b4 01       	movw	r22, r8
     dee:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     df2:	9b 01       	movw	r18, r22
     df4:	ac 01       	movw	r20, r24
     df6:	69 81       	ldd	r22, Y+1	; 0x01
     df8:	7a 81       	ldd	r23, Y+2	; 0x02
     dfa:	8b 81       	ldd	r24, Y+3	; 0x03
     dfc:	9c 81       	ldd	r25, Y+4	; 0x04
     dfe:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     e02:	69 83       	std	Y+1, r22	; 0x01
     e04:	7a 83       	std	Y+2, r23	; 0x02
     e06:	8b 83       	std	Y+3, r24	; 0x03
     e08:	9c 83       	std	Y+4, r25	; 0x04
	DL = (1.914600 - 0.004817*T - 0.000014*T2)*sinf(dr*M);
     e0a:	2d ee       	ldi	r18, 0xED	; 237
     e0c:	37 ed       	ldi	r19, 0xD7	; 215
     e0e:	4d e9       	ldi	r20, 0x9D	; 157
     e10:	5b e3       	ldi	r21, 0x3B	; 59
     e12:	c7 01       	movw	r24, r14
     e14:	b6 01       	movw	r22, r12
     e16:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     e1a:	9b 01       	movw	r18, r22
     e1c:	ac 01       	movw	r20, r24
     e1e:	6d e9       	ldi	r22, 0x9D	; 157
     e20:	71 e1       	ldi	r23, 0x11	; 17
     e22:	85 ef       	ldi	r24, 0xF5	; 245
     e24:	9f e3       	ldi	r25, 0x3F	; 63
     e26:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
     e2a:	6d 83       	std	Y+5, r22	; 0x05
     e2c:	7e 83       	std	Y+6, r23	; 0x06
     e2e:	8f 83       	std	Y+7, r24	; 0x07
     e30:	98 87       	std	Y+8, r25	; 0x08
     e32:	2b e8       	ldi	r18, 0x8B	; 139
     e34:	31 ee       	ldi	r19, 0xE1	; 225
     e36:	4a e6       	ldi	r20, 0x6A	; 106
     e38:	57 e3       	ldi	r21, 0x37	; 55
     e3a:	c5 01       	movw	r24, r10
     e3c:	b4 01       	movw	r22, r8
     e3e:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     e42:	9b 01       	movw	r18, r22
     e44:	ac 01       	movw	r20, r24
     e46:	6d 81       	ldd	r22, Y+5	; 0x05
     e48:	7e 81       	ldd	r23, Y+6	; 0x06
     e4a:	8f 81       	ldd	r24, Y+7	; 0x07
     e4c:	98 85       	ldd	r25, Y+8	; 0x08
     e4e:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
     e52:	4b 01       	movw	r8, r22
     e54:	5c 01       	movw	r10, r24
     e56:	25 e3       	ldi	r18, 0x35	; 53
     e58:	3a ef       	ldi	r19, 0xFA	; 250
     e5a:	4e e8       	ldi	r20, 0x8E	; 142
     e5c:	5c e3       	ldi	r21, 0x3C	; 60
     e5e:	c3 01       	movw	r24, r6
     e60:	b2 01       	movw	r22, r4
     e62:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     e66:	0e 94 2e 13 	call	0x265c	; 0x265c <sin>
     e6a:	9b 01       	movw	r18, r22
     e6c:	ac 01       	movw	r20, r24
     e6e:	c5 01       	movw	r24, r10
     e70:	b4 01       	movw	r22, r8
     e72:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     e76:	4b 01       	movw	r8, r22
     e78:	5c 01       	movw	r10, r24
	DL = DL + (0.019993 - 0.000101*T)*sinf(dr*2*M) + 0.000290*sinf(dr*3*M);
     e7a:	26 ef       	ldi	r18, 0xF6	; 246
     e7c:	3f ec       	ldi	r19, 0xCF	; 207
     e7e:	43 ed       	ldi	r20, 0xD3	; 211
     e80:	58 e3       	ldi	r21, 0x38	; 56
     e82:	c7 01       	movw	r24, r14
     e84:	b6 01       	movw	r22, r12
     e86:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     e8a:	9b 01       	movw	r18, r22
     e8c:	ac 01       	movw	r20, r24
     e8e:	6c e5       	ldi	r22, 0x5C	; 92
     e90:	78 ec       	ldi	r23, 0xC8	; 200
     e92:	83 ea       	ldi	r24, 0xA3	; 163
     e94:	9c e3       	ldi	r25, 0x3C	; 60
     e96:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
     e9a:	6b 01       	movw	r12, r22
     e9c:	7c 01       	movw	r14, r24
     e9e:	25 e3       	ldi	r18, 0x35	; 53
     ea0:	3a ef       	ldi	r19, 0xFA	; 250
     ea2:	4e e0       	ldi	r20, 0x0E	; 14
     ea4:	5d e3       	ldi	r21, 0x3D	; 61
     ea6:	c3 01       	movw	r24, r6
     ea8:	b2 01       	movw	r22, r4
     eaa:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     eae:	0e 94 2e 13 	call	0x265c	; 0x265c <sin>
     eb2:	9b 01       	movw	r18, r22
     eb4:	ac 01       	movw	r20, r24
     eb6:	c7 01       	movw	r24, r14
     eb8:	b6 01       	movw	r22, r12
     eba:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     ebe:	9b 01       	movw	r18, r22
     ec0:	ac 01       	movw	r20, r24
     ec2:	c5 01       	movw	r24, r10
     ec4:	b4 01       	movw	r22, r8
     ec6:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     eca:	6b 01       	movw	r12, r22
     ecc:	7c 01       	movw	r14, r24
     ece:	20 e5       	ldi	r18, 0x50	; 80
     ed0:	37 e7       	ldi	r19, 0x77	; 119
     ed2:	46 e5       	ldi	r20, 0x56	; 86
     ed4:	5d e3       	ldi	r21, 0x3D	; 61
     ed6:	c3 01       	movw	r24, r6
     ed8:	b2 01       	movw	r22, r4
     eda:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     ede:	0e 94 2e 13 	call	0x265c	; 0x265c <sin>
     ee2:	24 e2       	ldi	r18, 0x24	; 36
     ee4:	3b e0       	ldi	r19, 0x0B	; 11
     ee6:	48 e9       	ldi	r20, 0x98	; 152
     ee8:	59 e3       	ldi	r21, 0x39	; 57
     eea:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     eee:	9b 01       	movw	r18, r22
     ef0:	ac 01       	movw	r20, r24
     ef2:	c7 01       	movw	r24, r14
     ef4:	b6 01       	movw	r22, r12
     ef6:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
     efa:	9b 01       	movw	r18, r22
     efc:	ac 01       	movw	r20, r24
	L = L0 + DL; // true longitude, degree
     efe:	69 81       	ldd	r22, Y+1	; 0x01
     f00:	7a 81       	ldd	r23, Y+2	; 0x02
     f02:	8b 81       	ldd	r24, Y+3	; 0x03
     f04:	9c 81       	ldd	r25, Y+4	; 0x04
     f06:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
	L = L*dr;
     f0a:	25 e3       	ldi	r18, 0x35	; 53
     f0c:	3a ef       	ldi	r19, 0xFA	; 250
     f0e:	4e e8       	ldi	r20, 0x8E	; 142
     f10:	5c e3       	ldi	r21, 0x3C	; 60
     f12:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     f16:	6b 01       	movw	r12, r22
     f18:	7c 01       	movw	r14, r24
	L = L - M_PI*2*(floorf(L/(M_PI*2))); // Normalize to (0, 2*PI)
     f1a:	2b ed       	ldi	r18, 0xDB	; 219
     f1c:	3f e0       	ldi	r19, 0x0F	; 15
     f1e:	49 ec       	ldi	r20, 0xC9	; 201
     f20:	50 e4       	ldi	r21, 0x40	; 64
     f22:	0e 94 0a 11 	call	0x2214	; 0x2214 <__divsf3>
     f26:	0e 94 ef 11 	call	0x23de	; 0x23de <floor>
     f2a:	2b ed       	ldi	r18, 0xDB	; 219
     f2c:	3f e0       	ldi	r19, 0x0F	; 15
     f2e:	49 ec       	ldi	r20, 0xC9	; 201
     f30:	50 e4       	ldi	r21, 0x40	; 64
     f32:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     f36:	9b 01       	movw	r18, r22
     f38:	ac 01       	movw	r20, r24
     f3a:	c7 01       	movw	r24, r14
     f3c:	b6 01       	movw	r22, r12
     f3e:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
	return floorf(L / M_PI * 6);
     f42:	2b ed       	ldi	r18, 0xDB	; 219
     f44:	3f e0       	ldi	r19, 0x0F	; 15
     f46:	49 e4       	ldi	r20, 0x49	; 73
     f48:	50 e4       	ldi	r21, 0x40	; 64
     f4a:	0e 94 0a 11 	call	0x2214	; 0x2214 <__divsf3>
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	40 ec       	ldi	r20, 0xC0	; 192
     f54:	50 e4       	ldi	r21, 0x40	; 64
     f56:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
     f5a:	0e 94 ef 11 	call	0x23de	; 0x23de <floor>
}
     f5e:	28 96       	adiw	r28, 0x08	; 8
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	f8 94       	cli
     f64:	de bf       	out	0x3e, r29	; 62
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	cd bf       	out	0x3d, r28	; 61
     f6a:	df 91       	pop	r29
     f6c:	cf 91       	pop	r28
     f6e:	ff 90       	pop	r15
     f70:	ef 90       	pop	r14
     f72:	df 90       	pop	r13
     f74:	cf 90       	pop	r12
     f76:	bf 90       	pop	r11
     f78:	af 90       	pop	r10
     f7a:	9f 90       	pop	r9
     f7c:	8f 90       	pop	r8
     f7e:	7f 90       	pop	r7
     f80:	6f 90       	pop	r6
     f82:	5f 90       	pop	r5
     f84:	4f 90       	pop	r4
     f86:	08 95       	ret

00000f88 <getLunarMonth11>:

double getLunarMonth11(uint16_t yy, int timeZone)
{
     f88:	8f 92       	push	r8
     f8a:	9f 92       	push	r9
     f8c:	af 92       	push	r10
     f8e:	bf 92       	push	r11
     f90:	cf 92       	push	r12
     f92:	df 92       	push	r13
     f94:	ef 92       	push	r14
     f96:	ff 92       	push	r15
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
     f9c:	eb 01       	movw	r28, r22
	long double k, off, nm, sunLong;
	off = jdFromDate(31, 12, yy) - 2415021;
     f9e:	ac 01       	movw	r20, r24
     fa0:	6c e0       	ldi	r22, 0x0C	; 12
     fa2:	8f e1       	ldi	r24, 0x1F	; 31
     fa4:	0e 94 04 02 	call	0x408	; 0x408 <jdFromDate>
     fa8:	24 eb       	ldi	r18, 0xB4	; 180
     faa:	36 e6       	ldi	r19, 0x66	; 102
     fac:	43 e1       	ldi	r20, 0x13	; 19
     fae:	5a e4       	ldi	r21, 0x4A	; 74
     fb0:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
	k = floorf(off / 29.530588853);
     fb4:	25 ea       	ldi	r18, 0xA5	; 165
     fb6:	3e e3       	ldi	r19, 0x3E	; 62
     fb8:	4c ee       	ldi	r20, 0xEC	; 236
     fba:	51 e4       	ldi	r21, 0x41	; 65
     fbc:	0e 94 0a 11 	call	0x2214	; 0x2214 <__divsf3>
     fc0:	0e 94 ef 11 	call	0x23de	; 0x23de <floor>
     fc4:	4b 01       	movw	r8, r22
     fc6:	5c 01       	movw	r10, r24
	nm = getNewMoonDay(k, timeZone);
     fc8:	ae 01       	movw	r20, r28
     fca:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <getNewMoonDay>
     fce:	6b 01       	movw	r12, r22
     fd0:	7c 01       	movw	r14, r24
	sunLong = getSunLongitude(nm, timeZone); // sun longitude at local midnight
     fd2:	ae 01       	movw	r20, r28
     fd4:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <getSunLongitude>
	if (sunLong >= 9) {
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	40 e1       	ldi	r20, 0x10	; 16
     fde:	51 e4       	ldi	r21, 0x41	; 65
     fe0:	0e 94 bc 12 	call	0x2578	; 0x2578 <__gesf2>
     fe4:	88 23       	and	r24, r24
     fe6:	6c f0       	brlt	.+26     	; 0x1002 <getLunarMonth11+0x7a>
		nm = getNewMoonDay(k-1, timeZone);
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	40 e8       	ldi	r20, 0x80	; 128
     fee:	5f e3       	ldi	r21, 0x3F	; 63
     ff0:	c5 01       	movw	r24, r10
     ff2:	b4 01       	movw	r22, r8
     ff4:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
     ff8:	ae 01       	movw	r20, r28
     ffa:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <getNewMoonDay>
     ffe:	6b 01       	movw	r12, r22
    1000:	7c 01       	movw	r14, r24
	}
	return nm;
}
    1002:	c7 01       	movw	r24, r14
    1004:	b6 01       	movw	r22, r12
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	ff 90       	pop	r15
    100c:	ef 90       	pop	r14
    100e:	df 90       	pop	r13
    1010:	cf 90       	pop	r12
    1012:	bf 90       	pop	r11
    1014:	af 90       	pop	r10
    1016:	9f 90       	pop	r9
    1018:	8f 90       	pop	r8
    101a:	08 95       	ret

0000101c <getLeapMonthOffset>:

double getLeapMonthOffset(long double a11, int timeZone)
{
    101c:	2f 92       	push	r2
    101e:	3f 92       	push	r3
    1020:	4f 92       	push	r4
    1022:	5f 92       	push	r5
    1024:	6f 92       	push	r6
    1026:	7f 92       	push	r7
    1028:	8f 92       	push	r8
    102a:	9f 92       	push	r9
    102c:	af 92       	push	r10
    102e:	bf 92       	push	r11
    1030:	cf 92       	push	r12
    1032:	df 92       	push	r13
    1034:	ef 92       	push	r14
    1036:	ff 92       	push	r15
    1038:	0f 93       	push	r16
    103a:	1f 93       	push	r17
    103c:	cf 93       	push	r28
    103e:	df 93       	push	r29
    1040:	ea 01       	movw	r28, r20
	long double k, last, arc, i;
	k = floorf((a11 - 2415021.076998695) / 29.530588853 + 0.5);
    1042:	24 eb       	ldi	r18, 0xB4	; 180
    1044:	36 e6       	ldi	r19, 0x66	; 102
    1046:	43 e1       	ldi	r20, 0x13	; 19
    1048:	5a e4       	ldi	r21, 0x4A	; 74
    104a:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
    104e:	25 ea       	ldi	r18, 0xA5	; 165
    1050:	3e e3       	ldi	r19, 0x3E	; 62
    1052:	4c ee       	ldi	r20, 0xEC	; 236
    1054:	51 e4       	ldi	r21, 0x41	; 65
    1056:	0e 94 0a 11 	call	0x2214	; 0x2214 <__divsf3>
    105a:	20 e0       	ldi	r18, 0x00	; 0
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	40 e0       	ldi	r20, 0x00	; 0
    1060:	5f e3       	ldi	r21, 0x3F	; 63
    1062:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
    1066:	0e 94 ef 11 	call	0x23de	; 0x23de <floor>
    106a:	4b 01       	movw	r8, r22
    106c:	5c 01       	movw	r10, r24
	last = 0;
	i = 1; // We start with the month following lunar month 11
	arc = getSunLongitude(getNewMoonDay(k+i, timeZone), timeZone);
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	40 e8       	ldi	r20, 0x80	; 128
    1074:	5f e3       	ldi	r21, 0x3F	; 63
    1076:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
    107a:	ae 01       	movw	r20, r28
    107c:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <getNewMoonDay>
    1080:	ae 01       	movw	r20, r28
    1082:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <getSunLongitude>
    1086:	56 2e       	mov	r5, r22
    1088:	47 2e       	mov	r4, r23
    108a:	38 2e       	mov	r3, r24
    108c:	29 2e       	mov	r2, r25
double getLeapMonthOffset(long double a11, int timeZone)
{
	long double k, last, arc, i;
	k = floorf((a11 - 2415021.076998695) / 29.530588853 + 0.5);
	last = 0;
	i = 1; // We start with the month following lunar month 11
    108e:	0f 2e       	mov	r0, r31
    1090:	c1 2c       	mov	r12, r1
    1092:	d1 2c       	mov	r13, r1
    1094:	f0 e8       	ldi	r31, 0x80	; 128
    1096:	ef 2e       	mov	r14, r31
    1098:	ff e3       	ldi	r31, 0x3F	; 63
    109a:	ff 2e       	mov	r15, r31
    109c:	f0 2d       	mov	r31, r0
	arc = getSunLongitude(getNewMoonDay(k+i, timeZone), timeZone);
	do {
		last = arc;
		i++;
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	40 e8       	ldi	r20, 0x80	; 128
    10a4:	5f e3       	ldi	r21, 0x3F	; 63
    10a6:	c7 01       	movw	r24, r14
    10a8:	b6 01       	movw	r22, r12
    10aa:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
    10ae:	6b 01       	movw	r12, r22
    10b0:	7c 01       	movw	r14, r24
		arc = getSunLongitude(getNewMoonDay(k+i, timeZone), timeZone);
    10b2:	9b 01       	movw	r18, r22
    10b4:	ac 01       	movw	r20, r24
    10b6:	c5 01       	movw	r24, r10
    10b8:	b4 01       	movw	r22, r8
    10ba:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
    10be:	ae 01       	movw	r20, r28
    10c0:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <getNewMoonDay>
    10c4:	ae 01       	movw	r20, r28
    10c6:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <getSunLongitude>
    10ca:	16 2f       	mov	r17, r22
    10cc:	07 2f       	mov	r16, r23
    10ce:	78 2e       	mov	r7, r24
    10d0:	69 2e       	mov	r6, r25
	} while (arc != last && i < 14);
    10d2:	26 2f       	mov	r18, r22
    10d4:	37 2f       	mov	r19, r23
    10d6:	48 2f       	mov	r20, r24
    10d8:	59 2f       	mov	r21, r25
    10da:	65 2d       	mov	r22, r5
    10dc:	74 2d       	mov	r23, r4
    10de:	83 2d       	mov	r24, r3
    10e0:	92 2d       	mov	r25, r2
    10e2:	0e 94 05 11 	call	0x220a	; 0x220a <__cmpsf2>
    10e6:	88 23       	and	r24, r24
    10e8:	71 f0       	breq	.+28     	; 0x1106 <getLeapMonthOffset+0xea>
	i = 1; // We start with the month following lunar month 11
	arc = getSunLongitude(getNewMoonDay(k+i, timeZone), timeZone);
	do {
		last = arc;
		i++;
		arc = getSunLongitude(getNewMoonDay(k+i, timeZone), timeZone);
    10ea:	51 2e       	mov	r5, r17
    10ec:	40 2e       	mov	r4, r16
    10ee:	37 2c       	mov	r3, r7
    10f0:	26 2c       	mov	r2, r6
	} while (arc != last && i < 14);
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	40 e6       	ldi	r20, 0x60	; 96
    10f8:	51 e4       	ldi	r21, 0x41	; 65
    10fa:	c7 01       	movw	r24, r14
    10fc:	b6 01       	movw	r22, r12
    10fe:	0e 94 05 11 	call	0x220a	; 0x220a <__cmpsf2>
    1102:	88 23       	and	r24, r24
    1104:	64 f2       	brlt	.-104    	; 0x109e <getLeapMonthOffset+0x82>
	return i-1;
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	40 e8       	ldi	r20, 0x80	; 128
    110c:	5f e3       	ldi	r21, 0x3F	; 63
    110e:	c7 01       	movw	r24, r14
    1110:	b6 01       	movw	r22, r12
    1112:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
}
    1116:	df 91       	pop	r29
    1118:	cf 91       	pop	r28
    111a:	1f 91       	pop	r17
    111c:	0f 91       	pop	r16
    111e:	ff 90       	pop	r15
    1120:	ef 90       	pop	r14
    1122:	df 90       	pop	r13
    1124:	cf 90       	pop	r12
    1126:	bf 90       	pop	r11
    1128:	af 90       	pop	r10
    112a:	9f 90       	pop	r9
    112c:	8f 90       	pop	r8
    112e:	7f 90       	pop	r7
    1130:	6f 90       	pop	r6
    1132:	5f 90       	pop	r5
    1134:	4f 90       	pop	r4
    1136:	3f 90       	pop	r3
    1138:	2f 90       	pop	r2
    113a:	08 95       	ret

0000113c <convertSolar2Lunar>:

double convertSolar2Lunar(uint8_t dd, uint8_t mm, uint16_t yy, int timeZone)
{
    113c:	2f 92       	push	r2
    113e:	3f 92       	push	r3
    1140:	4f 92       	push	r4
    1142:	5f 92       	push	r5
    1144:	6f 92       	push	r6
    1146:	7f 92       	push	r7
    1148:	8f 92       	push	r8
    114a:	9f 92       	push	r9
    114c:	af 92       	push	r10
    114e:	bf 92       	push	r11
    1150:	cf 92       	push	r12
    1152:	df 92       	push	r13
    1154:	ef 92       	push	r14
    1156:	ff 92       	push	r15
    1158:	0f 93       	push	r16
    115a:	1f 93       	push	r17
    115c:	cf 93       	push	r28
    115e:	df 93       	push	r29
    1160:	ea 01       	movw	r28, r20
    1162:	19 01       	movw	r2, r18
	long double k, dayNumber, monthStart, a11, b11, diff, leapMonthDiff;
	dayNumber = jdFromDate(dd, mm, yy);
    1164:	0e 94 04 02 	call	0x408	; 0x408 <jdFromDate>
    1168:	4b 01       	movw	r8, r22
    116a:	5c 01       	movw	r10, r24
	k = floorf((dayNumber - 2415021.076998695) / 29.530588853);
    116c:	24 eb       	ldi	r18, 0xB4	; 180
    116e:	36 e6       	ldi	r19, 0x66	; 102
    1170:	43 e1       	ldi	r20, 0x13	; 19
    1172:	5a e4       	ldi	r21, 0x4A	; 74
    1174:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
    1178:	25 ea       	ldi	r18, 0xA5	; 165
    117a:	3e e3       	ldi	r19, 0x3E	; 62
    117c:	4c ee       	ldi	r20, 0xEC	; 236
    117e:	51 e4       	ldi	r21, 0x41	; 65
    1180:	0e 94 0a 11 	call	0x2214	; 0x2214 <__divsf3>
    1184:	0e 94 ef 11 	call	0x23de	; 0x23de <floor>
    1188:	2b 01       	movw	r4, r22
    118a:	3c 01       	movw	r6, r24
	monthStart = getNewMoonDay(k+1, timeZone);
    118c:	20 e0       	ldi	r18, 0x00	; 0
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	40 e8       	ldi	r20, 0x80	; 128
    1192:	5f e3       	ldi	r21, 0x3F	; 63
    1194:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
    1198:	a1 01       	movw	r20, r2
    119a:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <getNewMoonDay>
    119e:	6b 01       	movw	r12, r22
    11a0:	7c 01       	movw	r14, r24
	if (monthStart > dayNumber) {
    11a2:	9b 01       	movw	r18, r22
    11a4:	ac 01       	movw	r20, r24
    11a6:	c5 01       	movw	r24, r10
    11a8:	b4 01       	movw	r22, r8
    11aa:	0e 94 05 11 	call	0x220a	; 0x220a <__cmpsf2>
    11ae:	88 23       	and	r24, r24
    11b0:	3c f4       	brge	.+14     	; 0x11c0 <convertSolar2Lunar+0x84>
		monthStart = getNewMoonDay(k, timeZone);
    11b2:	a1 01       	movw	r20, r2
    11b4:	c3 01       	movw	r24, r6
    11b6:	b2 01       	movw	r22, r4
    11b8:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <getNewMoonDay>
    11bc:	6b 01       	movw	r12, r22
    11be:	7c 01       	movw	r14, r24
	}
	a11 = getLunarMonth11(yy, timeZone);
    11c0:	b1 01       	movw	r22, r2
    11c2:	ce 01       	movw	r24, r28
    11c4:	0e 94 c4 07 	call	0xf88	; 0xf88 <getLunarMonth11>
    11c8:	16 2f       	mov	r17, r22
    11ca:	07 2f       	mov	r16, r23
    11cc:	78 2e       	mov	r7, r24
    11ce:	69 2e       	mov	r6, r25
	b11 = a11;
	if (a11 >= monthStart) {
    11d0:	26 2f       	mov	r18, r22
    11d2:	37 2f       	mov	r19, r23
    11d4:	48 2f       	mov	r20, r24
    11d6:	59 2f       	mov	r21, r25
    11d8:	c7 01       	movw	r24, r14
    11da:	b6 01       	movw	r22, r12
    11dc:	0e 94 05 11 	call	0x220a	; 0x220a <__cmpsf2>
    11e0:	18 16       	cp	r1, r24
    11e2:	94 f0       	brlt	.+36     	; 0x1208 <convertSolar2Lunar+0xcc>
		lunarYear = yy;
    11e4:	d0 93 95 00 	sts	0x0095, r29	; 0x800095 <lunarYear+0x1>
    11e8:	c0 93 94 00 	sts	0x0094, r28	; 0x800094 <lunarYear>
		a11 = getLunarMonth11(yy-1, timeZone);
    11ec:	b1 01       	movw	r22, r2
    11ee:	ce 01       	movw	r24, r28
    11f0:	01 97       	sbiw	r24, 0x01	; 1
    11f2:	0e 94 c4 07 	call	0xf88	; 0xf88 <getLunarMonth11>
	monthStart = getNewMoonDay(k+1, timeZone);
	if (monthStart > dayNumber) {
		monthStart = getNewMoonDay(k, timeZone);
	}
	a11 = getLunarMonth11(yy, timeZone);
	b11 = a11;
    11f6:	c1 2f       	mov	r28, r17
    11f8:	d0 2f       	mov	r29, r16
    11fa:	57 2c       	mov	r5, r7
    11fc:	46 2c       	mov	r4, r6
	if (a11 >= monthStart) {
		lunarYear = yy;
		a11 = getLunarMonth11(yy-1, timeZone);
    11fe:	16 2f       	mov	r17, r22
    1200:	07 2f       	mov	r16, r23
    1202:	78 2e       	mov	r7, r24
    1204:	69 2e       	mov	r6, r25
    1206:	0d c0       	rjmp	.+26     	; 0x1222 <convertSolar2Lunar+0xe6>
		} else {
		lunarYear = yy+1;
    1208:	ce 01       	movw	r24, r28
    120a:	01 96       	adiw	r24, 0x01	; 1
    120c:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <lunarYear+0x1>
    1210:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <lunarYear>
		b11 = getLunarMonth11(yy+1, timeZone);
    1214:	b1 01       	movw	r22, r2
    1216:	0e 94 c4 07 	call	0xf88	; 0xf88 <getLunarMonth11>
    121a:	c6 2f       	mov	r28, r22
    121c:	d7 2f       	mov	r29, r23
    121e:	58 2e       	mov	r5, r24
    1220:	49 2e       	mov	r4, r25
	}
	lunarDate = dayNumber-monthStart+1;
    1222:	a7 01       	movw	r20, r14
    1224:	96 01       	movw	r18, r12
    1226:	c5 01       	movw	r24, r10
    1228:	b4 01       	movw	r22, r8
    122a:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	40 e8       	ldi	r20, 0x80	; 128
    1234:	5f e3       	ldi	r21, 0x3F	; 63
    1236:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
    123a:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__fixsfsi>
    123e:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <lunarDate+0x1>
    1242:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <lunarDate>
	diff = floorf((monthStart - a11)/29);
    1246:	21 2f       	mov	r18, r17
    1248:	30 2f       	mov	r19, r16
    124a:	47 2d       	mov	r20, r7
    124c:	56 2d       	mov	r21, r6
    124e:	c7 01       	movw	r24, r14
    1250:	b6 01       	movw	r22, r12
    1252:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	48 ee       	ldi	r20, 0xE8	; 232
    125c:	51 e4       	ldi	r21, 0x41	; 65
    125e:	0e 94 0a 11 	call	0x2214	; 0x2214 <__divsf3>
    1262:	0e 94 ef 11 	call	0x23de	; 0x23de <floor>
    1266:	6b 01       	movw	r12, r22
    1268:	7c 01       	movw	r14, r24
	lunarMonth = diff+11;
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	40 e3       	ldi	r20, 0x30	; 48
    1270:	51 e4       	ldi	r21, 0x41	; 65
    1272:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
    1276:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__fixsfsi>
    127a:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <lunarMonth+0x1>
    127e:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <lunarMonth>
	if (b11 - a11 > 365) {
    1282:	21 2f       	mov	r18, r17
    1284:	30 2f       	mov	r19, r16
    1286:	47 2d       	mov	r20, r7
    1288:	56 2d       	mov	r21, r6
    128a:	6c 2f       	mov	r22, r28
    128c:	7d 2f       	mov	r23, r29
    128e:	85 2d       	mov	r24, r5
    1290:	94 2d       	mov	r25, r4
    1292:	0e 94 98 10 	call	0x2130	; 0x2130 <__subsf3>
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e8       	ldi	r19, 0x80	; 128
    129a:	46 eb       	ldi	r20, 0xB6	; 182
    129c:	53 e4       	ldi	r21, 0x43	; 67
    129e:	0e 94 bc 12 	call	0x2578	; 0x2578 <__gesf2>
    12a2:	18 16       	cp	r1, r24
    12a4:	ec f4       	brge	.+58     	; 0x12e0 <convertSolar2Lunar+0x1a4>
		leapMonthDiff = getLeapMonthOffset(a11, timeZone);
    12a6:	a1 01       	movw	r20, r2
    12a8:	61 2f       	mov	r22, r17
    12aa:	70 2f       	mov	r23, r16
    12ac:	87 2d       	mov	r24, r7
    12ae:	96 2d       	mov	r25, r6
    12b0:	0e 94 0e 08 	call	0x101c	; 0x101c <getLeapMonthOffset>
    12b4:	9b 01       	movw	r18, r22
    12b6:	ac 01       	movw	r20, r24
		if (diff >= leapMonthDiff) {
    12b8:	c7 01       	movw	r24, r14
    12ba:	b6 01       	movw	r22, r12
    12bc:	0e 94 bc 12 	call	0x2578	; 0x2578 <__gesf2>
    12c0:	88 23       	and	r24, r24
    12c2:	74 f0       	brlt	.+28     	; 0x12e0 <convertSolar2Lunar+0x1a4>
			lunarMonth = diff + 10;
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	40 e2       	ldi	r20, 0x20	; 32
    12ca:	51 e4       	ldi	r21, 0x41	; 65
    12cc:	c7 01       	movw	r24, r14
    12ce:	b6 01       	movw	r22, r12
    12d0:	0e 94 99 10 	call	0x2132	; 0x2132 <__addsf3>
    12d4:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__fixsfsi>
    12d8:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <lunarMonth+0x1>
    12dc:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <lunarMonth>
// 			if (diff == leapMonthDiff) {
// 				lunarLeap = 1;
// 			}
		}
	}
	if (lunarMonth > 12) {
    12e0:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <lunarMonth>
    12e4:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <lunarMonth+0x1>
    12e8:	0d 97       	sbiw	r24, 0x0d	; 13
    12ea:	4c f0       	brlt	.+18     	; 0x12fe <convertSolar2Lunar+0x1c2>
		lunarMonth = lunarMonth - 12;
    12ec:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <lunarMonth>
    12f0:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <lunarMonth+0x1>
    12f4:	0c 97       	sbiw	r24, 0x0c	; 12
    12f6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <lunarMonth+0x1>
    12fa:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <lunarMonth>
	}
	if (lunarMonth >= 11 && diff < 4) {
    12fe:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <lunarMonth>
    1302:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <lunarMonth+0x1>
    1306:	0b 97       	sbiw	r24, 0x0b	; 11
    1308:	9c f0       	brlt	.+38     	; 0x1330 <convertSolar2Lunar+0x1f4>
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e8       	ldi	r20, 0x80	; 128
    1310:	50 e4       	ldi	r21, 0x40	; 64
    1312:	c7 01       	movw	r24, r14
    1314:	b6 01       	movw	r22, r12
    1316:	0e 94 05 11 	call	0x220a	; 0x220a <__cmpsf2>
    131a:	88 23       	and	r24, r24
    131c:	4c f4       	brge	.+18     	; 0x1330 <convertSolar2Lunar+0x1f4>
		lunarYear -= 1;
    131e:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <lunarYear>
    1322:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <lunarYear+0x1>
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <lunarYear+0x1>
    132c:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <lunarYear>
	}
}
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	1f 91       	pop	r17
    1336:	0f 91       	pop	r16
    1338:	ff 90       	pop	r15
    133a:	ef 90       	pop	r14
    133c:	df 90       	pop	r13
    133e:	cf 90       	pop	r12
    1340:	bf 90       	pop	r11
    1342:	af 90       	pop	r10
    1344:	9f 90       	pop	r9
    1346:	8f 90       	pop	r8
    1348:	7f 90       	pop	r7
    134a:	6f 90       	pop	r6
    134c:	5f 90       	pop	r5
    134e:	4f 90       	pop	r4
    1350:	3f 90       	pop	r3
    1352:	2f 90       	pop	r2
    1354:	08 95       	ret

00001356 <spiSendByte>:
char digitsInUse = 8;

void spiSendByte (char databyte)
{
	// Copy data into the SPI data register
	SPDR = databyte;
    1356:	8f b9       	out	0x0f, r24	; 15
	// Wait until transfer is complete
	while (!(SPSR & (1 << SPIF)));
    1358:	77 9b       	sbis	0x0e, 7	; 14
    135a:	fe cf       	rjmp	.-4      	; 0x1358 <spiSendByte+0x2>
}
    135c:	08 95       	ret

0000135e <MAX7219_writeData>:

void MAX7219_writeData(uint8_t data_register, uint8_t data)
{
    135e:	cf 93       	push	r28
    1360:	c6 2f       	mov	r28, r22
	MAX7219_LOAD0;
    1362:	98 b3       	in	r25, 0x18	; 24
    1364:	9f 7e       	andi	r25, 0xEF	; 239
    1366:	98 bb       	out	0x18, r25	; 24
	// Send the register where the data will be stored
	spiSendByte(data_register);
    1368:	0e 94 ab 09 	call	0x1356	; 0x1356 <spiSendByte>
	// Send the data to be stored
	spiSendByte(data);
    136c:	8c 2f       	mov	r24, r28
    136e:	0e 94 ab 09 	call	0x1356	; 0x1356 <spiSendByte>
	MAX7219_LOAD1;
    1372:	88 b3       	in	r24, 0x18	; 24
    1374:	80 61       	ori	r24, 0x10	; 16
    1376:	88 bb       	out	0x18, r24	; 24
}
    1378:	cf 91       	pop	r28
    137a:	08 95       	ret

0000137c <MAX7219_clearDisplay>:

void MAX7219_clearDisplay()
{
    137c:	cf 93       	push	r28
	char i = digitsInUse;
    137e:	c0 91 60 00 	lds	r28, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
	// Loop until 0, but don't run for zero
	do {
		// Set each display in use to blank
		MAX7219_writeData(i, MAX7219_CHAR_BLANK);
    1382:	6f e0       	ldi	r22, 0x0F	; 15
    1384:	8c 2f       	mov	r24, r28
    1386:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
	} while (--i);
    138a:	c1 50       	subi	r28, 0x01	; 1
    138c:	d1 f7       	brne	.-12     	; 0x1382 <MAX7219_clearDisplay+0x6>
}
    138e:	cf 91       	pop	r28
    1390:	08 95       	ret

00001392 <Display_7seg>:
	Month	= BCDToDec(tData[5]);
	Year	= BCDToDec(tData[6]);
}


void Display_7seg (void){
    1392:	0f 93       	push	r16
    1394:	1f 93       	push	r17
    1396:	cf 93       	push	r28
    1398:	df 93       	push	r29
	/********display time -> hh:mm:ss***************/
	
	if (SW_time_date == 0)
    139a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    139e:	81 11       	cpse	r24, r1
    13a0:	61 c0       	rjmp	.+194    	; 0x1464 <Display_7seg+0xd2>
	{
		MAX7219_clearDisplay();
    13a2:	0e 94 be 09 	call	0x137c	; 0x137c <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT7,(Minute%10));
    13a6:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
    13aa:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
    13ae:	ca e0       	ldi	r28, 0x0A	; 10
    13b0:	d0 e0       	ldi	r29, 0x00	; 0
    13b2:	be 01       	movw	r22, r28
    13b4:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    13b8:	bc 01       	movw	r22, r24
    13ba:	88 e0       	ldi	r24, 0x08	; 8
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT6,(Minute/10));
    13c2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
    13c6:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
    13ca:	be 01       	movw	r22, r28
    13cc:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    13d0:	87 e0       	ldi	r24, 0x07	; 7
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT5,(Hour%10));
    13d8:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
    13dc:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
    13e0:	be 01       	movw	r22, r28
    13e2:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    13e6:	bc 01       	movw	r22, r24
    13e8:	86 e0       	ldi	r24, 0x06	; 6
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT4,(Hour/10));
    13f0:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
    13f4:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
    13f8:	be 01       	movw	r22, r28
    13fa:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    13fe:	85 e0       	ldi	r24, 0x05	; 5
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT3,(Month%10));
    1406:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    140a:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    140e:	be 01       	movw	r22, r28
    1410:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1414:	bc 01       	movw	r22, r24
    1416:	84 e0       	ldi	r24, 0x04	; 4
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT2,(Month/10));
    141e:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    1422:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    1426:	be 01       	movw	r22, r28
    1428:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    142c:	83 e0       	ldi	r24, 0x03	; 3
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT1,(Date%10));
    1434:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    1438:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    143c:	be 01       	movw	r22, r28
    143e:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1442:	bc 01       	movw	r22, r24
    1444:	82 e0       	ldi	r24, 0x02	; 2
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT0,(Date/10));
    144c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    1450:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    1454:	be 01       	movw	r22, r28
    1456:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
    1462:	28 c1       	rjmp	.+592    	; 0x16b4 <Display_7seg+0x322>
		
	}
	/********display date -> DD:MM:YY***************/
	else if (SW_time_date == 1)
    1464:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1468:	81 30       	cpi	r24, 0x01	; 1
    146a:	09 f0       	breq	.+2      	; 0x146e <Display_7seg+0xdc>
    146c:	76 c0       	rjmp	.+236    	; 0x155a <Display_7seg+0x1c8>
	{
		MAX7219_clearDisplay();
    146e:	0e 94 be 09 	call	0x137c	; 0x137c <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT7,((yyyy%1000)%10));
    1472:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <yyyy>
    1476:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <yyyy+0x1>
    147a:	08 ee       	ldi	r16, 0xE8	; 232
    147c:	13 e0       	ldi	r17, 0x03	; 3
    147e:	b8 01       	movw	r22, r16
    1480:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1484:	ca e0       	ldi	r28, 0x0A	; 10
    1486:	d0 e0       	ldi	r29, 0x00	; 0
    1488:	be 01       	movw	r22, r28
    148a:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    148e:	bc 01       	movw	r22, r24
    1490:	88 e0       	ldi	r24, 0x08	; 8
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT6,(((yyyy%1000)/10)%10));
    1498:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <yyyy>
    149c:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <yyyy+0x1>
    14a0:	b8 01       	movw	r22, r16
    14a2:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    14a6:	be 01       	movw	r22, r28
    14a8:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    14ac:	cb 01       	movw	r24, r22
    14ae:	be 01       	movw	r22, r28
    14b0:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    14b4:	bc 01       	movw	r22, r24
    14b6:	87 e0       	ldi	r24, 0x07	; 7
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT5,(((yyyy%1000)/100)%10));
    14be:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <yyyy>
    14c2:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <yyyy+0x1>
    14c6:	b8 01       	movw	r22, r16
    14c8:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    14cc:	64 e6       	ldi	r22, 0x64	; 100
    14ce:	70 e0       	ldi	r23, 0x00	; 0
    14d0:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    14d4:	cb 01       	movw	r24, r22
    14d6:	be 01       	movw	r22, r28
    14d8:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    14dc:	bc 01       	movw	r22, r24
    14de:	86 e0       	ldi	r24, 0x06	; 6
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT4,(yyyy/1000));
    14e6:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <yyyy>
    14ea:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <yyyy+0x1>
    14ee:	b8 01       	movw	r22, r16
    14f0:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    14f4:	85 e0       	ldi	r24, 0x05	; 5
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT3,(Month%10));
    14fc:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    1500:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    1504:	be 01       	movw	r22, r28
    1506:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    150a:	bc 01       	movw	r22, r24
    150c:	84 e0       	ldi	r24, 0x04	; 4
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT2,(Month/10));
    1514:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    1518:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    151c:	be 01       	movw	r22, r28
    151e:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1522:	83 e0       	ldi	r24, 0x03	; 3
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT1,(Date%10));
    152a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    152e:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    1532:	be 01       	movw	r22, r28
    1534:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1538:	bc 01       	movw	r22, r24
    153a:	82 e0       	ldi	r24, 0x02	; 2
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT0,(Date/10));
    1542:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    1546:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    154a:	be 01       	movw	r22, r28
    154c:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
    1558:	ad c0       	rjmp	.+346    	; 0x16b4 <Display_7seg+0x322>
		
	}
	/********display AM LICH *********************/
	else if (SW_time_date==2)
    155a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    155e:	82 30       	cpi	r24, 0x02	; 2
    1560:	09 f0       	breq	.+2      	; 0x1564 <Display_7seg+0x1d2>
    1562:	76 c0       	rjmp	.+236    	; 0x1650 <Display_7seg+0x2be>
	{
		MAX7219_clearDisplay();
    1564:	0e 94 be 09 	call	0x137c	; 0x137c <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT7,((lunarYear%1000)%10));
    1568:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <lunarYear>
    156c:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <lunarYear+0x1>
    1570:	08 ee       	ldi	r16, 0xE8	; 232
    1572:	13 e0       	ldi	r17, 0x03	; 3
    1574:	b8 01       	movw	r22, r16
    1576:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    157a:	ca e0       	ldi	r28, 0x0A	; 10
    157c:	d0 e0       	ldi	r29, 0x00	; 0
    157e:	be 01       	movw	r22, r28
    1580:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1584:	bc 01       	movw	r22, r24
    1586:	88 e0       	ldi	r24, 0x08	; 8
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT6,(((lunarYear%1000)/10)%10));
    158e:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <lunarYear>
    1592:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <lunarYear+0x1>
    1596:	b8 01       	movw	r22, r16
    1598:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    159c:	be 01       	movw	r22, r28
    159e:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    15a2:	cb 01       	movw	r24, r22
    15a4:	be 01       	movw	r22, r28
    15a6:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    15aa:	bc 01       	movw	r22, r24
    15ac:	87 e0       	ldi	r24, 0x07	; 7
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT5,(((lunarYear%1000)/100)%10));
    15b4:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <lunarYear>
    15b8:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <lunarYear+0x1>
    15bc:	b8 01       	movw	r22, r16
    15be:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    15c2:	64 e6       	ldi	r22, 0x64	; 100
    15c4:	70 e0       	ldi	r23, 0x00	; 0
    15c6:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    15ca:	cb 01       	movw	r24, r22
    15cc:	be 01       	movw	r22, r28
    15ce:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    15d2:	bc 01       	movw	r22, r24
    15d4:	86 e0       	ldi	r24, 0x06	; 6
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT4,(lunarYear/1000));
    15dc:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <lunarYear>
    15e0:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <lunarYear+0x1>
    15e4:	b8 01       	movw	r22, r16
    15e6:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    15ea:	85 e0       	ldi	r24, 0x05	; 5
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT3,(lunarMonth%10));
    15f2:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <lunarMonth>
    15f6:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <lunarMonth+0x1>
    15fa:	be 01       	movw	r22, r28
    15fc:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1600:	bc 01       	movw	r22, r24
    1602:	84 e0       	ldi	r24, 0x04	; 4
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT2,(lunarMonth/10));
    160a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <lunarMonth>
    160e:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <lunarMonth+0x1>
    1612:	be 01       	movw	r22, r28
    1614:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1618:	83 e0       	ldi	r24, 0x03	; 3
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT1,(lunarDate%10));
    1620:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <lunarDate>
    1624:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <lunarDate+0x1>
    1628:	be 01       	movw	r22, r28
    162a:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    162e:	bc 01       	movw	r22, r24
    1630:	82 e0       	ldi	r24, 0x02	; 2
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT0,(lunarDate/10));
    1638:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <lunarDate>
    163c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <lunarDate+0x1>
    1640:	be 01       	movw	r22, r28
    1642:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
    164e:	32 c0       	rjmp	.+100    	; 0x16b4 <Display_7seg+0x322>
		
	}
	else
	{
		MAX7219_clearDisplay();
    1650:	0e 94 be 09 	call	0x137c	; 0x137c <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT7,(A_Minute%10));
    1654:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <A_Minute>
    1658:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <A_Minute+0x1>
    165c:	ca e0       	ldi	r28, 0x0A	; 10
    165e:	d0 e0       	ldi	r29, 0x00	; 0
    1660:	be 01       	movw	r22, r28
    1662:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1666:	bc 01       	movw	r22, r24
    1668:	88 e0       	ldi	r24, 0x08	; 8
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT6,(A_Minute/10));
    1670:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <A_Minute>
    1674:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <A_Minute+0x1>
    1678:	be 01       	movw	r22, r28
    167a:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    167e:	87 e0       	ldi	r24, 0x07	; 7
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT5,(A_Hour%10));
    1686:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <A_Hour>
    168a:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <A_Hour+0x1>
    168e:	be 01       	movw	r22, r28
    1690:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1694:	bc 01       	movw	r22, r24
    1696:	86 e0       	ldi	r24, 0x06	; 6
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT4,(A_Hour/10));
    169e:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <A_Hour>
    16a2:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <A_Hour+0x1>
    16a6:	be 01       	movw	r22, r28
    16a8:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    16ac:	85 e0       	ldi	r24, 0x05	; 5
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
	}

}
    16b4:	df 91       	pop	r29
    16b6:	cf 91       	pop	r28
    16b8:	1f 91       	pop	r17
    16ba:	0f 91       	pop	r16
    16bc:	08 95       	ret

000016be <Init_Timer0>:
	} while (--i);
}

void Init_Timer0(void){
	//Initialize Timer0 to 1s - overflow interrupt--------------------
    TCCR0=(1<<CS02)|(0<<CS01)|(1<<CS00);	//prescaler, clk/1024
    16be:	85 e0       	ldi	r24, 0x05	; 5
    16c0:	83 bf       	out	0x33, r24	; 51
	
    TIMSK=(1<<TOIE0);						
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	89 bf       	out	0x39, r24	; 57
    sei();                      			
    16c6:	78 94       	sei
    16c8:	08 95       	ret

000016ca <Init_interupt>:
// 	sei();
// 	//----------------------------------------------------------------
// }

void Init_interupt(void){
	MCUCR=(0<<ISC11)|(0<<ISC10)|(0<<ISC01)|(0<<ISC00);
    16ca:	15 be       	out	0x35, r1	; 53
	MCUCSR=(0<<ISC2);
    16cc:	14 be       	out	0x34, r1	; 52
	GICR=(1<<INT2)|(1<<INT1)|(1<<INT0);
    16ce:	80 ee       	ldi	r24, 0xE0	; 224
    16d0:	8b bf       	out	0x3b, r24	; 59
	sei();
    16d2:	78 94       	sei
    16d4:	08 95       	ret

000016d6 <main>:
//Main program
int main(void){	
	
	//MAX7219 init
	// SCK MOSI CS/LOAD/SS
	DDRB |= (1 << PIN_SCK) | (1 << PIN_MOSI) | (1 << PIN_SS);
    16d6:	87 b3       	in	r24, 0x17	; 23
    16d8:	80 6b       	ori	r24, 0xB0	; 176
    16da:	87 bb       	out	0x17, r24	; 23

	// SPI Enable, Master mode
	SPCR |= (1 << SPE) | (1 << MSTR)| (1<<SPR1);
    16dc:	8d b1       	in	r24, 0x0d	; 13
    16de:	82 65       	ori	r24, 0x52	; 82
    16e0:	8d b9       	out	0x0d, r24	; 13


	// Scan limit runs from 0.
	MAX7219_writeData(MAX7219_MODE_SCAN_LIMIT, 0x07);
    16e2:	67 e0       	ldi	r22, 0x07	; 7
    16e4:	8b e0       	ldi	r24, 0x0B	; 11
    16e6:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
	MAX7219_writeData(MAX7219_MODE_INTENSITY, 0x05);
    16ea:	65 e0       	ldi	r22, 0x05	; 5
    16ec:	8a e0       	ldi	r24, 0x0A	; 10
    16ee:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
	MAX7219_writeData(MAX7219_MODE_POWER, ON);
    16f2:	61 e0       	ldi	r22, 0x01	; 1
    16f4:	8c e0       	ldi	r24, 0x0C	; 12
    16f6:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
	MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
    16fa:	6f ef       	ldi	r22, 0xFF	; 255
    16fc:	89 e0       	ldi	r24, 0x09	; 9
    16fe:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
	
	//FixTime();
	Init_btn();// KEY_PORT=0xF8;
    1702:	0e 94 f7 01 	call	0x3ee	; 0x3ee <Init_btn>

	
	//------------------------------------
	Init_Timer0();
    1706:	0e 94 5f 0b 	call	0x16be	; 0x16be <Init_Timer0>
	//Init_Timer2();
	
	Init_interupt();
    170a:	0e 94 65 0b 	call	0x16ca	; 0x16ca <Init_interupt>
	
	TWI_Init(); 
    170e:	0e 94 58 00 	call	0xb0	; 0xb0 <TWI_Init>
			
	TWI_DS1307_rblock(tData,7); 
    1712:	67 e0       	ldi	r22, 0x07	; 7
    1714:	8d e8       	ldi	r24, 0x8D	; 141
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	0e 94 c3 00 	call	0x186	; 0x186 <TWI_DS1307_rblock>
	
	Decode(); 	//BCD data converter function from DS1307 to DEC
    171c:	0e 94 29 01 	call	0x252	; 0x252 <Decode>
    1720:	8f ec       	ldi	r24, 0xCF	; 207
    1722:	97 e0       	ldi	r25, 0x07	; 7
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	f1 f7       	brne	.-4      	; 0x1724 <main+0x4e>
    1728:	00 c0       	rjmp	.+0      	; 0x172a <main+0x54>
    172a:	00 00       	nop
	_delay_ms(1);	
	
	//************************************************************************************
	while(1){
		
		yyyy=Year+2000;
    172c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Year>
    1730:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <Year+0x1>
    1734:	80 53       	subi	r24, 0x30	; 48
    1736:	98 4f       	sbci	r25, 0xF8	; 248
    1738:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <yyyy+0x1>
    173c:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <yyyy>
		convertSolar2Lunar(Date, Month, yyyy, timeZone);	
    1740:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <timeZone>
    1744:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <timeZone+0x1>
    1748:	40 91 82 00 	lds	r20, 0x0082	; 0x800082 <yyyy>
    174c:	50 91 83 00 	lds	r21, 0x0083	; 0x800083 <yyyy+0x1>
    1750:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <Month>
    1754:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <Month+0x1>
    1758:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    175c:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    1760:	0e 94 9e 08 	call	0x113c	; 0x113c <convertSolar2Lunar>
		Display_7seg();
    1764:	0e 94 c9 09 	call	0x1392	; 0x1392 <Display_7seg>
		if (Hour == A_Hour && Minute == A_Minute && EN_alarm == true)
    1768:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <Hour>
    176c:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <Hour+0x1>
    1770:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <A_Hour>
    1774:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <A_Hour+0x1>
    1778:	28 17       	cp	r18, r24
    177a:	39 07       	cpc	r19, r25
    177c:	b9 f6       	brne	.-82     	; 0x172c <main+0x56>
    177e:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <Minute>
    1782:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <Minute+0x1>
    1786:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <A_Minute>
    178a:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <A_Minute+0x1>
    178e:	28 17       	cp	r18, r24
    1790:	39 07       	cpc	r19, r25
    1792:	61 f6       	brne	.-104    	; 0x172c <main+0x56>
    1794:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <EN_alarm>
    1798:	88 23       	and	r24, r24
    179a:	41 f2       	breq	.-112    	; 0x172c <main+0x56>
		{	
			
			Display_7seg();
    179c:	0e 94 c9 09 	call	0x1392	; 0x1392 <Display_7seg>
			BTN_PORTD |= (1<<BUZ_LED);
    17a0:	82 b3       	in	r24, 0x12	; 18
    17a2:	80 68       	ori	r24, 0x80	; 128
    17a4:	82 bb       	out	0x12, r24	; 18
    17a6:	c2 cf       	rjmp	.-124    	; 0x172c <main+0x56>

000017a8 <__vector_11>:
	return 0;
}

char data[5];

ISR(TIMER0_OVF_vect){ 	
    17a8:	1f 92       	push	r1
    17aa:	0f 92       	push	r0
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	0f 92       	push	r0
    17b0:	11 24       	eor	r1, r1
    17b2:	0f 93       	push	r16
    17b4:	1f 93       	push	r17
    17b6:	2f 93       	push	r18
    17b8:	3f 93       	push	r19
    17ba:	4f 93       	push	r20
    17bc:	5f 93       	push	r21
    17be:	6f 93       	push	r22
    17c0:	7f 93       	push	r23
    17c2:	8f 93       	push	r24
    17c4:	9f 93       	push	r25
    17c6:	af 93       	push	r26
    17c8:	bf 93       	push	r27
    17ca:	cf 93       	push	r28
    17cc:	df 93       	push	r29
    17ce:	ef 93       	push	r30
    17d0:	ff 93       	push	r31
	Time_count++;
    17d2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <Time_count>
    17d6:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <Time_count+0x1>
    17da:	01 96       	adiw	r24, 0x01	; 1
    17dc:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <Time_count+0x1>
    17e0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <Time_count>
	blink_count++;
    17e4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <blink_count>
    17e8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <blink_count+0x1>
    17ec:	01 96       	adiw	r24, 0x01	; 1
    17ee:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <blink_count+0x1>
    17f2:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <blink_count>
	if(Time_count>=10){ 	//1s Exactly
    17f6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <Time_count>
    17fa:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <Time_count+0x1>
    17fe:	0a 97       	sbiw	r24, 0x0a	; 10
    1800:	28 f1       	brcs	.+74     	; 0x184c <__vector_11+0xa4>
		                
		if(set == false ){
    1802:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <set>
    1806:	81 11       	cpse	r24, r1
    1808:	1d c0       	rjmp	.+58     	; 0x1844 <__vector_11+0x9c>
			//Read DS1307
			TWI_DS1307_wadr(0x00); 				
    180a:	0e 94 5e 00 	call	0xbc	; 0xbc <TWI_DS1307_wadr>
    180e:	8f ec       	ldi	r24, 0xCF	; 207
    1810:	97 e0       	ldi	r25, 0x07	; 7
    1812:	01 97       	sbiw	r24, 0x01	; 1
    1814:	f1 f7       	brne	.-4      	; 0x1812 <__vector_11+0x6a>
    1816:	00 c0       	rjmp	.+0      	; 0x1818 <__vector_11+0x70>
    1818:	00 00       	nop
			_delay_ms(1);		   				
			TWI_DS1307_rblock(tData,7); 
    181a:	67 e0       	ldi	r22, 0x07	; 7
    181c:	8d e8       	ldi	r24, 0x8D	; 141
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	0e 94 c3 00 	call	0x186	; 0x186 <TWI_DS1307_rblock>
					
			//Print result on LCD + 7Seg led		
			if(BCDToDec(tData[0]) !=Second){ 
    1824:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <tData>
    1828:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	20 91 71 00 	lds	r18, 0x0071	; 0x800071 <Second>
    1832:	30 91 72 00 	lds	r19, 0x0072	; 0x800072 <Second+0x1>
    1836:	82 17       	cp	r24, r18
    1838:	93 07       	cpc	r25, r19
    183a:	21 f0       	breq	.+8      	; 0x1844 <__vector_11+0x9c>
				Decode();			
    183c:	0e 94 29 01 	call	0x252	; 0x252 <Decode>
				Display_7seg();
    1840:	0e 94 c9 09 	call	0x1392	; 0x1392 <Display_7seg>
			} 
		}
		Time_count=0; 
    1844:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <Time_count+0x1>
    1848:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <Time_count>
	}
	if (blink_count>=30)	//blink 500ms
    184c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <blink_count>
    1850:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <blink_count+0x1>
    1854:	4e 97       	sbiw	r24, 0x1e	; 30
    1856:	08 f4       	brcc	.+2      	; 0x185a <__vector_11+0xb2>
    1858:	48 c2       	rjmp	.+1168   	; 0x1cea <__vector_11+0x542>
	{
		if ((blink_count>15)&&(count==1)&&(SW_time_date==0))	//blink hour
    185a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <blink_count>
    185e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <blink_count+0x1>
    1862:	40 97       	sbiw	r24, 0x10	; 16
    1864:	08 f4       	brcc	.+2      	; 0x1868 <__vector_11+0xc0>
    1866:	54 c0       	rjmp	.+168    	; 0x1910 <__vector_11+0x168>
    1868:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    186c:	81 30       	cpi	r24, 0x01	; 1
    186e:	09 f0       	breq	.+2      	; 0x1872 <__vector_11+0xca>
    1870:	4f c0       	rjmp	.+158    	; 0x1910 <__vector_11+0x168>
    1872:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1876:	81 11       	cpse	r24, r1
    1878:	4b c0       	rjmp	.+150    	; 0x1910 <__vector_11+0x168>
		{
			MAX7219_clearDisplay();
    187a:	0e 94 be 09 	call	0x137c	; 0x137c <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,(Minute%10));
    187e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
    1882:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
    1886:	ca e0       	ldi	r28, 0x0A	; 10
    1888:	d0 e0       	ldi	r29, 0x00	; 0
    188a:	be 01       	movw	r22, r28
    188c:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1890:	68 2f       	mov	r22, r24
    1892:	88 e0       	ldi	r24, 0x08	; 8
    1894:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,(Minute/10));
    1898:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
    189c:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
    18a0:	be 01       	movw	r22, r28
    18a2:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    18a6:	87 e0       	ldi	r24, 0x07	; 7
    18a8:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,MAX7219_CHAR_BLANK);
    18ac:	6f e0       	ldi	r22, 0x0F	; 15
    18ae:	86 e0       	ldi	r24, 0x06	; 6
    18b0:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,MAX7219_CHAR_BLANK);
    18b4:	6f e0       	ldi	r22, 0x0F	; 15
    18b6:	85 e0       	ldi	r24, 0x05	; 5
    18b8:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,(Month%10));
    18bc:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    18c0:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    18c4:	be 01       	movw	r22, r28
    18c6:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    18ca:	68 2f       	mov	r22, r24
    18cc:	84 e0       	ldi	r24, 0x04	; 4
    18ce:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,(Month/10));
    18d2:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    18d6:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    18da:	be 01       	movw	r22, r28
    18dc:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    18e0:	83 e0       	ldi	r24, 0x03	; 3
    18e2:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,(Date%10));
    18e6:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    18ea:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    18ee:	be 01       	movw	r22, r28
    18f0:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    18f4:	68 2f       	mov	r22, r24
    18f6:	82 e0       	ldi	r24, 0x02	; 2
    18f8:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,(Date/10));
    18fc:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    1900:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    1904:	be 01       	movw	r22, r28
    1906:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
		}
		if ((blink_count>15)&&(count==2)&&(SW_time_date==0))	//blink min
    1910:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <blink_count>
    1914:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <blink_count+0x1>
    1918:	40 97       	sbiw	r24, 0x10	; 16
    191a:	08 f4       	brcc	.+2      	; 0x191e <__vector_11+0x176>
    191c:	54 c0       	rjmp	.+168    	; 0x19c6 <__vector_11+0x21e>
    191e:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1922:	82 30       	cpi	r24, 0x02	; 2
    1924:	09 f0       	breq	.+2      	; 0x1928 <__vector_11+0x180>
    1926:	4f c0       	rjmp	.+158    	; 0x19c6 <__vector_11+0x21e>
    1928:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    192c:	81 11       	cpse	r24, r1
    192e:	4b c0       	rjmp	.+150    	; 0x19c6 <__vector_11+0x21e>
		{
			MAX7219_clearDisplay();
    1930:	0e 94 be 09 	call	0x137c	; 0x137c <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,MAX7219_CHAR_BLANK);
    1934:	6f e0       	ldi	r22, 0x0F	; 15
    1936:	88 e0       	ldi	r24, 0x08	; 8
    1938:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,MAX7219_CHAR_BLANK);
    193c:	6f e0       	ldi	r22, 0x0F	; 15
    193e:	87 e0       	ldi	r24, 0x07	; 7
    1940:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,(Hour%10));
    1944:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
    1948:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
    194c:	ca e0       	ldi	r28, 0x0A	; 10
    194e:	d0 e0       	ldi	r29, 0x00	; 0
    1950:	be 01       	movw	r22, r28
    1952:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1956:	68 2f       	mov	r22, r24
    1958:	86 e0       	ldi	r24, 0x06	; 6
    195a:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,(Hour/10));
    195e:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
    1962:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
    1966:	be 01       	movw	r22, r28
    1968:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    196c:	85 e0       	ldi	r24, 0x05	; 5
    196e:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,(Month%10));
    1972:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    1976:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    197a:	be 01       	movw	r22, r28
    197c:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1980:	68 2f       	mov	r22, r24
    1982:	84 e0       	ldi	r24, 0x04	; 4
    1984:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,(Month/10));
    1988:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    198c:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    1990:	be 01       	movw	r22, r28
    1992:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1996:	83 e0       	ldi	r24, 0x03	; 3
    1998:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,(Date%10));
    199c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    19a0:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    19a4:	be 01       	movw	r22, r28
    19a6:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    19aa:	68 2f       	mov	r22, r24
    19ac:	82 e0       	ldi	r24, 0x02	; 2
    19ae:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,(Date/10));
    19b2:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    19b6:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    19ba:	be 01       	movw	r22, r28
    19bc:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
		// 		MAX7219_writeData(MAX7219_DIGIT3,(Minute%10));
		// 		MAX7219_writeData(MAX7219_DIGIT2,(Minute/10));
		// 		MAX7219_writeData(MAX7219_DIGIT1,(Hour%10));
		// 		MAX7219_writeData(MAX7219_DIGIT0,(Hour/10));
		// 	}
		if ((blink_count>15)&&(count==1)&&(SW_time_date==1))	//blink date
    19c6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <blink_count>
    19ca:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <blink_count+0x1>
    19ce:	40 97       	sbiw	r24, 0x10	; 16
    19d0:	08 f4       	brcc	.+2      	; 0x19d4 <__vector_11+0x22c>
    19d2:	6a c0       	rjmp	.+212    	; 0x1aa8 <__vector_11+0x300>
    19d4:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    19d8:	81 30       	cpi	r24, 0x01	; 1
    19da:	09 f0       	breq	.+2      	; 0x19de <__vector_11+0x236>
    19dc:	65 c0       	rjmp	.+202    	; 0x1aa8 <__vector_11+0x300>
    19de:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    19e2:	81 30       	cpi	r24, 0x01	; 1
    19e4:	09 f0       	breq	.+2      	; 0x19e8 <__vector_11+0x240>
    19e6:	60 c0       	rjmp	.+192    	; 0x1aa8 <__vector_11+0x300>
		{
			
			MAX7219_clearDisplay();
    19e8:	0e 94 be 09 	call	0x137c	; 0x137c <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,((yyyy%1000)%10));
    19ec:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <yyyy>
    19f0:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <yyyy+0x1>
    19f4:	08 ee       	ldi	r16, 0xE8	; 232
    19f6:	13 e0       	ldi	r17, 0x03	; 3
    19f8:	b8 01       	movw	r22, r16
    19fa:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    19fe:	ca e0       	ldi	r28, 0x0A	; 10
    1a00:	d0 e0       	ldi	r29, 0x00	; 0
    1a02:	be 01       	movw	r22, r28
    1a04:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1a08:	68 2f       	mov	r22, r24
    1a0a:	88 e0       	ldi	r24, 0x08	; 8
    1a0c:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,(((yyyy%1000)/10)%10));
    1a10:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <yyyy>
    1a14:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <yyyy+0x1>
    1a18:	b8 01       	movw	r22, r16
    1a1a:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1a1e:	be 01       	movw	r22, r28
    1a20:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1a24:	cb 01       	movw	r24, r22
    1a26:	be 01       	movw	r22, r28
    1a28:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1a2c:	68 2f       	mov	r22, r24
    1a2e:	87 e0       	ldi	r24, 0x07	; 7
    1a30:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,(((yyyy%1000)/100)%10));
    1a34:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <yyyy>
    1a38:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <yyyy+0x1>
    1a3c:	b8 01       	movw	r22, r16
    1a3e:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1a42:	64 e6       	ldi	r22, 0x64	; 100
    1a44:	70 e0       	ldi	r23, 0x00	; 0
    1a46:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	be 01       	movw	r22, r28
    1a4e:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1a52:	68 2f       	mov	r22, r24
    1a54:	86 e0       	ldi	r24, 0x06	; 6
    1a56:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,(yyyy/1000));
    1a5a:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <yyyy>
    1a5e:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <yyyy+0x1>
    1a62:	b8 01       	movw	r22, r16
    1a64:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1a68:	85 e0       	ldi	r24, 0x05	; 5
    1a6a:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,(Month%10));
    1a6e:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    1a72:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    1a76:	be 01       	movw	r22, r28
    1a78:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1a7c:	68 2f       	mov	r22, r24
    1a7e:	84 e0       	ldi	r24, 0x04	; 4
    1a80:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,(Month/10));
    1a84:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    1a88:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    1a8c:	be 01       	movw	r22, r28
    1a8e:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1a92:	83 e0       	ldi	r24, 0x03	; 3
    1a94:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,MAX7219_CHAR_BLANK);
    1a98:	6f e0       	ldi	r22, 0x0F	; 15
    1a9a:	82 e0       	ldi	r24, 0x02	; 2
    1a9c:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,MAX7219_CHAR_BLANK);
    1aa0:	6f e0       	ldi	r22, 0x0F	; 15
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
		}
		if ((blink_count>15)&&(count==2)&&(SW_time_date==1))	//blink month
    1aa8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <blink_count>
    1aac:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <blink_count+0x1>
    1ab0:	40 97       	sbiw	r24, 0x10	; 16
    1ab2:	08 f4       	brcc	.+2      	; 0x1ab6 <__vector_11+0x30e>
    1ab4:	6a c0       	rjmp	.+212    	; 0x1b8a <__vector_11+0x3e2>
    1ab6:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1aba:	82 30       	cpi	r24, 0x02	; 2
    1abc:	09 f0       	breq	.+2      	; 0x1ac0 <__vector_11+0x318>
    1abe:	65 c0       	rjmp	.+202    	; 0x1b8a <__vector_11+0x3e2>
    1ac0:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1ac4:	81 30       	cpi	r24, 0x01	; 1
    1ac6:	09 f0       	breq	.+2      	; 0x1aca <__vector_11+0x322>
    1ac8:	60 c0       	rjmp	.+192    	; 0x1b8a <__vector_11+0x3e2>
		{
			
			MAX7219_clearDisplay();
    1aca:	0e 94 be 09 	call	0x137c	; 0x137c <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,((yyyy%1000)%10));
    1ace:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <yyyy>
    1ad2:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <yyyy+0x1>
    1ad6:	08 ee       	ldi	r16, 0xE8	; 232
    1ad8:	13 e0       	ldi	r17, 0x03	; 3
    1ada:	b8 01       	movw	r22, r16
    1adc:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1ae0:	ca e0       	ldi	r28, 0x0A	; 10
    1ae2:	d0 e0       	ldi	r29, 0x00	; 0
    1ae4:	be 01       	movw	r22, r28
    1ae6:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1aea:	68 2f       	mov	r22, r24
    1aec:	88 e0       	ldi	r24, 0x08	; 8
    1aee:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,(((yyyy%1000)/10)%10));
    1af2:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <yyyy>
    1af6:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <yyyy+0x1>
    1afa:	b8 01       	movw	r22, r16
    1afc:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1b00:	be 01       	movw	r22, r28
    1b02:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1b06:	cb 01       	movw	r24, r22
    1b08:	be 01       	movw	r22, r28
    1b0a:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1b0e:	68 2f       	mov	r22, r24
    1b10:	87 e0       	ldi	r24, 0x07	; 7
    1b12:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,(((yyyy%1000)/100)%10));
    1b16:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <yyyy>
    1b1a:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <yyyy+0x1>
    1b1e:	b8 01       	movw	r22, r16
    1b20:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1b24:	64 e6       	ldi	r22, 0x64	; 100
    1b26:	70 e0       	ldi	r23, 0x00	; 0
    1b28:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	be 01       	movw	r22, r28
    1b30:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1b34:	68 2f       	mov	r22, r24
    1b36:	86 e0       	ldi	r24, 0x06	; 6
    1b38:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,(yyyy/1000));
    1b3c:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <yyyy>
    1b40:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <yyyy+0x1>
    1b44:	b8 01       	movw	r22, r16
    1b46:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1b4a:	85 e0       	ldi	r24, 0x05	; 5
    1b4c:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,MAX7219_CHAR_BLANK);
    1b50:	6f e0       	ldi	r22, 0x0F	; 15
    1b52:	84 e0       	ldi	r24, 0x04	; 4
    1b54:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,MAX7219_CHAR_BLANK);
    1b58:	6f e0       	ldi	r22, 0x0F	; 15
    1b5a:	83 e0       	ldi	r24, 0x03	; 3
    1b5c:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,(Date%10));
    1b60:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    1b64:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    1b68:	be 01       	movw	r22, r28
    1b6a:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1b6e:	68 2f       	mov	r22, r24
    1b70:	82 e0       	ldi	r24, 0x02	; 2
    1b72:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,(Date/10));
    1b76:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    1b7a:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    1b7e:	be 01       	movw	r22, r28
    1b80:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
		}
		if ((blink_count>15)&&(count==3)&&(SW_time_date==1))	//blink year
    1b8a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <blink_count>
    1b8e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <blink_count+0x1>
    1b92:	40 97       	sbiw	r24, 0x10	; 16
    1b94:	08 f4       	brcc	.+2      	; 0x1b98 <__vector_11+0x3f0>
    1b96:	47 c0       	rjmp	.+142    	; 0x1c26 <__vector_11+0x47e>
    1b98:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1b9c:	83 30       	cpi	r24, 0x03	; 3
    1b9e:	09 f0       	breq	.+2      	; 0x1ba2 <__vector_11+0x3fa>
    1ba0:	42 c0       	rjmp	.+132    	; 0x1c26 <__vector_11+0x47e>
    1ba2:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1ba6:	81 30       	cpi	r24, 0x01	; 1
    1ba8:	f1 f5       	brne	.+124    	; 0x1c26 <__vector_11+0x47e>
		{
			
			MAX7219_clearDisplay();
    1baa:	0e 94 be 09 	call	0x137c	; 0x137c <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,MAX7219_CHAR_BLANK);
    1bae:	6f e0       	ldi	r22, 0x0F	; 15
    1bb0:	88 e0       	ldi	r24, 0x08	; 8
    1bb2:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,MAX7219_CHAR_BLANK);
    1bb6:	6f e0       	ldi	r22, 0x0F	; 15
    1bb8:	87 e0       	ldi	r24, 0x07	; 7
    1bba:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,MAX7219_CHAR_BLANK);
    1bbe:	6f e0       	ldi	r22, 0x0F	; 15
    1bc0:	86 e0       	ldi	r24, 0x06	; 6
    1bc2:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,MAX7219_CHAR_BLANK);
    1bc6:	6f e0       	ldi	r22, 0x0F	; 15
    1bc8:	85 e0       	ldi	r24, 0x05	; 5
    1bca:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,(Month%10));
    1bce:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    1bd2:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    1bd6:	ca e0       	ldi	r28, 0x0A	; 10
    1bd8:	d0 e0       	ldi	r29, 0x00	; 0
    1bda:	be 01       	movw	r22, r28
    1bdc:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1be0:	68 2f       	mov	r22, r24
    1be2:	84 e0       	ldi	r24, 0x04	; 4
    1be4:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,(Month/10));
    1be8:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    1bec:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    1bf0:	be 01       	movw	r22, r28
    1bf2:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1bf6:	83 e0       	ldi	r24, 0x03	; 3
    1bf8:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,(Date%10));
    1bfc:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    1c00:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    1c04:	be 01       	movw	r22, r28
    1c06:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1c0a:	68 2f       	mov	r22, r24
    1c0c:	82 e0       	ldi	r24, 0x02	; 2
    1c0e:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,(Date/10));
    1c12:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    1c16:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    1c1a:	be 01       	movw	r22, r28
    1c1c:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
		}
		if ((blink_count>15)&&(count==1)&&(SW_time_date==3))	//blink A_HOUR
    1c26:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <blink_count>
    1c2a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <blink_count+0x1>
    1c2e:	40 97       	sbiw	r24, 0x10	; 16
    1c30:	48 f1       	brcs	.+82     	; 0x1c84 <__vector_11+0x4dc>
    1c32:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1c36:	81 30       	cpi	r24, 0x01	; 1
    1c38:	29 f5       	brne	.+74     	; 0x1c84 <__vector_11+0x4dc>
    1c3a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1c3e:	83 30       	cpi	r24, 0x03	; 3
    1c40:	09 f5       	brne	.+66     	; 0x1c84 <__vector_11+0x4dc>
		{
			
			MAX7219_clearDisplay();
    1c42:	0e 94 be 09 	call	0x137c	; 0x137c <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,(A_Minute%10));
    1c46:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <A_Minute>
    1c4a:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <A_Minute+0x1>
    1c4e:	ca e0       	ldi	r28, 0x0A	; 10
    1c50:	d0 e0       	ldi	r29, 0x00	; 0
    1c52:	be 01       	movw	r22, r28
    1c54:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1c58:	68 2f       	mov	r22, r24
    1c5a:	88 e0       	ldi	r24, 0x08	; 8
    1c5c:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,(A_Minute/10));
    1c60:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <A_Minute>
    1c64:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <A_Minute+0x1>
    1c68:	be 01       	movw	r22, r28
    1c6a:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1c6e:	87 e0       	ldi	r24, 0x07	; 7
    1c70:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,MAX7219_CHAR_BLANK);
    1c74:	6f e0       	ldi	r22, 0x0F	; 15
    1c76:	86 e0       	ldi	r24, 0x06	; 6
    1c78:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,MAX7219_CHAR_BLANK);
    1c7c:	6f e0       	ldi	r22, 0x0F	; 15
    1c7e:	85 e0       	ldi	r24, 0x05	; 5
    1c80:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>

		}
		if ((blink_count>15)&&(count==2)&&(SW_time_date==3))	//blink A_MIN
    1c84:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <blink_count>
    1c88:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <blink_count+0x1>
    1c8c:	40 97       	sbiw	r24, 0x10	; 16
    1c8e:	48 f1       	brcs	.+82     	; 0x1ce2 <__vector_11+0x53a>
    1c90:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1c94:	82 30       	cpi	r24, 0x02	; 2
    1c96:	29 f5       	brne	.+74     	; 0x1ce2 <__vector_11+0x53a>
    1c98:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1c9c:	83 30       	cpi	r24, 0x03	; 3
    1c9e:	09 f5       	brne	.+66     	; 0x1ce2 <__vector_11+0x53a>
		{
			
			MAX7219_clearDisplay();
    1ca0:	0e 94 be 09 	call	0x137c	; 0x137c <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,MAX7219_CHAR_BLANK);
    1ca4:	6f e0       	ldi	r22, 0x0F	; 15
    1ca6:	88 e0       	ldi	r24, 0x08	; 8
    1ca8:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,MAX7219_CHAR_BLANK);
    1cac:	6f e0       	ldi	r22, 0x0F	; 15
    1cae:	87 e0       	ldi	r24, 0x07	; 7
    1cb0:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,(A_Hour%10));
    1cb4:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <A_Hour>
    1cb8:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <A_Hour+0x1>
    1cbc:	ca e0       	ldi	r28, 0x0A	; 10
    1cbe:	d0 e0       	ldi	r29, 0x00	; 0
    1cc0:	be 01       	movw	r22, r28
    1cc2:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1cc6:	68 2f       	mov	r22, r24
    1cc8:	86 e0       	ldi	r24, 0x06	; 6
    1cca:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,(A_Hour/10));
    1cce:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <A_Hour>
    1cd2:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <A_Hour+0x1>
    1cd6:	be 01       	movw	r22, r28
    1cd8:	0e 94 b0 13 	call	0x2760	; 0x2760 <__divmodhi4>
    1cdc:	85 e0       	ldi	r24, 0x05	; 5
    1cde:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_writeData>
		}
		blink_count=0;
    1ce2:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <blink_count+0x1>
    1ce6:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <blink_count>
	}
}
    1cea:	ff 91       	pop	r31
    1cec:	ef 91       	pop	r30
    1cee:	df 91       	pop	r29
    1cf0:	cf 91       	pop	r28
    1cf2:	bf 91       	pop	r27
    1cf4:	af 91       	pop	r26
    1cf6:	9f 91       	pop	r25
    1cf8:	8f 91       	pop	r24
    1cfa:	7f 91       	pop	r23
    1cfc:	6f 91       	pop	r22
    1cfe:	5f 91       	pop	r21
    1d00:	4f 91       	pop	r20
    1d02:	3f 91       	pop	r19
    1d04:	2f 91       	pop	r18
    1d06:	1f 91       	pop	r17
    1d08:	0f 91       	pop	r16
    1d0a:	0f 90       	pop	r0
    1d0c:	0f be       	out	0x3f, r0	; 63
    1d0e:	0f 90       	pop	r0
    1d10:	1f 90       	pop	r1
    1d12:	18 95       	reti

00001d14 <__vector_1>:
// ISR(TIMER2_OVF_vect){
// 	
// }

//SW mode button
ISR(INT0_vect){
    1d14:	1f 92       	push	r1
    1d16:	0f 92       	push	r0
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	0f 92       	push	r0
    1d1c:	11 24       	eor	r1, r1
    1d1e:	2f 93       	push	r18
    1d20:	3f 93       	push	r19
    1d22:	4f 93       	push	r20
    1d24:	5f 93       	push	r21
    1d26:	6f 93       	push	r22
    1d28:	7f 93       	push	r23
    1d2a:	8f 93       	push	r24
    1d2c:	9f 93       	push	r25
    1d2e:	af 93       	push	r26
    1d30:	bf 93       	push	r27
    1d32:	ef 93       	push	r30
    1d34:	ff 93       	push	r31
	
	if(set==false){
    1d36:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <set>
    1d3a:	81 11       	cpse	r24, r1
    1d3c:	0b c0       	rjmp	.+22     	; 0x1d54 <__vector_1+0x40>
		SW_time_date++;
    1d3e:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__data_end>
    1d42:	9f 5f       	subi	r25, 0xFF	; 255
    1d44:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <__data_end>
		if(SW_time_date > 3){
    1d48:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__data_end>
    1d4c:	94 30       	cpi	r25, 0x04	; 4
    1d4e:	10 f0       	brcs	.+4      	; 0x1d54 <__vector_1+0x40>
			SW_time_date = 0;
    1d50:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
		}
	}
	if(SW_time_date==0 && set==true) {
    1d54:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__data_end>
    1d58:	91 11       	cpse	r25, r1
    1d5a:	0a c0       	rjmp	.+20     	; 0x1d70 <__vector_1+0x5c>
    1d5c:	88 23       	and	r24, r24
    1d5e:	41 f0       	breq	.+16     	; 0x1d70 <__vector_1+0x5c>
		SW_time_date = 0;
    1d60:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
		count=0;
    1d64:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <count>
		FixTime();
    1d68:	0e 94 7e 01 	call	0x2fc	; 0x2fc <FixTime>
		set=false;
    1d6c:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <set>
	}
	if(SW_time_date==1 && set==true) {
    1d70:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1d74:	81 30       	cpi	r24, 0x01	; 1
    1d76:	69 f4       	brne	.+26     	; 0x1d92 <__vector_1+0x7e>
    1d78:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <set>
    1d7c:	88 23       	and	r24, r24
    1d7e:	49 f0       	breq	.+18     	; 0x1d92 <__vector_1+0x7e>
		SW_time_date = 1;
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
		count=0;
    1d86:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <count>
		FixTime();
    1d8a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <FixTime>
		set=false;
    1d8e:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <set>
	}
	if(SW_time_date==3 && set==true) {
    1d92:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1d96:	83 30       	cpi	r24, 0x03	; 3
    1d98:	71 f4       	brne	.+28     	; 0x1db6 <__vector_1+0xa2>
    1d9a:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <set>
    1d9e:	88 23       	and	r24, r24
    1da0:	51 f0       	breq	.+20     	; 0x1db6 <__vector_1+0xa2>
		SW_time_date = 3;
    1da2:	83 e0       	ldi	r24, 0x03	; 3
    1da4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
		count=0;
    1da8:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <count>
		EN_alarm=true;
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <EN_alarm>
		set=false;
    1db2:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <set>
	}
}
    1db6:	ff 91       	pop	r31
    1db8:	ef 91       	pop	r30
    1dba:	bf 91       	pop	r27
    1dbc:	af 91       	pop	r26
    1dbe:	9f 91       	pop	r25
    1dc0:	8f 91       	pop	r24
    1dc2:	7f 91       	pop	r23
    1dc4:	6f 91       	pop	r22
    1dc6:	5f 91       	pop	r21
    1dc8:	4f 91       	pop	r20
    1dca:	3f 91       	pop	r19
    1dcc:	2f 91       	pop	r18
    1dce:	0f 90       	pop	r0
    1dd0:	0f be       	out	0x3f, r0	; 63
    1dd2:	0f 90       	pop	r0
    1dd4:	1f 90       	pop	r1
    1dd6:	18 95       	reti

00001dd8 <__vector_2>:


//Set time button
ISR(INT1_vect){
    1dd8:	1f 92       	push	r1
    1dda:	0f 92       	push	r0
    1ddc:	0f b6       	in	r0, 0x3f	; 63
    1dde:	0f 92       	push	r0
    1de0:	11 24       	eor	r1, r1
    1de2:	8f 93       	push	r24

	set = true;
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <set>
	count++;
    1dea:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1dee:	8f 5f       	subi	r24, 0xFF	; 255
    1df0:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <count>
	if (SW_time_date==0)
    1df4:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1df8:	81 11       	cpse	r24, r1
    1dfa:	08 c0       	rjmp	.+16     	; 0x1e0c <__vector_2+0x34>
	{
		if(count > 2) {
    1dfc:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1e00:	83 30       	cpi	r24, 0x03	; 3
    1e02:	20 f0       	brcs	.+8      	; 0x1e0c <__vector_2+0x34>
			count = 0;
    1e04:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <count>
			set=false;
    1e08:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <set>
		}
	}
	if (SW_time_date==1)
    1e0c:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1e10:	81 30       	cpi	r24, 0x01	; 1
    1e12:	41 f4       	brne	.+16     	; 0x1e24 <__vector_2+0x4c>
	{
		if(count > 3) {
    1e14:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1e18:	84 30       	cpi	r24, 0x04	; 4
    1e1a:	20 f0       	brcs	.+8      	; 0x1e24 <__vector_2+0x4c>
			count = 0;
    1e1c:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <count>
			set=false;
    1e20:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <set>
		}
	}
	if (SW_time_date==3)
    1e24:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1e28:	83 30       	cpi	r24, 0x03	; 3
    1e2a:	51 f4       	brne	.+20     	; 0x1e40 <__vector_2+0x68>
	{
		if(count > 2) {
    1e2c:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1e30:	83 30       	cpi	r24, 0x03	; 3
    1e32:	30 f0       	brcs	.+12     	; 0x1e40 <__vector_2+0x68>
			count = 0;
    1e34:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <count>
			EN_alarm=false;
    1e38:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <EN_alarm>
			set=false;
    1e3c:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <set>
		}
	}
}
    1e40:	8f 91       	pop	r24
    1e42:	0f 90       	pop	r0
    1e44:	0f be       	out	0x3f, r0	; 63
    1e46:	0f 90       	pop	r0
    1e48:	1f 90       	pop	r1
    1e4a:	18 95       	reti

00001e4c <__vector_3>:

//increase button
ISR(INT2_vect){
    1e4c:	1f 92       	push	r1
    1e4e:	0f 92       	push	r0
    1e50:	0f b6       	in	r0, 0x3f	; 63
    1e52:	0f 92       	push	r0
    1e54:	11 24       	eor	r1, r1
    1e56:	2f 93       	push	r18
    1e58:	3f 93       	push	r19
    1e5a:	8f 93       	push	r24
    1e5c:	9f 93       	push	r25
	if (EN_alarm == true && set==false)
    1e5e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <EN_alarm>
    1e62:	88 23       	and	r24, r24
    1e64:	39 f0       	breq	.+14     	; 0x1e74 <__vector_3+0x28>
    1e66:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <set>
    1e6a:	81 11       	cpse	r24, r1
    1e6c:	03 c0       	rjmp	.+6      	; 0x1e74 <__vector_3+0x28>
	{
		EN_alarm=false;
    1e6e:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <EN_alarm>
		BTN_PORTD = (0<<BUZ_LED);
    1e72:	12 ba       	out	0x12, r1	; 18
	}
	if((set == true) && (SW_time_date==0)){		//icrease hh, mm, ss
    1e74:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <set>
    1e78:	88 23       	and	r24, r24
    1e7a:	b9 f1       	breq	.+110    	; 0x1eea <__vector_3+0x9e>
    1e7c:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__data_end>
    1e80:	91 11       	cpse	r25, r1
    1e82:	33 c0       	rjmp	.+102    	; 0x1eea <__vector_3+0x9e>
		if(count == 1) {
    1e84:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <count>
    1e88:	91 30       	cpi	r25, 0x01	; 1
    1e8a:	b1 f4       	brne	.+44     	; 0x1eb8 <__vector_3+0x6c>
			Hour++;
    1e8c:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <Hour>
    1e90:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <Hour+0x1>
    1e94:	2f 5f       	subi	r18, 0xFF	; 255
    1e96:	3f 4f       	sbci	r19, 0xFF	; 255
    1e98:	30 93 6e 00 	sts	0x006E, r19	; 0x80006e <Hour+0x1>
    1e9c:	20 93 6d 00 	sts	0x006D, r18	; 0x80006d <Hour>
			if(Hour > 23) Hour = 0;
    1ea0:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <Hour>
    1ea4:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <Hour+0x1>
    1ea8:	28 31       	cpi	r18, 0x18	; 24
    1eaa:	31 05       	cpc	r19, r1
    1eac:	f4 f0       	brlt	.+60     	; 0x1eea <__vector_3+0x9e>
    1eae:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <Hour+0x1>
    1eb2:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <Hour>
    1eb6:	19 c0       	rjmp	.+50     	; 0x1eea <__vector_3+0x9e>
		}
		else if(count == 2) {
    1eb8:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <count>
    1ebc:	92 30       	cpi	r25, 0x02	; 2
    1ebe:	a9 f4       	brne	.+42     	; 0x1eea <__vector_3+0x9e>
			Minute++;
    1ec0:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <Minute>
    1ec4:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <Minute+0x1>
    1ec8:	2f 5f       	subi	r18, 0xFF	; 255
    1eca:	3f 4f       	sbci	r19, 0xFF	; 255
    1ecc:	30 93 70 00 	sts	0x0070, r19	; 0x800070 <Minute+0x1>
    1ed0:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <Minute>
			if(Minute > 59) Minute = 0;
    1ed4:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <Minute>
    1ed8:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <Minute+0x1>
    1edc:	2c 33       	cpi	r18, 0x3C	; 60
    1ede:	31 05       	cpc	r19, r1
    1ee0:	24 f0       	brlt	.+8      	; 0x1eea <__vector_3+0x9e>
    1ee2:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <Minute+0x1>
    1ee6:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <Minute>
// 			Second++;
// 			if(Second > 59) Second = 0;
// 		}
	}
	
	if((set == true) && (SW_time_date==1)){		//increase dd, mm, yyyy
    1eea:	88 23       	and	r24, r24
    1eec:	09 f4       	brne	.+2      	; 0x1ef0 <__vector_3+0xa4>
    1eee:	e3 c0       	rjmp	.+454    	; 0x20b6 <__vector_3+0x26a>
    1ef0:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__data_end>
    1ef4:	91 30       	cpi	r25, 0x01	; 1
    1ef6:	09 f0       	breq	.+2      	; 0x1efa <__vector_3+0xae>
    1ef8:	de c0       	rjmp	.+444    	; 0x20b6 <__vector_3+0x26a>
		if(count == 1) {
    1efa:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <count>
    1efe:	91 30       	cpi	r25, 0x01	; 1
    1f00:	09 f0       	breq	.+2      	; 0x1f04 <__vector_3+0xb8>
    1f02:	a4 c0       	rjmp	.+328    	; 0x204c <__vector_3+0x200>
			Date++;
    1f04:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <Date>
    1f08:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <Date+0x1>
    1f0c:	2f 5f       	subi	r18, 0xFF	; 255
    1f0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f10:	30 93 6a 00 	sts	0x006A, r19	; 0x80006a <Date+0x1>
    1f14:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <Date>
			if(Month == 4 || Month == 6  || Month == 9  || Month == 11)
    1f18:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    1f1c:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    1f20:	24 30       	cpi	r18, 0x04	; 4
    1f22:	31 05       	cpc	r19, r1
    1f24:	a9 f0       	breq	.+42     	; 0x1f50 <__vector_3+0x104>
    1f26:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    1f2a:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    1f2e:	26 30       	cpi	r18, 0x06	; 6
    1f30:	31 05       	cpc	r19, r1
    1f32:	71 f0       	breq	.+28     	; 0x1f50 <__vector_3+0x104>
    1f34:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    1f38:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    1f3c:	29 30       	cpi	r18, 0x09	; 9
    1f3e:	31 05       	cpc	r19, r1
    1f40:	39 f0       	breq	.+14     	; 0x1f50 <__vector_3+0x104>
    1f42:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    1f46:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    1f4a:	2b 30       	cpi	r18, 0x0B	; 11
    1f4c:	31 05       	cpc	r19, r1
    1f4e:	79 f4       	brne	.+30     	; 0x1f6e <__vector_3+0x122>
			{
				if(Date > 30)
    1f50:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <Date>
    1f54:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <Date+0x1>
    1f58:	2f 31       	cpi	r18, 0x1F	; 31
    1f5a:	31 05       	cpc	r19, r1
    1f5c:	0c f4       	brge	.+2      	; 0x1f60 <__vector_3+0x114>
    1f5e:	ab c0       	rjmp	.+342    	; 0x20b6 <__vector_3+0x26a>
				Date=1;
    1f60:	21 e0       	ldi	r18, 0x01	; 1
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	30 93 6a 00 	sts	0x006A, r19	; 0x80006a <Date+0x1>
    1f68:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <Date>
    1f6c:	a4 c0       	rjmp	.+328    	; 0x20b6 <__vector_3+0x26a>
			}
			else if(Month == 1 || Month == 3  || Month == 5  || Month == 7 || Month == 8  || Month == 10  || Month == 12)
    1f6e:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    1f72:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    1f76:	21 30       	cpi	r18, 0x01	; 1
    1f78:	31 05       	cpc	r19, r1
    1f7a:	51 f1       	breq	.+84     	; 0x1fd0 <__vector_3+0x184>
    1f7c:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    1f80:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    1f84:	23 30       	cpi	r18, 0x03	; 3
    1f86:	31 05       	cpc	r19, r1
    1f88:	19 f1       	breq	.+70     	; 0x1fd0 <__vector_3+0x184>
    1f8a:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    1f8e:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    1f92:	25 30       	cpi	r18, 0x05	; 5
    1f94:	31 05       	cpc	r19, r1
    1f96:	e1 f0       	breq	.+56     	; 0x1fd0 <__vector_3+0x184>
    1f98:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    1f9c:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    1fa0:	27 30       	cpi	r18, 0x07	; 7
    1fa2:	31 05       	cpc	r19, r1
    1fa4:	a9 f0       	breq	.+42     	; 0x1fd0 <__vector_3+0x184>
    1fa6:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    1faa:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    1fae:	28 30       	cpi	r18, 0x08	; 8
    1fb0:	31 05       	cpc	r19, r1
    1fb2:	71 f0       	breq	.+28     	; 0x1fd0 <__vector_3+0x184>
    1fb4:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    1fb8:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    1fbc:	2a 30       	cpi	r18, 0x0A	; 10
    1fbe:	31 05       	cpc	r19, r1
    1fc0:	39 f0       	breq	.+14     	; 0x1fd0 <__vector_3+0x184>
    1fc2:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    1fc6:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    1fca:	2c 30       	cpi	r18, 0x0C	; 12
    1fcc:	31 05       	cpc	r19, r1
    1fce:	79 f4       	brne	.+30     	; 0x1fee <__vector_3+0x1a2>
			{
				if(Date >31)
    1fd0:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <Date>
    1fd4:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <Date+0x1>
    1fd8:	20 32       	cpi	r18, 0x20	; 32
    1fda:	31 05       	cpc	r19, r1
    1fdc:	0c f4       	brge	.+2      	; 0x1fe0 <__vector_3+0x194>
    1fde:	6b c0       	rjmp	.+214    	; 0x20b6 <__vector_3+0x26a>
				Date=1;
    1fe0:	21 e0       	ldi	r18, 0x01	; 1
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	30 93 6a 00 	sts	0x006A, r19	; 0x80006a <Date+0x1>
    1fe8:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <Date>
    1fec:	64 c0       	rjmp	.+200    	; 0x20b6 <__vector_3+0x26a>
			}
			
			else if(yyyy/4 == 0 && yyyy/400 == 0)
    1fee:	20 91 82 00 	lds	r18, 0x0082	; 0x800082 <yyyy>
    1ff2:	30 91 83 00 	lds	r19, 0x0083	; 0x800083 <yyyy+0x1>
    1ff6:	2d 5f       	subi	r18, 0xFD	; 253
    1ff8:	3f 4f       	sbci	r19, 0xFF	; 255
    1ffa:	27 30       	cpi	r18, 0x07	; 7
    1ffc:	31 05       	cpc	r19, r1
    1ffe:	c0 f4       	brcc	.+48     	; 0x2030 <__vector_3+0x1e4>
    2000:	20 91 82 00 	lds	r18, 0x0082	; 0x800082 <yyyy>
    2004:	30 91 83 00 	lds	r19, 0x0083	; 0x800083 <yyyy+0x1>
    2008:	21 57       	subi	r18, 0x71	; 113
    200a:	3e 4f       	sbci	r19, 0xFE	; 254
    200c:	2f 31       	cpi	r18, 0x1F	; 31
    200e:	33 40       	sbci	r19, 0x03	; 3
    2010:	78 f4       	brcc	.+30     	; 0x2030 <__vector_3+0x1e4>
			{
				if(Date > 29)
    2012:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <Date>
    2016:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <Date+0x1>
    201a:	2e 31       	cpi	r18, 0x1E	; 30
    201c:	31 05       	cpc	r19, r1
    201e:	0c f4       	brge	.+2      	; 0x2022 <__vector_3+0x1d6>
    2020:	4a c0       	rjmp	.+148    	; 0x20b6 <__vector_3+0x26a>
				Date=1;
    2022:	21 e0       	ldi	r18, 0x01	; 1
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	30 93 6a 00 	sts	0x006A, r19	; 0x80006a <Date+0x1>
    202a:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <Date>
    202e:	43 c0       	rjmp	.+134    	; 0x20b6 <__vector_3+0x26a>
			}
			else
			{
				if(Date > 28)
    2030:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <Date>
    2034:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <Date+0x1>
    2038:	2d 31       	cpi	r18, 0x1D	; 29
    203a:	31 05       	cpc	r19, r1
    203c:	e4 f1       	brlt	.+120    	; 0x20b6 <__vector_3+0x26a>
				Date=1;
    203e:	21 e0       	ldi	r18, 0x01	; 1
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	30 93 6a 00 	sts	0x006A, r19	; 0x80006a <Date+0x1>
    2046:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <Date>
    204a:	35 c0       	rjmp	.+106    	; 0x20b6 <__vector_3+0x26a>
			}
		}
		else if(count == 2) {
    204c:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <count>
    2050:	92 30       	cpi	r25, 0x02	; 2
    2052:	c1 f4       	brne	.+48     	; 0x2084 <__vector_3+0x238>
			Month++;
    2054:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    2058:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    205c:	2f 5f       	subi	r18, 0xFF	; 255
    205e:	3f 4f       	sbci	r19, 0xFF	; 255
    2060:	30 93 68 00 	sts	0x0068, r19	; 0x800068 <Month+0x1>
    2064:	20 93 67 00 	sts	0x0067, r18	; 0x800067 <Month>
			if(Month > 12) Month = 1;
    2068:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    206c:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    2070:	2d 30       	cpi	r18, 0x0D	; 13
    2072:	31 05       	cpc	r19, r1
    2074:	04 f1       	brlt	.+64     	; 0x20b6 <__vector_3+0x26a>
    2076:	21 e0       	ldi	r18, 0x01	; 1
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	30 93 68 00 	sts	0x0068, r19	; 0x800068 <Month+0x1>
    207e:	20 93 67 00 	sts	0x0067, r18	; 0x800067 <Month>
    2082:	19 c0       	rjmp	.+50     	; 0x20b6 <__vector_3+0x26a>
		}
		else if(count == 3) {
    2084:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <count>
    2088:	93 30       	cpi	r25, 0x03	; 3
    208a:	a9 f4       	brne	.+42     	; 0x20b6 <__vector_3+0x26a>
			Year++;
    208c:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <Year>
    2090:	30 91 66 00 	lds	r19, 0x0066	; 0x800066 <Year+0x1>
    2094:	2f 5f       	subi	r18, 0xFF	; 255
    2096:	3f 4f       	sbci	r19, 0xFF	; 255
    2098:	30 93 66 00 	sts	0x0066, r19	; 0x800066 <Year+0x1>
    209c:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <Year>
			if(Year > 99) Year = 0;
    20a0:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <Year>
    20a4:	30 91 66 00 	lds	r19, 0x0066	; 0x800066 <Year+0x1>
    20a8:	24 36       	cpi	r18, 0x64	; 100
    20aa:	31 05       	cpc	r19, r1
    20ac:	24 f0       	brlt	.+8      	; 0x20b6 <__vector_3+0x26a>
    20ae:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <Year+0x1>
    20b2:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <Year>
		}
	}
	
	if((set == true) && (SW_time_date==3)){		//increase alarm
    20b6:	88 23       	and	r24, r24
    20b8:	91 f1       	breq	.+100    	; 0x211e <__vector_3+0x2d2>
    20ba:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    20be:	83 30       	cpi	r24, 0x03	; 3
    20c0:	71 f5       	brne	.+92     	; 0x211e <__vector_3+0x2d2>

		if(count == 1) {
    20c2:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    20c6:	81 30       	cpi	r24, 0x01	; 1
    20c8:	99 f4       	brne	.+38     	; 0x20f0 <__vector_3+0x2a4>
			A_Hour++;
    20ca:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <A_Hour>
    20ce:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <A_Hour+0x1>
    20d2:	01 96       	adiw	r24, 0x01	; 1
    20d4:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <A_Hour+0x1>
    20d8:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <A_Hour>
			if(A_Hour > 23) A_Hour = 0;
    20dc:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <A_Hour>
    20e0:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <A_Hour+0x1>
    20e4:	48 97       	sbiw	r24, 0x18	; 24
    20e6:	24 f0       	brlt	.+8      	; 0x20f0 <__vector_3+0x2a4>
    20e8:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <A_Hour+0x1>
    20ec:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <A_Hour>
		}
		if(count == 2) {
    20f0:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    20f4:	82 30       	cpi	r24, 0x02	; 2
    20f6:	99 f4       	brne	.+38     	; 0x211e <__vector_3+0x2d2>
			A_Minute++;
    20f8:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <A_Minute>
    20fc:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <A_Minute+0x1>
    2100:	01 96       	adiw	r24, 0x01	; 1
    2102:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <A_Minute+0x1>
    2106:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <A_Minute>
			if(A_Minute > 59) A_Minute = 0;
    210a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <A_Minute>
    210e:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <A_Minute+0x1>
    2112:	cc 97       	sbiw	r24, 0x3c	; 60
    2114:	24 f0       	brlt	.+8      	; 0x211e <__vector_3+0x2d2>
    2116:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <A_Minute+0x1>
    211a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <A_Minute>
		}
	}
}
    211e:	9f 91       	pop	r25
    2120:	8f 91       	pop	r24
    2122:	3f 91       	pop	r19
    2124:	2f 91       	pop	r18
    2126:	0f 90       	pop	r0
    2128:	0f be       	out	0x3f, r0	; 63
    212a:	0f 90       	pop	r0
    212c:	1f 90       	pop	r1
    212e:	18 95       	reti

00002130 <__subsf3>:
    2130:	50 58       	subi	r21, 0x80	; 128

00002132 <__addsf3>:
    2132:	bb 27       	eor	r27, r27
    2134:	aa 27       	eor	r26, r26
    2136:	0e 94 b0 10 	call	0x2160	; 0x2160 <__addsf3x>
    213a:	0c 94 6a 12 	jmp	0x24d4	; 0x24d4 <__fp_round>
    213e:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <__fp_pscA>
    2142:	38 f0       	brcs	.+14     	; 0x2152 <__addsf3+0x20>
    2144:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__fp_pscB>
    2148:	20 f0       	brcs	.+8      	; 0x2152 <__addsf3+0x20>
    214a:	39 f4       	brne	.+14     	; 0x215a <__addsf3+0x28>
    214c:	9f 3f       	cpi	r25, 0xFF	; 255
    214e:	19 f4       	brne	.+6      	; 0x2156 <__addsf3+0x24>
    2150:	26 f4       	brtc	.+8      	; 0x215a <__addsf3+0x28>
    2152:	0c 94 59 12 	jmp	0x24b2	; 0x24b2 <__fp_nan>
    2156:	0e f4       	brtc	.+2      	; 0x215a <__addsf3+0x28>
    2158:	e0 95       	com	r30
    215a:	e7 fb       	bst	r30, 7
    215c:	0c 94 2a 12 	jmp	0x2454	; 0x2454 <__fp_inf>

00002160 <__addsf3x>:
    2160:	e9 2f       	mov	r30, r25
    2162:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <__fp_split3>
    2166:	58 f3       	brcs	.-42     	; 0x213e <__addsf3+0xc>
    2168:	ba 17       	cp	r27, r26
    216a:	62 07       	cpc	r22, r18
    216c:	73 07       	cpc	r23, r19
    216e:	84 07       	cpc	r24, r20
    2170:	95 07       	cpc	r25, r21
    2172:	20 f0       	brcs	.+8      	; 0x217c <__addsf3x+0x1c>
    2174:	79 f4       	brne	.+30     	; 0x2194 <__addsf3x+0x34>
    2176:	a6 f5       	brtc	.+104    	; 0x21e0 <__addsf3x+0x80>
    2178:	0c 94 b5 12 	jmp	0x256a	; 0x256a <__fp_zero>
    217c:	0e f4       	brtc	.+2      	; 0x2180 <__addsf3x+0x20>
    217e:	e0 95       	com	r30
    2180:	0b 2e       	mov	r0, r27
    2182:	ba 2f       	mov	r27, r26
    2184:	a0 2d       	mov	r26, r0
    2186:	0b 01       	movw	r0, r22
    2188:	b9 01       	movw	r22, r18
    218a:	90 01       	movw	r18, r0
    218c:	0c 01       	movw	r0, r24
    218e:	ca 01       	movw	r24, r20
    2190:	a0 01       	movw	r20, r0
    2192:	11 24       	eor	r1, r1
    2194:	ff 27       	eor	r31, r31
    2196:	59 1b       	sub	r21, r25
    2198:	99 f0       	breq	.+38     	; 0x21c0 <__addsf3x+0x60>
    219a:	59 3f       	cpi	r21, 0xF9	; 249
    219c:	50 f4       	brcc	.+20     	; 0x21b2 <__addsf3x+0x52>
    219e:	50 3e       	cpi	r21, 0xE0	; 224
    21a0:	68 f1       	brcs	.+90     	; 0x21fc <__addsf3x+0x9c>
    21a2:	1a 16       	cp	r1, r26
    21a4:	f0 40       	sbci	r31, 0x00	; 0
    21a6:	a2 2f       	mov	r26, r18
    21a8:	23 2f       	mov	r18, r19
    21aa:	34 2f       	mov	r19, r20
    21ac:	44 27       	eor	r20, r20
    21ae:	58 5f       	subi	r21, 0xF8	; 248
    21b0:	f3 cf       	rjmp	.-26     	; 0x2198 <__addsf3x+0x38>
    21b2:	46 95       	lsr	r20
    21b4:	37 95       	ror	r19
    21b6:	27 95       	ror	r18
    21b8:	a7 95       	ror	r26
    21ba:	f0 40       	sbci	r31, 0x00	; 0
    21bc:	53 95       	inc	r21
    21be:	c9 f7       	brne	.-14     	; 0x21b2 <__addsf3x+0x52>
    21c0:	7e f4       	brtc	.+30     	; 0x21e0 <__addsf3x+0x80>
    21c2:	1f 16       	cp	r1, r31
    21c4:	ba 0b       	sbc	r27, r26
    21c6:	62 0b       	sbc	r22, r18
    21c8:	73 0b       	sbc	r23, r19
    21ca:	84 0b       	sbc	r24, r20
    21cc:	ba f0       	brmi	.+46     	; 0x21fc <__addsf3x+0x9c>
    21ce:	91 50       	subi	r25, 0x01	; 1
    21d0:	a1 f0       	breq	.+40     	; 0x21fa <__addsf3x+0x9a>
    21d2:	ff 0f       	add	r31, r31
    21d4:	bb 1f       	adc	r27, r27
    21d6:	66 1f       	adc	r22, r22
    21d8:	77 1f       	adc	r23, r23
    21da:	88 1f       	adc	r24, r24
    21dc:	c2 f7       	brpl	.-16     	; 0x21ce <__addsf3x+0x6e>
    21de:	0e c0       	rjmp	.+28     	; 0x21fc <__addsf3x+0x9c>
    21e0:	ba 0f       	add	r27, r26
    21e2:	62 1f       	adc	r22, r18
    21e4:	73 1f       	adc	r23, r19
    21e6:	84 1f       	adc	r24, r20
    21e8:	48 f4       	brcc	.+18     	; 0x21fc <__addsf3x+0x9c>
    21ea:	87 95       	ror	r24
    21ec:	77 95       	ror	r23
    21ee:	67 95       	ror	r22
    21f0:	b7 95       	ror	r27
    21f2:	f7 95       	ror	r31
    21f4:	9e 3f       	cpi	r25, 0xFE	; 254
    21f6:	08 f0       	brcs	.+2      	; 0x21fa <__addsf3x+0x9a>
    21f8:	b0 cf       	rjmp	.-160    	; 0x215a <__addsf3+0x28>
    21fa:	93 95       	inc	r25
    21fc:	88 0f       	add	r24, r24
    21fe:	08 f0       	brcs	.+2      	; 0x2202 <__addsf3x+0xa2>
    2200:	99 27       	eor	r25, r25
    2202:	ee 0f       	add	r30, r30
    2204:	97 95       	ror	r25
    2206:	87 95       	ror	r24
    2208:	08 95       	ret

0000220a <__cmpsf2>:
    220a:	0e 94 06 12 	call	0x240c	; 0x240c <__fp_cmp>
    220e:	08 f4       	brcc	.+2      	; 0x2212 <__cmpsf2+0x8>
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	08 95       	ret

00002214 <__divsf3>:
    2214:	0e 94 1e 11 	call	0x223c	; 0x223c <__divsf3x>
    2218:	0c 94 6a 12 	jmp	0x24d4	; 0x24d4 <__fp_round>
    221c:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__fp_pscB>
    2220:	58 f0       	brcs	.+22     	; 0x2238 <__divsf3+0x24>
    2222:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <__fp_pscA>
    2226:	40 f0       	brcs	.+16     	; 0x2238 <__divsf3+0x24>
    2228:	29 f4       	brne	.+10     	; 0x2234 <__divsf3+0x20>
    222a:	5f 3f       	cpi	r21, 0xFF	; 255
    222c:	29 f0       	breq	.+10     	; 0x2238 <__divsf3+0x24>
    222e:	0c 94 2a 12 	jmp	0x2454	; 0x2454 <__fp_inf>
    2232:	51 11       	cpse	r21, r1
    2234:	0c 94 b6 12 	jmp	0x256c	; 0x256c <__fp_szero>
    2238:	0c 94 59 12 	jmp	0x24b2	; 0x24b2 <__fp_nan>

0000223c <__divsf3x>:
    223c:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <__fp_split3>
    2240:	68 f3       	brcs	.-38     	; 0x221c <__divsf3+0x8>

00002242 <__divsf3_pse>:
    2242:	99 23       	and	r25, r25
    2244:	b1 f3       	breq	.-20     	; 0x2232 <__divsf3+0x1e>
    2246:	55 23       	and	r21, r21
    2248:	91 f3       	breq	.-28     	; 0x222e <__divsf3+0x1a>
    224a:	95 1b       	sub	r25, r21
    224c:	55 0b       	sbc	r21, r21
    224e:	bb 27       	eor	r27, r27
    2250:	aa 27       	eor	r26, r26
    2252:	62 17       	cp	r22, r18
    2254:	73 07       	cpc	r23, r19
    2256:	84 07       	cpc	r24, r20
    2258:	38 f0       	brcs	.+14     	; 0x2268 <__divsf3_pse+0x26>
    225a:	9f 5f       	subi	r25, 0xFF	; 255
    225c:	5f 4f       	sbci	r21, 0xFF	; 255
    225e:	22 0f       	add	r18, r18
    2260:	33 1f       	adc	r19, r19
    2262:	44 1f       	adc	r20, r20
    2264:	aa 1f       	adc	r26, r26
    2266:	a9 f3       	breq	.-22     	; 0x2252 <__divsf3_pse+0x10>
    2268:	35 d0       	rcall	.+106    	; 0x22d4 <__divsf3_pse+0x92>
    226a:	0e 2e       	mov	r0, r30
    226c:	3a f0       	brmi	.+14     	; 0x227c <__divsf3_pse+0x3a>
    226e:	e0 e8       	ldi	r30, 0x80	; 128
    2270:	32 d0       	rcall	.+100    	; 0x22d6 <__divsf3_pse+0x94>
    2272:	91 50       	subi	r25, 0x01	; 1
    2274:	50 40       	sbci	r21, 0x00	; 0
    2276:	e6 95       	lsr	r30
    2278:	00 1c       	adc	r0, r0
    227a:	ca f7       	brpl	.-14     	; 0x226e <__divsf3_pse+0x2c>
    227c:	2b d0       	rcall	.+86     	; 0x22d4 <__divsf3_pse+0x92>
    227e:	fe 2f       	mov	r31, r30
    2280:	29 d0       	rcall	.+82     	; 0x22d4 <__divsf3_pse+0x92>
    2282:	66 0f       	add	r22, r22
    2284:	77 1f       	adc	r23, r23
    2286:	88 1f       	adc	r24, r24
    2288:	bb 1f       	adc	r27, r27
    228a:	26 17       	cp	r18, r22
    228c:	37 07       	cpc	r19, r23
    228e:	48 07       	cpc	r20, r24
    2290:	ab 07       	cpc	r26, r27
    2292:	b0 e8       	ldi	r27, 0x80	; 128
    2294:	09 f0       	breq	.+2      	; 0x2298 <__divsf3_pse+0x56>
    2296:	bb 0b       	sbc	r27, r27
    2298:	80 2d       	mov	r24, r0
    229a:	bf 01       	movw	r22, r30
    229c:	ff 27       	eor	r31, r31
    229e:	93 58       	subi	r25, 0x83	; 131
    22a0:	5f 4f       	sbci	r21, 0xFF	; 255
    22a2:	3a f0       	brmi	.+14     	; 0x22b2 <__divsf3_pse+0x70>
    22a4:	9e 3f       	cpi	r25, 0xFE	; 254
    22a6:	51 05       	cpc	r21, r1
    22a8:	78 f0       	brcs	.+30     	; 0x22c8 <__divsf3_pse+0x86>
    22aa:	0c 94 2a 12 	jmp	0x2454	; 0x2454 <__fp_inf>
    22ae:	0c 94 b6 12 	jmp	0x256c	; 0x256c <__fp_szero>
    22b2:	5f 3f       	cpi	r21, 0xFF	; 255
    22b4:	e4 f3       	brlt	.-8      	; 0x22ae <__divsf3_pse+0x6c>
    22b6:	98 3e       	cpi	r25, 0xE8	; 232
    22b8:	d4 f3       	brlt	.-12     	; 0x22ae <__divsf3_pse+0x6c>
    22ba:	86 95       	lsr	r24
    22bc:	77 95       	ror	r23
    22be:	67 95       	ror	r22
    22c0:	b7 95       	ror	r27
    22c2:	f7 95       	ror	r31
    22c4:	9f 5f       	subi	r25, 0xFF	; 255
    22c6:	c9 f7       	brne	.-14     	; 0x22ba <__divsf3_pse+0x78>
    22c8:	88 0f       	add	r24, r24
    22ca:	91 1d       	adc	r25, r1
    22cc:	96 95       	lsr	r25
    22ce:	87 95       	ror	r24
    22d0:	97 f9       	bld	r25, 7
    22d2:	08 95       	ret
    22d4:	e1 e0       	ldi	r30, 0x01	; 1
    22d6:	66 0f       	add	r22, r22
    22d8:	77 1f       	adc	r23, r23
    22da:	88 1f       	adc	r24, r24
    22dc:	bb 1f       	adc	r27, r27
    22de:	62 17       	cp	r22, r18
    22e0:	73 07       	cpc	r23, r19
    22e2:	84 07       	cpc	r24, r20
    22e4:	ba 07       	cpc	r27, r26
    22e6:	20 f0       	brcs	.+8      	; 0x22f0 <__divsf3_pse+0xae>
    22e8:	62 1b       	sub	r22, r18
    22ea:	73 0b       	sbc	r23, r19
    22ec:	84 0b       	sbc	r24, r20
    22ee:	ba 0b       	sbc	r27, r26
    22f0:	ee 1f       	adc	r30, r30
    22f2:	88 f7       	brcc	.-30     	; 0x22d6 <__divsf3_pse+0x94>
    22f4:	e0 95       	com	r30
    22f6:	08 95       	ret

000022f8 <__fixsfsi>:
    22f8:	0e 94 83 11 	call	0x2306	; 0x2306 <__fixunssfsi>
    22fc:	68 94       	set
    22fe:	b1 11       	cpse	r27, r1
    2300:	0c 94 b6 12 	jmp	0x256c	; 0x256c <__fp_szero>
    2304:	08 95       	ret

00002306 <__fixunssfsi>:
    2306:	0e 94 83 12 	call	0x2506	; 0x2506 <__fp_splitA>
    230a:	88 f0       	brcs	.+34     	; 0x232e <__fixunssfsi+0x28>
    230c:	9f 57       	subi	r25, 0x7F	; 127
    230e:	98 f0       	brcs	.+38     	; 0x2336 <__fixunssfsi+0x30>
    2310:	b9 2f       	mov	r27, r25
    2312:	99 27       	eor	r25, r25
    2314:	b7 51       	subi	r27, 0x17	; 23
    2316:	b0 f0       	brcs	.+44     	; 0x2344 <__fixunssfsi+0x3e>
    2318:	e1 f0       	breq	.+56     	; 0x2352 <__fixunssfsi+0x4c>
    231a:	66 0f       	add	r22, r22
    231c:	77 1f       	adc	r23, r23
    231e:	88 1f       	adc	r24, r24
    2320:	99 1f       	adc	r25, r25
    2322:	1a f0       	brmi	.+6      	; 0x232a <__fixunssfsi+0x24>
    2324:	ba 95       	dec	r27
    2326:	c9 f7       	brne	.-14     	; 0x231a <__fixunssfsi+0x14>
    2328:	14 c0       	rjmp	.+40     	; 0x2352 <__fixunssfsi+0x4c>
    232a:	b1 30       	cpi	r27, 0x01	; 1
    232c:	91 f0       	breq	.+36     	; 0x2352 <__fixunssfsi+0x4c>
    232e:	0e 94 b5 12 	call	0x256a	; 0x256a <__fp_zero>
    2332:	b1 e0       	ldi	r27, 0x01	; 1
    2334:	08 95       	ret
    2336:	0c 94 b5 12 	jmp	0x256a	; 0x256a <__fp_zero>
    233a:	67 2f       	mov	r22, r23
    233c:	78 2f       	mov	r23, r24
    233e:	88 27       	eor	r24, r24
    2340:	b8 5f       	subi	r27, 0xF8	; 248
    2342:	39 f0       	breq	.+14     	; 0x2352 <__fixunssfsi+0x4c>
    2344:	b9 3f       	cpi	r27, 0xF9	; 249
    2346:	cc f3       	brlt	.-14     	; 0x233a <__fixunssfsi+0x34>
    2348:	86 95       	lsr	r24
    234a:	77 95       	ror	r23
    234c:	67 95       	ror	r22
    234e:	b3 95       	inc	r27
    2350:	d9 f7       	brne	.-10     	; 0x2348 <__fixunssfsi+0x42>
    2352:	3e f4       	brtc	.+14     	; 0x2362 <__fixunssfsi+0x5c>
    2354:	90 95       	com	r25
    2356:	80 95       	com	r24
    2358:	70 95       	com	r23
    235a:	61 95       	neg	r22
    235c:	7f 4f       	sbci	r23, 0xFF	; 255
    235e:	8f 4f       	sbci	r24, 0xFF	; 255
    2360:	9f 4f       	sbci	r25, 0xFF	; 255
    2362:	08 95       	ret

00002364 <__floatunsisf>:
    2364:	e8 94       	clt
    2366:	09 c0       	rjmp	.+18     	; 0x237a <__floatsisf+0x12>

00002368 <__floatsisf>:
    2368:	97 fb       	bst	r25, 7
    236a:	3e f4       	brtc	.+14     	; 0x237a <__floatsisf+0x12>
    236c:	90 95       	com	r25
    236e:	80 95       	com	r24
    2370:	70 95       	com	r23
    2372:	61 95       	neg	r22
    2374:	7f 4f       	sbci	r23, 0xFF	; 255
    2376:	8f 4f       	sbci	r24, 0xFF	; 255
    2378:	9f 4f       	sbci	r25, 0xFF	; 255
    237a:	99 23       	and	r25, r25
    237c:	a9 f0       	breq	.+42     	; 0x23a8 <__floatsisf+0x40>
    237e:	f9 2f       	mov	r31, r25
    2380:	96 e9       	ldi	r25, 0x96	; 150
    2382:	bb 27       	eor	r27, r27
    2384:	93 95       	inc	r25
    2386:	f6 95       	lsr	r31
    2388:	87 95       	ror	r24
    238a:	77 95       	ror	r23
    238c:	67 95       	ror	r22
    238e:	b7 95       	ror	r27
    2390:	f1 11       	cpse	r31, r1
    2392:	f8 cf       	rjmp	.-16     	; 0x2384 <__floatsisf+0x1c>
    2394:	fa f4       	brpl	.+62     	; 0x23d4 <__floatsisf+0x6c>
    2396:	bb 0f       	add	r27, r27
    2398:	11 f4       	brne	.+4      	; 0x239e <__floatsisf+0x36>
    239a:	60 ff       	sbrs	r22, 0
    239c:	1b c0       	rjmp	.+54     	; 0x23d4 <__floatsisf+0x6c>
    239e:	6f 5f       	subi	r22, 0xFF	; 255
    23a0:	7f 4f       	sbci	r23, 0xFF	; 255
    23a2:	8f 4f       	sbci	r24, 0xFF	; 255
    23a4:	9f 4f       	sbci	r25, 0xFF	; 255
    23a6:	16 c0       	rjmp	.+44     	; 0x23d4 <__floatsisf+0x6c>
    23a8:	88 23       	and	r24, r24
    23aa:	11 f0       	breq	.+4      	; 0x23b0 <__floatsisf+0x48>
    23ac:	96 e9       	ldi	r25, 0x96	; 150
    23ae:	11 c0       	rjmp	.+34     	; 0x23d2 <__floatsisf+0x6a>
    23b0:	77 23       	and	r23, r23
    23b2:	21 f0       	breq	.+8      	; 0x23bc <__floatsisf+0x54>
    23b4:	9e e8       	ldi	r25, 0x8E	; 142
    23b6:	87 2f       	mov	r24, r23
    23b8:	76 2f       	mov	r23, r22
    23ba:	05 c0       	rjmp	.+10     	; 0x23c6 <__floatsisf+0x5e>
    23bc:	66 23       	and	r22, r22
    23be:	71 f0       	breq	.+28     	; 0x23dc <__floatsisf+0x74>
    23c0:	96 e8       	ldi	r25, 0x86	; 134
    23c2:	86 2f       	mov	r24, r22
    23c4:	70 e0       	ldi	r23, 0x00	; 0
    23c6:	60 e0       	ldi	r22, 0x00	; 0
    23c8:	2a f0       	brmi	.+10     	; 0x23d4 <__floatsisf+0x6c>
    23ca:	9a 95       	dec	r25
    23cc:	66 0f       	add	r22, r22
    23ce:	77 1f       	adc	r23, r23
    23d0:	88 1f       	adc	r24, r24
    23d2:	da f7       	brpl	.-10     	; 0x23ca <__floatsisf+0x62>
    23d4:	88 0f       	add	r24, r24
    23d6:	96 95       	lsr	r25
    23d8:	87 95       	ror	r24
    23da:	97 f9       	bld	r25, 7
    23dc:	08 95       	ret

000023de <floor>:
    23de:	0e 94 9d 12 	call	0x253a	; 0x253a <__fp_trunc>
    23e2:	90 f0       	brcs	.+36     	; 0x2408 <floor+0x2a>
    23e4:	9f 37       	cpi	r25, 0x7F	; 127
    23e6:	48 f4       	brcc	.+18     	; 0x23fa <floor+0x1c>
    23e8:	91 11       	cpse	r25, r1
    23ea:	16 f0       	brts	.+4      	; 0x23f0 <floor+0x12>
    23ec:	0c 94 b6 12 	jmp	0x256c	; 0x256c <__fp_szero>
    23f0:	60 e0       	ldi	r22, 0x00	; 0
    23f2:	70 e0       	ldi	r23, 0x00	; 0
    23f4:	80 e8       	ldi	r24, 0x80	; 128
    23f6:	9f eb       	ldi	r25, 0xBF	; 191
    23f8:	08 95       	ret
    23fa:	26 f4       	brtc	.+8      	; 0x2404 <floor+0x26>
    23fc:	1b 16       	cp	r1, r27
    23fe:	61 1d       	adc	r22, r1
    2400:	71 1d       	adc	r23, r1
    2402:	81 1d       	adc	r24, r1
    2404:	0c 94 30 12 	jmp	0x2460	; 0x2460 <__fp_mintl>
    2408:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <__fp_mpack>

0000240c <__fp_cmp>:
    240c:	99 0f       	add	r25, r25
    240e:	00 08       	sbc	r0, r0
    2410:	55 0f       	add	r21, r21
    2412:	aa 0b       	sbc	r26, r26
    2414:	e0 e8       	ldi	r30, 0x80	; 128
    2416:	fe ef       	ldi	r31, 0xFE	; 254
    2418:	16 16       	cp	r1, r22
    241a:	17 06       	cpc	r1, r23
    241c:	e8 07       	cpc	r30, r24
    241e:	f9 07       	cpc	r31, r25
    2420:	c0 f0       	brcs	.+48     	; 0x2452 <__fp_cmp+0x46>
    2422:	12 16       	cp	r1, r18
    2424:	13 06       	cpc	r1, r19
    2426:	e4 07       	cpc	r30, r20
    2428:	f5 07       	cpc	r31, r21
    242a:	98 f0       	brcs	.+38     	; 0x2452 <__fp_cmp+0x46>
    242c:	62 1b       	sub	r22, r18
    242e:	73 0b       	sbc	r23, r19
    2430:	84 0b       	sbc	r24, r20
    2432:	95 0b       	sbc	r25, r21
    2434:	39 f4       	brne	.+14     	; 0x2444 <__fp_cmp+0x38>
    2436:	0a 26       	eor	r0, r26
    2438:	61 f0       	breq	.+24     	; 0x2452 <__fp_cmp+0x46>
    243a:	23 2b       	or	r18, r19
    243c:	24 2b       	or	r18, r20
    243e:	25 2b       	or	r18, r21
    2440:	21 f4       	brne	.+8      	; 0x244a <__fp_cmp+0x3e>
    2442:	08 95       	ret
    2444:	0a 26       	eor	r0, r26
    2446:	09 f4       	brne	.+2      	; 0x244a <__fp_cmp+0x3e>
    2448:	a1 40       	sbci	r26, 0x01	; 1
    244a:	a6 95       	lsr	r26
    244c:	8f ef       	ldi	r24, 0xFF	; 255
    244e:	81 1d       	adc	r24, r1
    2450:	81 1d       	adc	r24, r1
    2452:	08 95       	ret

00002454 <__fp_inf>:
    2454:	97 f9       	bld	r25, 7
    2456:	9f 67       	ori	r25, 0x7F	; 127
    2458:	80 e8       	ldi	r24, 0x80	; 128
    245a:	70 e0       	ldi	r23, 0x00	; 0
    245c:	60 e0       	ldi	r22, 0x00	; 0
    245e:	08 95       	ret

00002460 <__fp_mintl>:
    2460:	88 23       	and	r24, r24
    2462:	71 f4       	brne	.+28     	; 0x2480 <__fp_mintl+0x20>
    2464:	77 23       	and	r23, r23
    2466:	21 f0       	breq	.+8      	; 0x2470 <__fp_mintl+0x10>
    2468:	98 50       	subi	r25, 0x08	; 8
    246a:	87 2b       	or	r24, r23
    246c:	76 2f       	mov	r23, r22
    246e:	07 c0       	rjmp	.+14     	; 0x247e <__fp_mintl+0x1e>
    2470:	66 23       	and	r22, r22
    2472:	11 f4       	brne	.+4      	; 0x2478 <__fp_mintl+0x18>
    2474:	99 27       	eor	r25, r25
    2476:	0d c0       	rjmp	.+26     	; 0x2492 <__fp_mintl+0x32>
    2478:	90 51       	subi	r25, 0x10	; 16
    247a:	86 2b       	or	r24, r22
    247c:	70 e0       	ldi	r23, 0x00	; 0
    247e:	60 e0       	ldi	r22, 0x00	; 0
    2480:	2a f0       	brmi	.+10     	; 0x248c <__fp_mintl+0x2c>
    2482:	9a 95       	dec	r25
    2484:	66 0f       	add	r22, r22
    2486:	77 1f       	adc	r23, r23
    2488:	88 1f       	adc	r24, r24
    248a:	da f7       	brpl	.-10     	; 0x2482 <__fp_mintl+0x22>
    248c:	88 0f       	add	r24, r24
    248e:	96 95       	lsr	r25
    2490:	87 95       	ror	r24
    2492:	97 f9       	bld	r25, 7
    2494:	08 95       	ret

00002496 <__fp_mpack>:
    2496:	9f 3f       	cpi	r25, 0xFF	; 255
    2498:	31 f0       	breq	.+12     	; 0x24a6 <__fp_mpack_finite+0xc>

0000249a <__fp_mpack_finite>:
    249a:	91 50       	subi	r25, 0x01	; 1
    249c:	20 f4       	brcc	.+8      	; 0x24a6 <__fp_mpack_finite+0xc>
    249e:	87 95       	ror	r24
    24a0:	77 95       	ror	r23
    24a2:	67 95       	ror	r22
    24a4:	b7 95       	ror	r27
    24a6:	88 0f       	add	r24, r24
    24a8:	91 1d       	adc	r25, r1
    24aa:	96 95       	lsr	r25
    24ac:	87 95       	ror	r24
    24ae:	97 f9       	bld	r25, 7
    24b0:	08 95       	ret

000024b2 <__fp_nan>:
    24b2:	9f ef       	ldi	r25, 0xFF	; 255
    24b4:	80 ec       	ldi	r24, 0xC0	; 192
    24b6:	08 95       	ret

000024b8 <__fp_pscA>:
    24b8:	00 24       	eor	r0, r0
    24ba:	0a 94       	dec	r0
    24bc:	16 16       	cp	r1, r22
    24be:	17 06       	cpc	r1, r23
    24c0:	18 06       	cpc	r1, r24
    24c2:	09 06       	cpc	r0, r25
    24c4:	08 95       	ret

000024c6 <__fp_pscB>:
    24c6:	00 24       	eor	r0, r0
    24c8:	0a 94       	dec	r0
    24ca:	12 16       	cp	r1, r18
    24cc:	13 06       	cpc	r1, r19
    24ce:	14 06       	cpc	r1, r20
    24d0:	05 06       	cpc	r0, r21
    24d2:	08 95       	ret

000024d4 <__fp_round>:
    24d4:	09 2e       	mov	r0, r25
    24d6:	03 94       	inc	r0
    24d8:	00 0c       	add	r0, r0
    24da:	11 f4       	brne	.+4      	; 0x24e0 <__fp_round+0xc>
    24dc:	88 23       	and	r24, r24
    24de:	52 f0       	brmi	.+20     	; 0x24f4 <__fp_round+0x20>
    24e0:	bb 0f       	add	r27, r27
    24e2:	40 f4       	brcc	.+16     	; 0x24f4 <__fp_round+0x20>
    24e4:	bf 2b       	or	r27, r31
    24e6:	11 f4       	brne	.+4      	; 0x24ec <__fp_round+0x18>
    24e8:	60 ff       	sbrs	r22, 0
    24ea:	04 c0       	rjmp	.+8      	; 0x24f4 <__fp_round+0x20>
    24ec:	6f 5f       	subi	r22, 0xFF	; 255
    24ee:	7f 4f       	sbci	r23, 0xFF	; 255
    24f0:	8f 4f       	sbci	r24, 0xFF	; 255
    24f2:	9f 4f       	sbci	r25, 0xFF	; 255
    24f4:	08 95       	ret

000024f6 <__fp_split3>:
    24f6:	57 fd       	sbrc	r21, 7
    24f8:	90 58       	subi	r25, 0x80	; 128
    24fa:	44 0f       	add	r20, r20
    24fc:	55 1f       	adc	r21, r21
    24fe:	59 f0       	breq	.+22     	; 0x2516 <__fp_splitA+0x10>
    2500:	5f 3f       	cpi	r21, 0xFF	; 255
    2502:	71 f0       	breq	.+28     	; 0x2520 <__fp_splitA+0x1a>
    2504:	47 95       	ror	r20

00002506 <__fp_splitA>:
    2506:	88 0f       	add	r24, r24
    2508:	97 fb       	bst	r25, 7
    250a:	99 1f       	adc	r25, r25
    250c:	61 f0       	breq	.+24     	; 0x2526 <__fp_splitA+0x20>
    250e:	9f 3f       	cpi	r25, 0xFF	; 255
    2510:	79 f0       	breq	.+30     	; 0x2530 <__fp_splitA+0x2a>
    2512:	87 95       	ror	r24
    2514:	08 95       	ret
    2516:	12 16       	cp	r1, r18
    2518:	13 06       	cpc	r1, r19
    251a:	14 06       	cpc	r1, r20
    251c:	55 1f       	adc	r21, r21
    251e:	f2 cf       	rjmp	.-28     	; 0x2504 <__fp_split3+0xe>
    2520:	46 95       	lsr	r20
    2522:	f1 df       	rcall	.-30     	; 0x2506 <__fp_splitA>
    2524:	08 c0       	rjmp	.+16     	; 0x2536 <__fp_splitA+0x30>
    2526:	16 16       	cp	r1, r22
    2528:	17 06       	cpc	r1, r23
    252a:	18 06       	cpc	r1, r24
    252c:	99 1f       	adc	r25, r25
    252e:	f1 cf       	rjmp	.-30     	; 0x2512 <__fp_splitA+0xc>
    2530:	86 95       	lsr	r24
    2532:	71 05       	cpc	r23, r1
    2534:	61 05       	cpc	r22, r1
    2536:	08 94       	sec
    2538:	08 95       	ret

0000253a <__fp_trunc>:
    253a:	0e 94 83 12 	call	0x2506	; 0x2506 <__fp_splitA>
    253e:	a0 f0       	brcs	.+40     	; 0x2568 <__fp_trunc+0x2e>
    2540:	be e7       	ldi	r27, 0x7E	; 126
    2542:	b9 17       	cp	r27, r25
    2544:	88 f4       	brcc	.+34     	; 0x2568 <__fp_trunc+0x2e>
    2546:	bb 27       	eor	r27, r27
    2548:	9f 38       	cpi	r25, 0x8F	; 143
    254a:	60 f4       	brcc	.+24     	; 0x2564 <__fp_trunc+0x2a>
    254c:	16 16       	cp	r1, r22
    254e:	b1 1d       	adc	r27, r1
    2550:	67 2f       	mov	r22, r23
    2552:	78 2f       	mov	r23, r24
    2554:	88 27       	eor	r24, r24
    2556:	98 5f       	subi	r25, 0xF8	; 248
    2558:	f7 cf       	rjmp	.-18     	; 0x2548 <__fp_trunc+0xe>
    255a:	86 95       	lsr	r24
    255c:	77 95       	ror	r23
    255e:	67 95       	ror	r22
    2560:	b1 1d       	adc	r27, r1
    2562:	93 95       	inc	r25
    2564:	96 39       	cpi	r25, 0x96	; 150
    2566:	c8 f3       	brcs	.-14     	; 0x255a <__fp_trunc+0x20>
    2568:	08 95       	ret

0000256a <__fp_zero>:
    256a:	e8 94       	clt

0000256c <__fp_szero>:
    256c:	bb 27       	eor	r27, r27
    256e:	66 27       	eor	r22, r22
    2570:	77 27       	eor	r23, r23
    2572:	cb 01       	movw	r24, r22
    2574:	97 f9       	bld	r25, 7
    2576:	08 95       	ret

00002578 <__gesf2>:
    2578:	0e 94 06 12 	call	0x240c	; 0x240c <__fp_cmp>
    257c:	08 f4       	brcc	.+2      	; 0x2580 <__gesf2+0x8>
    257e:	8f ef       	ldi	r24, 0xFF	; 255
    2580:	08 95       	ret

00002582 <__mulsf3>:
    2582:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <__mulsf3x>
    2586:	0c 94 6a 12 	jmp	0x24d4	; 0x24d4 <__fp_round>
    258a:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <__fp_pscA>
    258e:	38 f0       	brcs	.+14     	; 0x259e <__mulsf3+0x1c>
    2590:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__fp_pscB>
    2594:	20 f0       	brcs	.+8      	; 0x259e <__mulsf3+0x1c>
    2596:	95 23       	and	r25, r21
    2598:	11 f0       	breq	.+4      	; 0x259e <__mulsf3+0x1c>
    259a:	0c 94 2a 12 	jmp	0x2454	; 0x2454 <__fp_inf>
    259e:	0c 94 59 12 	jmp	0x24b2	; 0x24b2 <__fp_nan>
    25a2:	11 24       	eor	r1, r1
    25a4:	0c 94 b6 12 	jmp	0x256c	; 0x256c <__fp_szero>

000025a8 <__mulsf3x>:
    25a8:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <__fp_split3>
    25ac:	70 f3       	brcs	.-36     	; 0x258a <__mulsf3+0x8>

000025ae <__mulsf3_pse>:
    25ae:	95 9f       	mul	r25, r21
    25b0:	c1 f3       	breq	.-16     	; 0x25a2 <__mulsf3+0x20>
    25b2:	95 0f       	add	r25, r21
    25b4:	50 e0       	ldi	r21, 0x00	; 0
    25b6:	55 1f       	adc	r21, r21
    25b8:	62 9f       	mul	r22, r18
    25ba:	f0 01       	movw	r30, r0
    25bc:	72 9f       	mul	r23, r18
    25be:	bb 27       	eor	r27, r27
    25c0:	f0 0d       	add	r31, r0
    25c2:	b1 1d       	adc	r27, r1
    25c4:	63 9f       	mul	r22, r19
    25c6:	aa 27       	eor	r26, r26
    25c8:	f0 0d       	add	r31, r0
    25ca:	b1 1d       	adc	r27, r1
    25cc:	aa 1f       	adc	r26, r26
    25ce:	64 9f       	mul	r22, r20
    25d0:	66 27       	eor	r22, r22
    25d2:	b0 0d       	add	r27, r0
    25d4:	a1 1d       	adc	r26, r1
    25d6:	66 1f       	adc	r22, r22
    25d8:	82 9f       	mul	r24, r18
    25da:	22 27       	eor	r18, r18
    25dc:	b0 0d       	add	r27, r0
    25de:	a1 1d       	adc	r26, r1
    25e0:	62 1f       	adc	r22, r18
    25e2:	73 9f       	mul	r23, r19
    25e4:	b0 0d       	add	r27, r0
    25e6:	a1 1d       	adc	r26, r1
    25e8:	62 1f       	adc	r22, r18
    25ea:	83 9f       	mul	r24, r19
    25ec:	a0 0d       	add	r26, r0
    25ee:	61 1d       	adc	r22, r1
    25f0:	22 1f       	adc	r18, r18
    25f2:	74 9f       	mul	r23, r20
    25f4:	33 27       	eor	r19, r19
    25f6:	a0 0d       	add	r26, r0
    25f8:	61 1d       	adc	r22, r1
    25fa:	23 1f       	adc	r18, r19
    25fc:	84 9f       	mul	r24, r20
    25fe:	60 0d       	add	r22, r0
    2600:	21 1d       	adc	r18, r1
    2602:	82 2f       	mov	r24, r18
    2604:	76 2f       	mov	r23, r22
    2606:	6a 2f       	mov	r22, r26
    2608:	11 24       	eor	r1, r1
    260a:	9f 57       	subi	r25, 0x7F	; 127
    260c:	50 40       	sbci	r21, 0x00	; 0
    260e:	9a f0       	brmi	.+38     	; 0x2636 <__mulsf3_pse+0x88>
    2610:	f1 f0       	breq	.+60     	; 0x264e <__mulsf3_pse+0xa0>
    2612:	88 23       	and	r24, r24
    2614:	4a f0       	brmi	.+18     	; 0x2628 <__mulsf3_pse+0x7a>
    2616:	ee 0f       	add	r30, r30
    2618:	ff 1f       	adc	r31, r31
    261a:	bb 1f       	adc	r27, r27
    261c:	66 1f       	adc	r22, r22
    261e:	77 1f       	adc	r23, r23
    2620:	88 1f       	adc	r24, r24
    2622:	91 50       	subi	r25, 0x01	; 1
    2624:	50 40       	sbci	r21, 0x00	; 0
    2626:	a9 f7       	brne	.-22     	; 0x2612 <__mulsf3_pse+0x64>
    2628:	9e 3f       	cpi	r25, 0xFE	; 254
    262a:	51 05       	cpc	r21, r1
    262c:	80 f0       	brcs	.+32     	; 0x264e <__mulsf3_pse+0xa0>
    262e:	0c 94 2a 12 	jmp	0x2454	; 0x2454 <__fp_inf>
    2632:	0c 94 b6 12 	jmp	0x256c	; 0x256c <__fp_szero>
    2636:	5f 3f       	cpi	r21, 0xFF	; 255
    2638:	e4 f3       	brlt	.-8      	; 0x2632 <__mulsf3_pse+0x84>
    263a:	98 3e       	cpi	r25, 0xE8	; 232
    263c:	d4 f3       	brlt	.-12     	; 0x2632 <__mulsf3_pse+0x84>
    263e:	86 95       	lsr	r24
    2640:	77 95       	ror	r23
    2642:	67 95       	ror	r22
    2644:	b7 95       	ror	r27
    2646:	f7 95       	ror	r31
    2648:	e7 95       	ror	r30
    264a:	9f 5f       	subi	r25, 0xFF	; 255
    264c:	c1 f7       	brne	.-16     	; 0x263e <__mulsf3_pse+0x90>
    264e:	fe 2b       	or	r31, r30
    2650:	88 0f       	add	r24, r24
    2652:	91 1d       	adc	r25, r1
    2654:	96 95       	lsr	r25
    2656:	87 95       	ror	r24
    2658:	97 f9       	bld	r25, 7
    265a:	08 95       	ret

0000265c <sin>:
    265c:	9f 93       	push	r25
    265e:	0e 94 38 13 	call	0x2670	; 0x2670 <__fp_rempio2>
    2662:	0f 90       	pop	r0
    2664:	07 fc       	sbrc	r0, 7
    2666:	ee 5f       	subi	r30, 0xFE	; 254
    2668:	0c 94 61 13 	jmp	0x26c2	; 0x26c2 <__fp_sinus>
    266c:	0c 94 59 12 	jmp	0x24b2	; 0x24b2 <__fp_nan>

00002670 <__fp_rempio2>:
    2670:	0e 94 83 12 	call	0x2506	; 0x2506 <__fp_splitA>
    2674:	d8 f3       	brcs	.-10     	; 0x266c <sin+0x10>
    2676:	e8 94       	clt
    2678:	e0 e0       	ldi	r30, 0x00	; 0
    267a:	bb 27       	eor	r27, r27
    267c:	9f 57       	subi	r25, 0x7F	; 127
    267e:	f0 f0       	brcs	.+60     	; 0x26bc <__fp_rempio2+0x4c>
    2680:	2a ed       	ldi	r18, 0xDA	; 218
    2682:	3f e0       	ldi	r19, 0x0F	; 15
    2684:	49 ec       	ldi	r20, 0xC9	; 201
    2686:	06 c0       	rjmp	.+12     	; 0x2694 <__fp_rempio2+0x24>
    2688:	ee 0f       	add	r30, r30
    268a:	bb 0f       	add	r27, r27
    268c:	66 1f       	adc	r22, r22
    268e:	77 1f       	adc	r23, r23
    2690:	88 1f       	adc	r24, r24
    2692:	28 f0       	brcs	.+10     	; 0x269e <__fp_rempio2+0x2e>
    2694:	b2 3a       	cpi	r27, 0xA2	; 162
    2696:	62 07       	cpc	r22, r18
    2698:	73 07       	cpc	r23, r19
    269a:	84 07       	cpc	r24, r20
    269c:	28 f0       	brcs	.+10     	; 0x26a8 <__fp_rempio2+0x38>
    269e:	b2 5a       	subi	r27, 0xA2	; 162
    26a0:	62 0b       	sbc	r22, r18
    26a2:	73 0b       	sbc	r23, r19
    26a4:	84 0b       	sbc	r24, r20
    26a6:	e3 95       	inc	r30
    26a8:	9a 95       	dec	r25
    26aa:	72 f7       	brpl	.-36     	; 0x2688 <__fp_rempio2+0x18>
    26ac:	80 38       	cpi	r24, 0x80	; 128
    26ae:	30 f4       	brcc	.+12     	; 0x26bc <__fp_rempio2+0x4c>
    26b0:	9a 95       	dec	r25
    26b2:	bb 0f       	add	r27, r27
    26b4:	66 1f       	adc	r22, r22
    26b6:	77 1f       	adc	r23, r23
    26b8:	88 1f       	adc	r24, r24
    26ba:	d2 f7       	brpl	.-12     	; 0x26b0 <__fp_rempio2+0x40>
    26bc:	90 48       	sbci	r25, 0x80	; 128
    26be:	0c 94 4d 12 	jmp	0x249a	; 0x249a <__fp_mpack_finite>

000026c2 <__fp_sinus>:
    26c2:	ef 93       	push	r30
    26c4:	e0 ff       	sbrs	r30, 0
    26c6:	07 c0       	rjmp	.+14     	; 0x26d6 <__fp_sinus+0x14>
    26c8:	a2 ea       	ldi	r26, 0xA2	; 162
    26ca:	2a ed       	ldi	r18, 0xDA	; 218
    26cc:	3f e0       	ldi	r19, 0x0F	; 15
    26ce:	49 ec       	ldi	r20, 0xC9	; 201
    26d0:	5f eb       	ldi	r21, 0xBF	; 191
    26d2:	0e 94 b0 10 	call	0x2160	; 0x2160 <__addsf3x>
    26d6:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <__fp_round>
    26da:	0f 90       	pop	r0
    26dc:	03 94       	inc	r0
    26de:	01 fc       	sbrc	r0, 1
    26e0:	90 58       	subi	r25, 0x80	; 128
    26e2:	e4 e5       	ldi	r30, 0x54	; 84
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	0c 94 75 13 	jmp	0x26ea	; 0x26ea <__fp_powsodd>

000026ea <__fp_powsodd>:
    26ea:	9f 93       	push	r25
    26ec:	8f 93       	push	r24
    26ee:	7f 93       	push	r23
    26f0:	6f 93       	push	r22
    26f2:	ff 93       	push	r31
    26f4:	ef 93       	push	r30
    26f6:	9b 01       	movw	r18, r22
    26f8:	ac 01       	movw	r20, r24
    26fa:	0e 94 c1 12 	call	0x2582	; 0x2582 <__mulsf3>
    26fe:	ef 91       	pop	r30
    2700:	ff 91       	pop	r31
    2702:	0e 94 89 13 	call	0x2712	; 0x2712 <__fp_powser>
    2706:	2f 91       	pop	r18
    2708:	3f 91       	pop	r19
    270a:	4f 91       	pop	r20
    270c:	5f 91       	pop	r21
    270e:	0c 94 c1 12 	jmp	0x2582	; 0x2582 <__mulsf3>

00002712 <__fp_powser>:
    2712:	df 93       	push	r29
    2714:	cf 93       	push	r28
    2716:	1f 93       	push	r17
    2718:	0f 93       	push	r16
    271a:	ff 92       	push	r15
    271c:	ef 92       	push	r14
    271e:	df 92       	push	r13
    2720:	7b 01       	movw	r14, r22
    2722:	8c 01       	movw	r16, r24
    2724:	68 94       	set
    2726:	06 c0       	rjmp	.+12     	; 0x2734 <__fp_powser+0x22>
    2728:	da 2e       	mov	r13, r26
    272a:	ef 01       	movw	r28, r30
    272c:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <__mulsf3x>
    2730:	fe 01       	movw	r30, r28
    2732:	e8 94       	clt
    2734:	a5 91       	lpm	r26, Z+
    2736:	25 91       	lpm	r18, Z+
    2738:	35 91       	lpm	r19, Z+
    273a:	45 91       	lpm	r20, Z+
    273c:	55 91       	lpm	r21, Z+
    273e:	a6 f3       	brts	.-24     	; 0x2728 <__fp_powser+0x16>
    2740:	ef 01       	movw	r28, r30
    2742:	0e 94 b0 10 	call	0x2160	; 0x2160 <__addsf3x>
    2746:	fe 01       	movw	r30, r28
    2748:	97 01       	movw	r18, r14
    274a:	a8 01       	movw	r20, r16
    274c:	da 94       	dec	r13
    274e:	69 f7       	brne	.-38     	; 0x272a <__fp_powser+0x18>
    2750:	df 90       	pop	r13
    2752:	ef 90       	pop	r14
    2754:	ff 90       	pop	r15
    2756:	0f 91       	pop	r16
    2758:	1f 91       	pop	r17
    275a:	cf 91       	pop	r28
    275c:	df 91       	pop	r29
    275e:	08 95       	ret

00002760 <__divmodhi4>:
    2760:	97 fb       	bst	r25, 7
    2762:	07 2e       	mov	r0, r23
    2764:	16 f4       	brtc	.+4      	; 0x276a <__divmodhi4+0xa>
    2766:	00 94       	com	r0
    2768:	07 d0       	rcall	.+14     	; 0x2778 <__divmodhi4_neg1>
    276a:	77 fd       	sbrc	r23, 7
    276c:	09 d0       	rcall	.+18     	; 0x2780 <__divmodhi4_neg2>
    276e:	0e 94 c4 13 	call	0x2788	; 0x2788 <__udivmodhi4>
    2772:	07 fc       	sbrc	r0, 7
    2774:	05 d0       	rcall	.+10     	; 0x2780 <__divmodhi4_neg2>
    2776:	3e f4       	brtc	.+14     	; 0x2786 <__divmodhi4_exit>

00002778 <__divmodhi4_neg1>:
    2778:	90 95       	com	r25
    277a:	81 95       	neg	r24
    277c:	9f 4f       	sbci	r25, 0xFF	; 255
    277e:	08 95       	ret

00002780 <__divmodhi4_neg2>:
    2780:	70 95       	com	r23
    2782:	61 95       	neg	r22
    2784:	7f 4f       	sbci	r23, 0xFF	; 255

00002786 <__divmodhi4_exit>:
    2786:	08 95       	ret

00002788 <__udivmodhi4>:
    2788:	aa 1b       	sub	r26, r26
    278a:	bb 1b       	sub	r27, r27
    278c:	51 e1       	ldi	r21, 0x11	; 17
    278e:	07 c0       	rjmp	.+14     	; 0x279e <__udivmodhi4_ep>

00002790 <__udivmodhi4_loop>:
    2790:	aa 1f       	adc	r26, r26
    2792:	bb 1f       	adc	r27, r27
    2794:	a6 17       	cp	r26, r22
    2796:	b7 07       	cpc	r27, r23
    2798:	10 f0       	brcs	.+4      	; 0x279e <__udivmodhi4_ep>
    279a:	a6 1b       	sub	r26, r22
    279c:	b7 0b       	sbc	r27, r23

0000279e <__udivmodhi4_ep>:
    279e:	88 1f       	adc	r24, r24
    27a0:	99 1f       	adc	r25, r25
    27a2:	5a 95       	dec	r21
    27a4:	a9 f7       	brne	.-22     	; 0x2790 <__udivmodhi4_loop>
    27a6:	80 95       	com	r24
    27a8:	90 95       	com	r25
    27aa:	bc 01       	movw	r22, r24
    27ac:	cd 01       	movw	r24, r26
    27ae:	08 95       	ret

000027b0 <_exit>:
    27b0:	f8 94       	cli

000027b2 <__stop_program>:
    27b2:	ff cf       	rjmp	.-2      	; 0x27b2 <__stop_program>
